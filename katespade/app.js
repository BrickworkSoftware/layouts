(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

// rawAsap provides everything we need except exception management.
var rawAsap = require("./raw");
// RawTasks are recycled to reduce GC churn.
var freeTasks = [];
// We queue errors to ensure they are thrown in right order (FIFO).
// Array-as-queue is good enough here, since we are just dealing with exceptions.
var pendingErrors = [];
var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);

function throwFirstError() {
    if (pendingErrors.length) {
        throw pendingErrors.shift();
    }
}

/**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */
module.exports = asap;
function asap(task) {
    var rawTask;
    if (freeTasks.length) {
        rawTask = freeTasks.pop();
    } else {
        rawTask = new RawTask();
    }
    rawTask.task = task;
    rawAsap(rawTask);
}

// We wrap tasks with recyclable task objects.  A task object implements
// `call`, just like a function.
function RawTask() {
    this.task = null;
}

// The sole purpose of wrapping the task is to catch the exception and recycle
// the task object after its single use.
RawTask.prototype.call = function () {
    try {
        this.task.call();
    } catch (error) {
        if (asap.onerror) {
            // This hook exists purely for testing purposes.
            // Its name will be periodically randomized to break any code that
            // depends on its existence.
            asap.onerror(error);
        } else {
            // In a web browser, exceptions are not fatal. However, to avoid
            // slowing down the queue of pending tasks, we rethrow the error in a
            // lower priority turn.
            pendingErrors.push(error);
            requestErrorThrow();
        }
    } finally {
        this.task = null;
        freeTasks[freeTasks.length] = this;
    }
};

},{"./raw":2}],2:[function(require,module,exports){
(function (global){
"use strict";

// Use the fastest means possible to execute a task in its own turn, with
// priority over other events including IO, animation, reflow, and redraw
// events in browsers.
//
// An exception thrown by a task will permanently interrupt the processing of
// subsequent tasks. The higher level `asap` function ensures that if an
// exception is thrown by a task, that the task queue will continue flushing as
// soon as possible, but if you use `rawAsap` directly, you are responsible to
// either ensure that no exceptions are thrown from your task, or to manually
// call `rawAsap.requestFlush` if an exception is thrown.
module.exports = rawAsap;
function rawAsap(task) {
    if (!queue.length) {
        requestFlush();
        flushing = true;
    }
    // Equivalent to push, but avoids a function call.
    queue[queue.length] = task;
}

var queue = [];
// Once a flush has been requested, no further calls to `requestFlush` are
// necessary until the next `flush` completes.
var flushing = false;
// `requestFlush` is an implementation-specific method that attempts to kick
// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
// the event queue before yielding to the browser's own event loop.
var requestFlush;
// The position of the next task to execute in the task queue. This is
// preserved between calls to `flush` so that it can be resumed if
// a task throws an exception.
var index = 0;
// If a task schedules additional tasks recursively, the task queue can grow
// unbounded. To prevent memory exhaustion, the task queue will periodically
// truncate already-completed tasks.
var capacity = 1024;

// The flush function processes all tasks that have been scheduled with
// `rawAsap` unless and until one of those tasks throws an exception.
// If a task throws an exception, `flush` ensures that its state will remain
// consistent and will resume where it left off when called again.
// However, `flush` does not make any arrangements to be called again if an
// exception is thrown.
function flush() {
    while (index < queue.length) {
        var currentIndex = index;
        // Advance the index before calling the task. This ensures that we will
        // begin flushing on the next task the task throws an error.
        index = index + 1;
        queue[currentIndex].call();
        // Prevent leaking memory for long chains of recursive calls to `asap`.
        // If we call `asap` within tasks scheduled by `asap`, the queue will
        // grow, but to avoid an O(n) walk for every task we execute, we don't
        // shift tasks off the queue after they have been executed.
        // Instead, we periodically shift 1024 tasks off the queue.
        if (index > capacity) {
            // Manually shift all values starting at the index back to the
            // beginning of the queue.
            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
                queue[scan] = queue[scan + index];
            }
            queue.length -= index;
            index = 0;
        }
    }
    queue.length = 0;
    index = 0;
    flushing = false;
}

// `requestFlush` is implemented using a strategy based on data collected from
// every available SauceLabs Selenium web driver worker at time of writing.
// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
// have WebKitMutationObserver but not un-prefixed MutationObserver.
// Must use `global` or `self` instead of `window` to work in both frames and web
// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.

/* globals self */
var scope = typeof global !== "undefined" ? global : self;
var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;

// MutationObservers are desirable because they have high priority and work
// reliably everywhere they are implemented.
// They are implemented in all modern browsers.
//
// - Android 4-4.3
// - Chrome 26-34
// - Firefox 14-29
// - Internet Explorer 11
// - iPad Safari 6-7.1
// - iPhone Safari 7-7.1
// - Safari 6-7
if (typeof BrowserMutationObserver === "function") {
    requestFlush = makeRequestCallFromMutationObserver(flush);

// MessageChannels are desirable because they give direct access to the HTML
// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
// 11-12, and in web workers in many engines.
// Although message channels yield to any queued rendering and IO tasks, they
// would be better than imposing the 4ms delay of timers.
// However, they do not work reliably in Internet Explorer or Safari.

// Internet Explorer 10 is the only browser that has setImmediate but does
// not have MutationObservers.
// Although setImmediate yields to the browser's renderer, it would be
// preferrable to falling back to setTimeout since it does not have
// the minimum 4ms penalty.
// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
// Desktop to a lesser extent) that renders both setImmediate and
// MessageChannel useless for the purposes of ASAP.
// https://github.com/kriskowal/q/issues/396

// Timers are implemented universally.
// We fall back to timers in workers in most engines, and in foreground
// contexts in the following browsers.
// However, note that even this simple case requires nuances to operate in a
// broad spectrum of browsers.
//
// - Firefox 3-13
// - Internet Explorer 6-9
// - iPad Safari 4.3
// - Lynx 2.8.7
} else {
    requestFlush = makeRequestCallFromTimer(flush);
}

// `requestFlush` requests that the high priority event queue be flushed as
// soon as possible.
// This is useful to prevent an error thrown in a task from stalling the event
// queue if the exception handled by Node.jsâ€™s
// `process.on("uncaughtException")` or by a domain.
rawAsap.requestFlush = requestFlush;

// To request a high priority event, we induce a mutation observer by toggling
// the text of a text node between "1" and "-1".
function makeRequestCallFromMutationObserver(callback) {
    var toggle = 1;
    var observer = new BrowserMutationObserver(callback);
    var node = document.createTextNode("");
    observer.observe(node, {characterData: true});
    return function requestCall() {
        toggle = -toggle;
        node.data = toggle;
    };
}

// The message channel technique was discovered by Malte Ubl and was the
// original foundation for this library.
// http://www.nonblocking.io/2011/06/windownexttick.html

// Safari 6.0.5 (at least) intermittently fails to create message ports on a
// page's first load. Thankfully, this version of Safari supports
// MutationObservers, so we don't need to fall back in that case.

// function makeRequestCallFromMessageChannel(callback) {
//     var channel = new MessageChannel();
//     channel.port1.onmessage = callback;
//     return function requestCall() {
//         channel.port2.postMessage(0);
//     };
// }

// For reasons explained above, we are also unable to use `setImmediate`
// under any circumstances.
// Even if we were, there is another bug in Internet Explorer 10.
// It is not sufficient to assign `setImmediate` to `requestFlush` because
// `setImmediate` must be called *by name* and therefore must be wrapped in a
// closure.
// Never forget.

// function makeRequestCallFromSetImmediate(callback) {
//     return function requestCall() {
//         setImmediate(callback);
//     };
// }

// Safari 6.0 has a problem where timers will get lost while the user is
// scrolling. This problem does not impact ASAP because Safari 6.0 supports
// mutation observers, so that implementation is used instead.
// However, if we ever elect to use timers in Safari, the prevalent work-around
// is to add a scroll event listener that calls for a flush.

// `setTimeout` does not call the passed callback if the delay is less than
// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
// even then.

function makeRequestCallFromTimer(callback) {
    return function requestCall() {
        // We dispatch a timeout with a specified delay of 0 for engines that
        // can reliably accommodate that request. This will usually be snapped
        // to a 4 milisecond delay, but once we're flushing, there's no delay
        // between events.
        var timeoutHandle = setTimeout(handleTimer, 0);
        // However, since this timer gets frequently dropped in Firefox
        // workers, we enlist an interval handle that will try to fire
        // an event 20 times per second until it succeeds.
        var intervalHandle = setInterval(handleTimer, 50);

        function handleTimer() {
            // Whichever timer succeeds will cancel both timers and
            // execute the callback.
            clearTimeout(timeoutHandle);
            clearInterval(intervalHandle);
            callback();
        }
    };
}

// This is for `asap.js` only.
// Its name will be periodically randomized to break any code that depends on
// its existence.
rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;

// ASAP was originally a nextTick shim included in Q. This was factored out
// into this ASAP package. It was later adapted to RSVP which made further
// amendments. These decisions, particularly to marginalize MessageChannel and
// to capture the MutationObserver implementation in a closure, were integrated
// back into ASAP proper.
// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],3:[function(require,module,exports){
/**
 * EvEmitter v1.1.0
 * Lil' event emitter
 * MIT License
 */

/* jshint unused: true, undef: true, strict: true */

( function( global, factory ) {
  // universal module definition
  /* jshint strict: false */ /* globals define, module, window */
  if ( typeof define == 'function' && define.amd ) {
    // AMD - RequireJS
    define( factory );
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS - Browserify, Webpack
    module.exports = factory();
  } else {
    // Browser globals
    global.EvEmitter = factory();
  }

}( typeof window != 'undefined' ? window : this, function() {

"use strict";

function EvEmitter() {}

var proto = EvEmitter.prototype;

proto.on = function( eventName, listener ) {
  if ( !eventName || !listener ) {
    return;
  }
  // set events hash
  var events = this._events = this._events || {};
  // set listeners array
  var listeners = events[ eventName ] = events[ eventName ] || [];
  // only add once
  if ( listeners.indexOf( listener ) == -1 ) {
    listeners.push( listener );
  }

  return this;
};

proto.once = function( eventName, listener ) {
  if ( !eventName || !listener ) {
    return;
  }
  // add event
  this.on( eventName, listener );
  // set once flag
  // set onceEvents hash
  var onceEvents = this._onceEvents = this._onceEvents || {};
  // set onceListeners object
  var onceListeners = onceEvents[ eventName ] = onceEvents[ eventName ] || {};
  // set flag
  onceListeners[ listener ] = true;

  return this;
};

proto.off = function( eventName, listener ) {
  var listeners = this._events && this._events[ eventName ];
  if ( !listeners || !listeners.length ) {
    return;
  }
  var index = listeners.indexOf( listener );
  if ( index != -1 ) {
    listeners.splice( index, 1 );
  }

  return this;
};

proto.emitEvent = function( eventName, args ) {
  var listeners = this._events && this._events[ eventName ];
  if ( !listeners || !listeners.length ) {
    return;
  }
  // copy over to avoid interference if .off() in listener
  listeners = listeners.slice(0);
  args = args || [];
  // once stuff
  var onceListeners = this._onceEvents && this._onceEvents[ eventName ];

  for ( var i=0; i < listeners.length; i++ ) {
    var listener = listeners[i]
    var isOnce = onceListeners && onceListeners[ listener ];
    if ( isOnce ) {
      // remove listener
      // remove before trigger to prevent recursion
      this.off( eventName, listener );
      // unset once flag
      delete onceListeners[ listener ];
    }
    // trigger listener
    listener.apply( this, args );
  }

  return this;
};

proto.allOff = function() {
  delete this._events;
  delete this._onceEvents;
};

return EvEmitter;

}));

},{}],4:[function(require,module,exports){
/*!
 * imagesLoaded v4.1.3
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */

( function( window, factory ) { 'use strict';
  // universal module definition

  /*global define: false, module: false, require: false */

  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( [
      'ev-emitter/ev-emitter'
    ], function( EvEmitter ) {
      return factory( window, EvEmitter );
    });
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      window,
      require('ev-emitter')
    );
  } else {
    // browser global
    window.imagesLoaded = factory(
      window,
      window.EvEmitter
    );
  }

})( typeof window !== 'undefined' ? window : this,

// --------------------------  factory -------------------------- //

function factory( window, EvEmitter ) {

'use strict';

var $ = window.jQuery;
var console = window.console;

// -------------------------- helpers -------------------------- //

// extend objects
function extend( a, b ) {
  for ( var prop in b ) {
    a[ prop ] = b[ prop ];
  }
  return a;
}

// turn element or nodeList into an array
function makeArray( obj ) {
  var ary = [];
  if ( Array.isArray( obj ) ) {
    // use object if already an array
    ary = obj;
  } else if ( typeof obj.length == 'number' ) {
    // convert nodeList to array
    for ( var i=0; i < obj.length; i++ ) {
      ary.push( obj[i] );
    }
  } else {
    // array of single index
    ary.push( obj );
  }
  return ary;
}

// -------------------------- imagesLoaded -------------------------- //

/**
 * @param {Array, Element, NodeList, String} elem
 * @param {Object or Function} options - if function, use as callback
 * @param {Function} onAlways - callback function
 */
function ImagesLoaded( elem, options, onAlways ) {
  // coerce ImagesLoaded() without new, to be new ImagesLoaded()
  if ( !( this instanceof ImagesLoaded ) ) {
    return new ImagesLoaded( elem, options, onAlways );
  }
  // use elem as selector string
  if ( typeof elem == 'string' ) {
    elem = document.querySelectorAll( elem );
  }

  this.elements = makeArray( elem );
  this.options = extend( {}, this.options );

  if ( typeof options == 'function' ) {
    onAlways = options;
  } else {
    extend( this.options, options );
  }

  if ( onAlways ) {
    this.on( 'always', onAlways );
  }

  this.getImages();

  if ( $ ) {
    // add jQuery Deferred object
    this.jqDeferred = new $.Deferred();
  }

  // HACK check async to allow time to bind listeners
  setTimeout( function() {
    this.check();
  }.bind( this ));
}

ImagesLoaded.prototype = Object.create( EvEmitter.prototype );

ImagesLoaded.prototype.options = {};

ImagesLoaded.prototype.getImages = function() {
  this.images = [];

  // filter & find items if we have an item selector
  this.elements.forEach( this.addElementImages, this );
};

/**
 * @param {Node} element
 */
ImagesLoaded.prototype.addElementImages = function( elem ) {
  // filter siblings
  if ( elem.nodeName == 'IMG' ) {
    this.addImage( elem );
  }
  // get background image on element
  if ( this.options.background === true ) {
    this.addElementBackgroundImages( elem );
  }

  // find children
  // no non-element nodes, #143
  var nodeType = elem.nodeType;
  if ( !nodeType || !elementNodeTypes[ nodeType ] ) {
    return;
  }
  var childImgs = elem.querySelectorAll('img');
  // concat childElems to filterFound array
  for ( var i=0; i < childImgs.length; i++ ) {
    var img = childImgs[i];
    this.addImage( img );
  }

  // get child background images
  if ( typeof this.options.background == 'string' ) {
    var children = elem.querySelectorAll( this.options.background );
    for ( i=0; i < children.length; i++ ) {
      var child = children[i];
      this.addElementBackgroundImages( child );
    }
  }
};

var elementNodeTypes = {
  1: true,
  9: true,
  11: true
};

ImagesLoaded.prototype.addElementBackgroundImages = function( elem ) {
  var style = getComputedStyle( elem );
  if ( !style ) {
    // Firefox returns null if in a hidden iframe https://bugzil.la/548397
    return;
  }
  // get url inside url("...")
  var reURL = /url\((['"])?(.*?)\1\)/gi;
  var matches = reURL.exec( style.backgroundImage );
  while ( matches !== null ) {
    var url = matches && matches[2];
    if ( url ) {
      this.addBackground( url, elem );
    }
    matches = reURL.exec( style.backgroundImage );
  }
};

/**
 * @param {Image} img
 */
ImagesLoaded.prototype.addImage = function( img ) {
  var loadingImage = new LoadingImage( img );
  this.images.push( loadingImage );
};

ImagesLoaded.prototype.addBackground = function( url, elem ) {
  var background = new Background( url, elem );
  this.images.push( background );
};

ImagesLoaded.prototype.check = function() {
  var _this = this;
  this.progressedCount = 0;
  this.hasAnyBroken = false;
  // complete if no images
  if ( !this.images.length ) {
    this.complete();
    return;
  }

  function onProgress( image, elem, message ) {
    // HACK - Chrome triggers event before object properties have changed. #83
    setTimeout( function() {
      _this.progress( image, elem, message );
    });
  }

  this.images.forEach( function( loadingImage ) {
    loadingImage.once( 'progress', onProgress );
    loadingImage.check();
  });
};

ImagesLoaded.prototype.progress = function( image, elem, message ) {
  this.progressedCount++;
  this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;
  // progress event
  this.emitEvent( 'progress', [ this, image, elem ] );
  if ( this.jqDeferred && this.jqDeferred.notify ) {
    this.jqDeferred.notify( this, image );
  }
  // check if completed
  if ( this.progressedCount == this.images.length ) {
    this.complete();
  }

  if ( this.options.debug && console ) {
    console.log( 'progress: ' + message, image, elem );
  }
};

ImagesLoaded.prototype.complete = function() {
  var eventName = this.hasAnyBroken ? 'fail' : 'done';
  this.isComplete = true;
  this.emitEvent( eventName, [ this ] );
  this.emitEvent( 'always', [ this ] );
  if ( this.jqDeferred ) {
    var jqMethod = this.hasAnyBroken ? 'reject' : 'resolve';
    this.jqDeferred[ jqMethod ]( this );
  }
};

// --------------------------  -------------------------- //

function LoadingImage( img ) {
  this.img = img;
}

LoadingImage.prototype = Object.create( EvEmitter.prototype );

LoadingImage.prototype.check = function() {
  // If complete is true and browser supports natural sizes,
  // try to check for image status manually.
  var isComplete = this.getIsImageComplete();
  if ( isComplete ) {
    // report based on naturalWidth
    this.confirm( this.img.naturalWidth !== 0, 'naturalWidth' );
    return;
  }

  // If none of the checks above matched, simulate loading on detached element.
  this.proxyImage = new Image();
  this.proxyImage.addEventListener( 'load', this );
  this.proxyImage.addEventListener( 'error', this );
  // bind to image as well for Firefox. #191
  this.img.addEventListener( 'load', this );
  this.img.addEventListener( 'error', this );
  this.proxyImage.src = this.img.src;
};

LoadingImage.prototype.getIsImageComplete = function() {
  return this.img.complete && this.img.naturalWidth !== undefined;
};

LoadingImage.prototype.confirm = function( isLoaded, message ) {
  this.isLoaded = isLoaded;
  this.emitEvent( 'progress', [ this, this.img, message ] );
};

// ----- events ----- //

// trigger specified handler for event type
LoadingImage.prototype.handleEvent = function( event ) {
  var method = 'on' + event.type;
  if ( this[ method ] ) {
    this[ method ]( event );
  }
};

LoadingImage.prototype.onload = function() {
  this.confirm( true, 'onload' );
  this.unbindEvents();
};

LoadingImage.prototype.onerror = function() {
  this.confirm( false, 'onerror' );
  this.unbindEvents();
};

LoadingImage.prototype.unbindEvents = function() {
  this.proxyImage.removeEventListener( 'load', this );
  this.proxyImage.removeEventListener( 'error', this );
  this.img.removeEventListener( 'load', this );
  this.img.removeEventListener( 'error', this );
};

// -------------------------- Background -------------------------- //

function Background( url, element ) {
  this.url = url;
  this.element = element;
  this.img = new Image();
}

// inherit LoadingImage prototype
Background.prototype = Object.create( LoadingImage.prototype );

Background.prototype.check = function() {
  this.img.addEventListener( 'load', this );
  this.img.addEventListener( 'error', this );
  this.img.src = this.url;
  // check if image is already complete
  var isComplete = this.getIsImageComplete();
  if ( isComplete ) {
    this.confirm( this.img.naturalWidth !== 0, 'naturalWidth' );
    this.unbindEvents();
  }
};

Background.prototype.unbindEvents = function() {
  this.img.removeEventListener( 'load', this );
  this.img.removeEventListener( 'error', this );
};

Background.prototype.confirm = function( isLoaded, message ) {
  this.isLoaded = isLoaded;
  this.emitEvent( 'progress', [ this, this.element, message ] );
};

// -------------------------- jQuery -------------------------- //

ImagesLoaded.makeJQueryPlugin = function( jQuery ) {
  jQuery = jQuery || window.jQuery;
  if ( !jQuery ) {
    return;
  }
  // set local variable
  $ = jQuery;
  // $().imagesLoaded()
  $.fn.imagesLoaded = function( options, callback ) {
    var instance = new ImagesLoaded( this, options, callback );
    return instance.jqDeferred.promise( $(this) );
  };
};
// try making plugin
ImagesLoaded.makeJQueryPlugin();

// --------------------------  -------------------------- //

return ImagesLoaded;

});

},{"ev-emitter":3}],5:[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern -d -o ./index.js`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '3.10.1';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256;

  /** Used as default options for `_.trunc`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect when a function becomes hot. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

  /**
   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
   */
  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
      reHasRegExpChars = RegExp(reRegExpChars.source);

  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0[xX]/;

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^\d+$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to match words to create compound words. */
  var reWords = (function() {
    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
  }());

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[stringTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[mapTag] = cloneableTags[setTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled regexes. */
  var regexpEscapes = {
    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `compareAscending` which compares values and
   * sorts them in ascending order without guaranteeing a stable sort.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function baseCompareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;

      if ((value > other && !othIsNull) || !valIsReflexive ||
          (valIsNull && !othIsUndef && othIsReflexive) ||
          (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive ||
          (othIsNull && !valIsUndef && valIsReflexive) ||
          (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isFunction` without support for environments
   * with incorrect `typeof` results.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   */
  function baseIsFunction(value) {
    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
    return typeof value == 'function' || false;
  }

  /**
   * Converts `value` to a string if it's not one. An empty string is returned
   * for `null` or `undefined` values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    return value == null ? '' : (value + '');
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the first character not found in `chars`.
   */
  function charsLeftIndex(string, chars) {
    var index = -1,
        length = string.length;

    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the last character not found in `chars`.
   */
  function charsRightIndex(string, chars) {
    var index = string.length;

    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.sortBy` to compare transformed elements of a collection and stable
   * sort them in ascending order.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareAscending(object, other) {
    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
  }

  /**
   * Used by `_.sortByOrder` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
   * a value is sorted in ascending order if its corresponding order is "asc", and
   * descending if "desc".
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * ((order === 'asc' || order === true) ? 1 : -1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @param {string} leadingChar The capture group for a leading character.
   * @param {string} whitespaceChar The capture group for a whitespace character.
   * @returns {string} Returns the escaped character.
   */
  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
    if (leadingChar) {
      chr = regexpEscapes[chr];
    } else if (whitespaceChar) {
      chr = stringEscapes[chr];
    }
    return '\\' + chr;
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is object-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
   * character code is whitespace.
   *
   * @private
   * @param {number} charCode The character code to inspect.
   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
   */
  function isSpace(charCode) {
    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      if (array[index] === placeholder) {
        array[index] = PLACEHOLDER;
        result[++resIndex] = index;
      }
    }
    return result;
  }

  /**
   * An implementation of `_.uniq` optimized for sorted arrays without support
   * for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate-value-free array.
   */
  function sortedUniq(array, iteratee) {
    var seen,
        index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;

      if (!index || seen !== computed) {
        seen = computed;
        result[++resIndex] = value;
      }
    }
    return result;
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the first non-whitespace character.
   */
  function trimmedLeftIndex(string) {
    var index = -1,
        length = string.length;

    while (++index < length && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedRightIndex(string) {
    var index = string.length;

    while (index-- && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the given `context` object.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // using `context` to mock `Date#getTime` use in `_.now`
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // or creating a suped-up `defer` in Node.js
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See https://es5.github.io/#x11.1.5 for more details.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for native method references. */
    var arrayProto = Array.prototype,
        objectProto = Object.prototype,
        stringProto = String.prototype;

    /** Used to resolve the decompiled source of functions. */
    var fnToString = Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Native method references. */
    var ArrayBuffer = context.ArrayBuffer,
        clearTimeout = context.clearTimeout,
        parseFloat = context.parseFloat,
        pow = Math.pow,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        Set = getNative(context, 'Set'),
        setTimeout = context.setTimeout,
        splice = arrayProto.splice,
        Uint8Array = context.Uint8Array,
        WeakMap = getNative(context, 'WeakMap');

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeCreate = getNative(Object, 'create'),
        nativeFloor = Math.floor,
        nativeIsArray = getNative(Array, 'isArray'),
        nativeIsFinite = context.isFinite,
        nativeKeys = getNative(Object, 'keys'),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = getNative(Date, 'now'),
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used as references for `-Infinity` and `Infinity`. */
    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /**
     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
     * of an array-like value.
     */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
     * Methods that operate on and return arrays, collections, and functions can
     * be chained together. Methods that retrieve a single value or may return a
     * primitive value will automatically end the chain returning the unwrapped
     * value. Explicit chaining may be enabled using `_.chain`. The execution of
     * chained methods is lazy, that is, execution is deferred until `_#value`
     * is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization strategy which merge iteratee calls; this can help
     * to avoid the creation of intermediate data structures and greatly reduce the
     * number of iteratee executions.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
     * `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
     * and `where`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
     * `unescape`, `uniqueId`, `value`, and `words`
     *
     * The wrapper method `sample` will return a wrapped value when `n` is provided,
     * otherwise an unwrapped value is returned.
     *
     * @name _
     * @constructor
     * @category Chain
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(total, n) {
     *   return total + n;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(n) {
     *   return n * n;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
     */
    function LodashWrapper(value, chainAll, actions) {
      this.__wrapped__ = value;
      this.__actions__ = actions || [];
      this.__chain__ = !!chainAll;
    }

    /**
     * An object environment feature flags.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = POSITIVE_INFINITY;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = arrayCopy(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = arrayCopy(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = arrayCopy(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a cache object to store key/value pairs.
     *
     * @private
     * @static
     * @name Cache
     * @memberOf _.memoize
     */
    function MapCache() {
      this.__data__ = {};
    }

    /**
     * Removes `key` and its value from the cache.
     *
     * @private
     * @name delete
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
     */
    function mapDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the cached value for `key`.
     *
     * @private
     * @name get
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the cached value.
     */
    function mapGet(key) {
      return key == '__proto__' ? undefined : this.__data__[key];
    }

    /**
     * Checks if a cached value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
    }

    /**
     * Sets `value` to `key` of the cache.
     *
     * @private
     * @name set
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to cache.
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache object.
     */
    function mapSet(key, value) {
      if (key != '__proto__') {
        this.__data__[key] = value;
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var length = values ? values.length : 0;

      this.data = { 'hash': nativeCreate(null), 'set': new Set };
      while (length--) {
        this.push(values[length]);
      }
    }

    /**
     * Checks if `value` is in `cache` mimicking the return signature of
     * `_.indexOf` by returning `0` if the value is found, else `-1`.
     *
     * @private
     * @param {Object} cache The cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `0` if `value` is found, else `-1`.
     */
    function cacheIndexOf(cache, value) {
      var data = cache.data,
          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

      return result ? 0 : -1;
    }

    /**
     * Adds `value` to the cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var data = this.data;
      if (typeof value == 'string' || isObject(value)) {
        data.set.add(value);
      } else {
        data.hash[value] = true;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a new array joining `array` with `other`.
     *
     * @private
     * @param {Array} array The array to join.
     * @param {Array} other The other array to join.
     * @returns {Array} Returns the new concatenated array.
     */
    function arrayConcat(array, other) {
      var index = -1,
          length = array.length,
          othIndex = -1,
          othLength = other.length,
          result = Array(length + othLength);

      while (++index < length) {
        result[index] = array[index];
      }
      while (++othIndex < othLength) {
        result[index++] = other[othIndex];
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function arrayCopy(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
     * with one argument: (value).
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function arrayExtremum(array, iteratee, comparator, exValue) {
      var index = -1,
          length = array.length,
          computed = exValue,
          result = computed;

      while (++index < length) {
        var value = array[index],
            current = +iteratee(value);

        if (comparator(current, computed)) {
          computed = current;
          result = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.map` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the first element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initFromArray) {
      var index = -1,
          length = array.length;

      if (initFromArray && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the last element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
      var length = array.length;
      if (initFromArray && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * A specialized version of `_.sum` for arrays without support for callback
     * shorthands and `this` binding..
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function arraySum(array, iteratee) {
      var length = array.length,
          result = 0;

      while (length--) {
        result += +iteratee(array[length]) || 0;
      }
      return result;
    }

    /**
     * Used by `_.defaults` to customize its `_.assign` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignDefaults(objectValue, sourceValue) {
      return objectValue === undefined ? sourceValue : objectValue;
    }

    /**
     * Used by `_.template` to customize its `_.assign` use.
     *
     * **Note:** This function is like `assignDefaults` except that it ignores
     * inherited property values when checking if a property is `undefined`.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @param {string} key The key associated with the object and source values.
     * @param {Object} object The destination object.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignOwnDefaults(objectValue, sourceValue, key, object) {
      return (objectValue === undefined || !hasOwnProperty.call(object, key))
        ? sourceValue
        : objectValue;
    }

    /**
     * A specialized version of `_.assign` for customizing assigned values without
     * support for argument juggling, multiple sources, and `this` binding `customizer`
     * functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     */
    function assignWith(object, source, customizer) {
      var index = -1,
          props = keys(source),
          length = props.length;

      while (++index < length) {
        var key = props[index],
            value = object[key],
            result = customizer(value, source[key], key, object, source);

        if ((result === result ? (result !== value) : (value === value)) ||
            (value === undefined && !(key in object))) {
          object[key] = result;
        }
      }
      return object;
    }

    /**
     * The base implementation of `_.assign` without support for argument juggling,
     * multiple sources, and `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return source == null
        ? object
        : baseCopy(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for string collections
     * and individual key arguments.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {number[]|string[]} props The property names or indexes of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(collection, props) {
      var index = -1,
          isNil = collection == null,
          isArr = !isNil && isArrayLike(collection),
          length = isArr ? collection.length : 0,
          propsLength = props.length,
          result = Array(propsLength);

      while(++index < propsLength) {
        var key = props[index];
        if (isArr) {
          result[index] = isIndex(key, length) ? collection[key] : undefined;
        } else {
          result[index] = isNil ? undefined : collection[key];
        }
      }
      return result;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
    function baseCopy(source, props, object) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];
        object[key] = source[key];
      }
      return object;
    }

    /**
     * The base implementation of `_.callback` which supports specifying the
     * number of arguments to provide to `func`.
     *
     * @private
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function baseCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (type == 'function') {
        return thisArg === undefined
          ? func
          : bindCallback(func, thisArg, argCount);
      }
      if (func == null) {
        return identity;
      }
      if (type == 'object') {
        return baseMatches(func);
      }
      return thisArg === undefined
        ? property(func)
        : baseMatchesProperty(func, thisArg);
    }

    /**
     * The base implementation of `_.clone` without support for argument juggling
     * and `this` binding `customizer` functions.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The object `value` belongs to.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return arrayCopy(value, result);
        }
      } else {
        var tag = objToString.call(value),
            isFunc = tag == funcTag;

        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return baseAssign(result, value);
          }
        } else {
          return cloneableTags[tag]
            ? initCloneByTag(value, tag, isDeep)
            : (object ? value : {});
        }
      }
      // Check for circular references and return its corresponding clone.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == value) {
          return stackB[length];
        }
      }
      // Add the source value to the stack of traversed objects and associate it with its clone.
      stackA.push(value);
      stackB.push(result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
      });
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(prototype) {
        if (isObject(prototype)) {
          object.prototype = prototype;
          var result = new object;
          object.prototype = undefined;
        }
        return result || {};
      };
    }());

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an index
     * of where to slice the arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of `_.difference` which accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values) {
      var length = array ? array.length : 0,
          result = [];

      if (!length) {
        return result;
      }
      var index = -1,
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
          valuesLength = values.length;

      if (cache) {
        indexOf = cacheIndexOf;
        isCommon = false;
        values = cache;
      }
      outer:
      while (++index < length) {
        var value = array[index];

        if (isCommon && value === value) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === value) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (indexOf(values, value, 0) < 0) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * Gets the extremum value of `collection` invoking `iteratee` for each value
     * in `collection` to generate the criterion by which the value is ranked.
     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(collection, iteratee, comparator, exValue) {
      var computed = exValue,
          result = computed;

      baseEach(collection, function(value, index, collection) {
        var current = +iteratee(value, index, collection);
        if (comparator(current, computed) || (current === exValue && current === result)) {
          computed = current;
          result = value;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : (end >>> 0);
      start >>>= 0;

      while (start < length) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
     * without support for callback shorthands and `this` binding, which iterates
     * over `collection` using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @param {boolean} [retKey] Specify returning the key of the found element
     *  instead of the element itself.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFind(collection, predicate, eachFunc, retKey) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = retKey ? key : value;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with added support for restricting
     * flattening and specifying the start index.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, isDeep, isStrict, result) {
      result || (result = []);

      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index];
        if (isObjectLike(value) && isArrayLike(value) &&
            (isStrict || isArray(value) || isArguments(value))) {
          if (isDeep) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, isDeep, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forIn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from those provided.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      var index = -1,
          length = props.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var key = props[index];
        if (isFunction(object[key])) {
          result[++resIndex] = key;
        }
      }
      return result;
    }

    /**
     * The base implementation of `get` without support for string paths
     * and default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path of the property to get.
     * @param {string} [pathKey] The key representation of path.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path, pathKey) {
      if (object == null) {
        return;
      }
      if (pathKey !== undefined && pathKey in toObject(object)) {
        path = [pathKey];
      }
      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[path[index++]];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `_.isEqual` without support for `this` binding
     * `customizer` functions.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = objToString.call(object);
        if (objTag == argsTag) {
          objTag = objectTag;
        } else if (objTag != objectTag) {
          objIsArr = isTypedArray(object);
        }
      }
      if (!othIsArr) {
        othTag = objToString.call(other);
        if (othTag == argsTag) {
          othTag = objectTag;
        } else if (othTag != objectTag) {
          othIsArr = isTypedArray(other);
        }
      }
      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && !(objIsArr || objIsObj)) {
        return equalByTag(object, other, objTag);
      }
      if (!isLoose) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
        }
      }
      if (!isSameTag) {
        return false;
      }
      // Assume cyclic values are equal.
      // For more information on detecting circular references see https://es5.github.io/#JO.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == object) {
          return stackB[length] == other;
        }
      }
      // Add `object` and `other` to the stack of traversed objects.
      stackA.push(object);
      stackB.push(other);

      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

      stackA.pop();
      stackB.pop();

      return result;
    }

    /**
     * The base implementation of `_.isMatch` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} matchData The propery names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = toObject(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.map` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which does not clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        var key = matchData[0][0],
            value = matchData[0][1];

        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === value && (value !== undefined || (key in toObject(object)));
        };
      }
      return function(object) {
        return baseIsMatch(object, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to compare.
     * @returns {Function} Returns the new function.
     */
    function baseMatchesProperty(path, srcValue) {
      var isArr = isArray(path),
          isCommon = isKey(path) && isStrictComparable(srcValue),
          pathKey = (path + '');

      path = toPath(path);
      return function(object) {
        if (object == null) {
          return false;
        }
        var key = pathKey;
        object = toObject(object);
        if ((isArr || !isCommon) && !(key in object)) {
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          if (object == null) {
            return false;
          }
          key = last(path);
          object = toObject(object);
        }
        return object[key] === srcValue
          ? (srcValue !== undefined || (key in object))
          : baseIsEqual(srcValue, object[key], undefined, true);
      };
    }

    /**
     * The base implementation of `_.merge` without support for argument juggling,
     * multiple sources, and `this` binding `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {Object} Returns `object`.
     */
    function baseMerge(object, source, customizer, stackA, stackB) {
      if (!isObject(object)) {
        return object;
      }
      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
          props = isSrcArr ? undefined : keys(source);

      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObjectLike(srcValue)) {
          stackA || (stackA = []);
          stackB || (stackB = []);
          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
        }
        else {
          var value = object[key],
              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
              isCommon = result === undefined;

          if (isCommon) {
            result = srcValue;
          }
          if ((result !== undefined || (isSrcArr && !(key in object))) &&
              (isCommon || (result === result ? (result !== value) : (value === value)))) {
            object[key] = result;
          }
        }
      });
      return object;
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
      var length = stackA.length,
          srcValue = source[key];

      while (length--) {
        if (stackA[length] == srcValue) {
          object[key] = stackB[length];
          return;
        }
      }
      var value = object[key],
          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
          isCommon = result === undefined;

      if (isCommon) {
        result = srcValue;
        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
          result = isArray(value)
            ? value
            : (isArrayLike(value) ? arrayCopy(value) : []);
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          result = isArguments(value)
            ? toPlainObject(value)
            : (isPlainObject(value) ? value : {});
        }
        else {
          isCommon = false;
        }
      }
      // Add the source value to the stack of traversed objects and associate
      // it with its merged value.
      stackA.push(srcValue);
      stackB.push(result);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
      } else if (result === result ? (result !== value) : (value === value)) {
        object[key] = result;
      }
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
    function basePropertyDeep(path) {
      var pathKey = (path + '');
      path = toPath(path);
      return function(object) {
        return baseGet(object, path, pathKey);
      };
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * index arguments and capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0;
      while (length--) {
        var index = indexes[length];
        if (index != previous && isIndex(index)) {
          var previous = index;
          splice.call(array, index, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for argument juggling
     * and returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns the random number.
     */
    function baseRandom(min, max) {
      return min + nativeFloor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight` without support
     * for callback shorthands and `this` binding, which iterates over `collection`
     * using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initFromCollection Specify using the first or last element
     *  of `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initFromCollection
          ? (initFromCollection = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define
     * the sort order of `array` and replaces criteria objects with their
     * corresponding values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * The base implementation of `_.sortByOrder` without param guards.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseSortByOrder(collection, iteratees, orders) {
      var callback = getCallback(),
          index = -1;

      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

      var result = baseMap(collection, function(value) {
        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.sum` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(collection, iteratee) {
      var result = 0;
      baseEach(collection, function(value, index, collection) {
        result += +iteratee(value, index, collection) || 0;
      });
      return result;
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The function invoked per iteration.
     * @returns {Array} Returns the new duplicate-value-free array.
     */
    function baseUniq(array, iteratee) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array.length,
          isCommon = indexOf == baseIndexOf,
          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
          seen = isLarge ? createCache() : null,
          result = [];

      if (seen) {
        indexOf = cacheIndexOf;
        isCommon = false;
      } else {
        isLarge = false;
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value, index, array) : value;

        if (isCommon && value === value) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (indexOf(seen, computed, 0) < 0) {
          if (iteratee || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      var index = -1,
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /**
     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
     * and `_.takeWhile` without support for callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to peform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      var index = -1,
          length = actions.length;

      while (++index < length) {
        var action = actions[index];
        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
      }
      return result;
    }

    /**
     * Performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return binaryIndexBy(array, value, identity, retHighest);
    }

    /**
     * This function is like `binaryIndex` except that it invokes `iteratee` for
     * `value` and each element of `array` to compute their sort ranking. The
     * iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsUndef = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            isDef = computed !== undefined,
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsNull) {
          setLow = isReflexive && isDef && (retHighest || computed != null);
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || isDef);
        } else if (computed == null) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * A specialized version of `baseCallback` which only supports `this` binding
     * and specifying the number of arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function bindCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      if (thisArg === undefined) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
        case 5: return function(value, other, key, object, source) {
          return func.call(thisArg, value, other, key, object, source);
        };
      }
      return function() {
        return func.apply(thisArg, arguments);
      };
    }

    /**
     * Creates a clone of the given array buffer.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function bufferClone(buffer) {
      var result = new ArrayBuffer(buffer.byteLength),
          view = new Uint8Array(result);

      view.set(new Uint8Array(buffer));
      return result;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders) {
      var holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          leftIndex = -1,
          leftLength = partials.length,
          result = Array(leftLength + argsLength);

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
      while (argsLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders) {
      var holdersIndex = -1,
          holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          rightIndex = -1,
          rightLength = partials.length,
          result = Array(argsLength + rightLength);

      while (++argsIndex < argsLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        result[offset + holders[holdersIndex]] = args[argsIndex++];
      }
      return result;
    }

    /**
     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
     *
     * @private
     * @param {Function} setter The function to set keys and values of the accumulator object.
     * @param {Function} [initializer] The function to initialize the accumulator object.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee, thisArg) {
        var result = initializer ? initializer() : {};
        iteratee = getCallback(iteratee, thisArg, 3);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, iteratee(value, index, collection), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, iteratee(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return restParam(function(object, sources) {
        var index = -1,
            length = object == null ? 0 : sources.length,
            customizer = length > 2 ? sources[length - 2] : undefined,
            guard = length > 2 ? sources[2] : undefined,
            thisArg = length > 1 ? sources[length - 1] : undefined;

        if (typeof customizer == 'function') {
          customizer = bindCallback(customizer, thisArg, 5);
          length -= 2;
        } else {
          customizer = typeof thisArg == 'function' ? thisArg : undefined;
          length -= (customizer ? 1 : 0);
        }
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        var length = collection ? getLength(collection) : 0;
        if (!isLength(length)) {
          return eachFunc(collection, iteratee);
        }
        var index = fromRight ? length : -1,
            iterable = toObject(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var iterable = toObject(object),
            props = keysFunc(object),
            length = props.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length)) {
          var key = props[index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with the `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new bound function.
     */
    function createBindWrapper(func, thisArg) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(thisArg, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a `Set` cache object to optimize linear searches of large arrays.
     *
     * @private
     * @param {Array} [values] The values to cache.
     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
     */
    function createCache(values) {
      return (nativeCreate && Set) ? new SetCache(values) : null;
    }

    /**
     * Creates a function that produces compound words out of the words in a
     * given string.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        var index = -1,
            array = words(deburr(string)),
            length = array.length,
            result = '';

        while (++index < length) {
          result = callback(result, array[index], index);
        }
        return result;
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors.
        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a `_.curry` or `_.curryRight` function.
     *
     * @private
     * @param {boolean} flag The curry bit flag.
     * @returns {Function} Returns the new curry function.
     */
    function createCurry(flag) {
      function curryFunc(func, arity, guard) {
        if (guard && isIterateeCall(func, arity, guard)) {
          arity = undefined;
        }
        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryFunc.placeholder;
        return result;
      }
      return curryFunc;
    }

    /**
     * Creates a `_.defaults` or `_.defaultsDeep` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Function} Returns the new defaults function.
     */
    function createDefaults(assigner, customizer) {
      return restParam(function(args) {
        var object = args[0];
        if (object == null) {
          return object;
        }
        args.push(customizer);
        return assigner.apply(undefined, args);
      });
    }

    /**
     * Creates a `_.max` or `_.min` function.
     *
     * @private
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {Function} Returns the new extremum function.
     */
    function createExtremum(comparator, exValue) {
      return function(collection, iteratee, thisArg) {
        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
          iteratee = undefined;
        }
        iteratee = getCallback(iteratee, thisArg, 3);
        if (iteratee.length == 1) {
          collection = isArray(collection) ? collection : toIterable(collection);
          var result = arrayExtremum(collection, iteratee, comparator, exValue);
          if (!(collection.length && result === exValue)) {
            return result;
          }
        }
        return baseExtremum(collection, iteratee, comparator, exValue);
      };
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFind(eachFunc, fromRight) {
      return function(collection, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        if (isArray(collection)) {
          var index = baseFindIndex(collection, predicate, fromRight);
          return index > -1 ? collection[index] : undefined;
        }
        return baseFind(collection, predicate, eachFunc);
      };
    }

    /**
     * Creates a `_.findIndex` or `_.findLastIndex` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFindIndex(fromRight) {
      return function(array, predicate, thisArg) {
        if (!(array && array.length)) {
          return -1;
        }
        predicate = getCallback(predicate, thisArg, 3);
        return baseFindIndex(array, predicate, fromRight);
      };
    }

    /**
     * Creates a `_.findKey` or `_.findLastKey` function.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new find function.
     */
    function createFindKey(objectFunc) {
      return function(object, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        return baseFind(object, predicate, objectFunc, true);
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return function() {
        var wrapper,
            length = arguments.length,
            index = fromRight ? length : -1,
            leftIndex = 0,
            funcs = Array(length);

        while ((fromRight ? index-- : ++index < length)) {
          var func = funcs[leftIndex++] = arguments[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
            wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? -1 : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      };
    }

    /**
     * Creates a function for `_.forEach` or `_.forEachRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createForEach(arrayFunc, eachFunc) {
      return function(collection, iteratee, thisArg) {
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee)
          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
      };
    }

    /**
     * Creates a function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForIn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee, keysIn);
      };
    }

    /**
     * Creates a function for `_.forOwn` or `_.forOwnRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForOwn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee);
      };
    }

    /**
     * Creates a function for `_.mapKeys` or `_.mapValues`.
     *
     * @private
     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
     * @returns {Function} Returns the new map function.
     */
    function createObjectMapper(isMapKeys) {
      return function(object, iteratee, thisArg) {
        var result = {};
        iteratee = getCallback(iteratee, thisArg, 3);

        baseForOwn(object, function(value, key, object) {
          var mapped = iteratee(value, key, object);
          key = isMapKeys ? mapped : key;
          value = isMapKeys ? value : mapped;
          result[key] = value;
        });
        return result;
      };
    }

    /**
     * Creates a function for `_.padLeft` or `_.padRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify padding from the right.
     * @returns {Function} Returns the new pad function.
     */
    function createPadDir(fromRight) {
      return function(string, length, chars) {
        string = baseToString(string);
        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
      };
    }

    /**
     * Creates a `_.partial` or `_.partialRight` function.
     *
     * @private
     * @param {boolean} flag The partial bit flag.
     * @returns {Function} Returns the new partial function.
     */
    function createPartial(flag) {
      var partialFunc = restParam(function(func, partials) {
        var holders = replaceHolders(partials, partialFunc.placeholder);
        return createWrapper(func, flag, undefined, partials, holders);
      });
      return partialFunc;
    }

    /**
     * Creates a function for `_.reduce` or `_.reduceRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createReduce(arrayFunc, eachFunc) {
      return function(collection, iteratee, accumulator, thisArg) {
        var initFromArray = arguments.length < 3;
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with optional `this`
     * binding of, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurry = bitmask & CURRY_FLAG,
          isCurryBound = bitmask & CURRY_BOUND_FLAG,
          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
          Ctor = isBindKey ? undefined : createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it to other functions.
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (partials) {
          args = composeArgs(args, partials, holders);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight);
        }
        if (isCurry || isCurryRight) {
          var placeholder = wrapper.placeholder,
              argsHolders = replaceHolders(args, placeholder);

          length -= argsHolders.length;
          if (length < arity) {
            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
                newArity = nativeMax(arity - length, 0),
                newsHolders = isCurry ? argsHolders : undefined,
                newHoldersRight = isCurry ? undefined : argsHolders,
                newPartials = isCurry ? args : undefined,
                newPartialsRight = isCurry ? undefined : args;

            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

            if (!isCurryBound) {
              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
            }
            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
                result = createHybridWrapper.apply(undefined, newData);

            if (isLaziable(func)) {
              setData(result, newData);
            }
            result.placeholder = placeholder;
            return result;
          }
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        if (argPos) {
          args = reorder(args, argPos);
        }
        if (isAry && ary < args.length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(func);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates the padding required for `string` based on the given `length`.
     * The `chars` string is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the pad for `string`.
     */
    function createPadding(string, length, chars) {
      var strLength = string.length;
      length = +length;

      if (strLength >= length || !nativeIsFinite(length)) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars == null ? ' ' : (chars + '');
      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` and invokes it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to partially apply arguments to.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new bound function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it `func`.
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength);

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        precision = precision === undefined ? 0 : (+precision || 0);
        if (precision) {
          precision = pow(10, precision);
          return func(number * precision) / precision;
        }
        return func(number);
      };
    }

    /**
     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
     *
     * @private
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {Function} Returns the new index function.
     */
    function createSortedIndex(retHighest) {
      return function(array, value, iteratee, thisArg) {
        var callback = getCallback(iteratee);
        return (iteratee == null && callback === baseCallback)
          ? binaryIndex(array, value, retHighest)
          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      length -= (holders ? holders.length : 0);
      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func),
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
        bitmask = newData[1];
        arity = newData[9];
      }
      newData[9] = arity == null
        ? (isBindKey ? 0 : func.length)
        : (nativeMax(arity - length, 0) || 0);

      if (bitmask == BIND_FLAG) {
        var result = createBindWrapper(newData[0], newData[2]);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
        result = createPartialWrapper.apply(undefined, newData);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing arrays.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var index = -1,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
        return false;
      }
      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index],
            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

        if (result !== undefined) {
          if (result) {
            continue;
          }
          return false;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (isLoose) {
          if (!arraySome(other, function(othValue) {
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
              })) {
            return false;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag) {
      switch (tag) {
        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object)
            ? other != +other
            : object == +other;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == (other + '');
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isLoose) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var skipCtor = isLoose;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key],
            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

        // Recursively compare objects (susceptible to call stack limits).
        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
          return false;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (!skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Gets the appropriate "callback" function. If the `_.callback` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseCallback` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function} Returns the chosen function or its result.
     */
    function getCallback(func, thisArg, argCount) {
      var result = lodash.callback || callback;
      result = result === callback ? baseCallback : result;
      return argCount ? result(func, thisArg, argCount) : result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = func.name,
          array = realNames[result],
          length = array ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseIndexOf` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function|number} Returns the chosen function or its result.
     */
    function getIndexOf(collection, target, fromIndex) {
      var result = lodash.indexOf || indexOf;
      result = result === indexOf ? baseIndexOf : result;
      return collection ? result(collection, target, fromIndex) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * that affects Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the propery names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = pairs(object),
          length = result.length;

      while (length--) {
        result[length][2] = isStrictComparable(result[length][1]);
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = object == null ? undefined : object[key];
      return isNative(value) ? value : undefined;
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add array properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      var Ctor = object.constructor;
      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
        Ctor = Object;
      }
      return new Ctor;
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return bufferClone(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          var buffer = object.buffer;
          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          var result = new Ctor(object.source, reFlags.exec(object));
          result.lastIndex = object.lastIndex;
      }
      return result;
    }

    /**
     * Invokes the method at `path` on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function invokePath(object, path, args) {
      if (object != null && !isKey(path, object)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        path = last(path);
      }
      var func = object == null ? object : object[path];
      return func == null ? undefined : func.apply(object, args);
    }

    /**
     * Checks if `value` is array-like.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     */
    function isArrayLike(value) {
      return value != null && isLength(getLength(value));
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return value > -1 && value % 1 == 0 && value < length;
    }

    /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)) {
        var other = object[index];
        return value === value ? (value === other) : (other !== other);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      var type = typeof value;
      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
        return true;
      }
      if (isArray(value)) {
        return false;
      }
      var result = !reIsDeepProp.test(value);
      return result || (object != null && value in toObject(object));
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func);
      if (!(funcName in LazyWrapper.prototype)) {
        return false;
      }
      var other = lodash[funcName];
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers required to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * augment function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * common case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < ARY_FLAG;

      var isCombo =
        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = arrayCopy(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function mergeDefaults(objectValue, sourceValue) {
      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties specified
     * by `props`.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function pickByArray(object, props) {
      object = toObject(object);

      var index = -1,
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        if (key in object) {
          result[key] = object[key];
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties `predicate`
     * returns truthy for.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Object} Returns the new object.
     */
    function pickByCallback(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key, object) {
        if (predicate(value, key, object)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = arrayCopy(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * A fallback implementation of `Object.keys` which creates an array of the
     * own enumerable property names of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function shimKeys(object) {
      var props = keysIn(object),
          propsLength = props.length,
          length = propsLength && object.length;

      var allowIndexes = !!length && isLength(length) &&
        (isArray(object) || isArguments(object));

      var index = -1,
          result = [];

      while (++index < propsLength) {
        var key = props[index];
        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to an array-like object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array|Object} Returns the array-like object.
     */
    function toIterable(value) {
      if (value == null) {
        return [];
      }
      if (!isArrayLike(value)) {
        return values(value);
      }
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to an object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Object} Returns the object.
     */
    function toObject(value) {
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to property path array if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the property path array.
     */
    function toPath(value) {
      if (isArray(value)) {
        return value;
      }
      var result = [];
      baseToString(value).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      return wrapper instanceof LazyWrapper
        ? wrapper.clone()
        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `collection` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size == null) {
        size = 1;
      } else {
        size = nativeMax(nativeFloor(size) || 1, 1);
      }
      var index = 0,
          length = array ? array.length : 0,
          resIndex = -1,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[++resIndex] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * Creates an array of unique `array` values not included in the other
     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3], [4, 2]);
     * // => [1, 3]
     */
    var difference = restParam(function(array, values) {
      return (isObjectLike(array) && isArrayLike(array))
        ? baseDifference(array, baseFlatten(values, false, true))
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that match the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [1]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
     * // => ['barney']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropWhile(users, 'active', false), 'user');
     * // => ['pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8], '*', 1, 2);
     * // => [4, '*', 8]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(chr) {
     *   return chr.user == 'barney';
     * });
     * // => 0
     *
     * // using the `_.matches` callback shorthand
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findIndex(users, 'active', false);
     * // => 0
     *
     * // using the `_.property` callback shorthand
     * _.findIndex(users, 'active');
     * // => 2
     */
    var findIndex = createFindIndex();

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(chr) {
     *   return chr.user == 'pebbles';
     * });
     * // => 2
     *
     * // using the `_.matches` callback shorthand
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastIndex(users, 'active', false);
     * // => 2
     *
     * // using the `_.property` callback shorthand
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    var findLastIndex = createFindIndex(true);

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias head
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([]);
     * // => undefined
     */
    function first(array) {
      return array ? array[0] : undefined;
    }

    /**
     * Flattens a nested array. If `isDeep` is `true` the array is recursively
     * flattened, otherwise it is only flattened a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, 3, [4]]]);
     * // => [1, 2, 3, [4]]
     *
     * // using `isDeep`
     * _.flatten([1, [2, 3, [4]]], true);
     * // => [1, 2, 3, 4]
     */
    function flatten(array, isDeep, guard) {
      var length = array ? array.length : 0;
      if (guard && isIterateeCall(array, isDeep, guard)) {
        isDeep = false;
      }
      return length ? baseFlatten(array, isDeep) : [];
    }

    /**
     * Recursively flattens a nested array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, 3, [4]]]);
     * // => [1, 2, 3, 4]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, true) : [];
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
     * performs a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     *
     * // performing a binary search
     * _.indexOf([1, 1, 2, 2], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      if (typeof fromIndex == 'number') {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
      } else if (fromIndex) {
        var index = binaryIndex(array, value);
        if (index < length &&
            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
          return index;
        }
        return -1;
      }
      return baseIndexOf(array, value, fromIndex || 0);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all of the provided
     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of shared values.
     * @example
     * _.intersection([1, 2], [4, 2], [2, 1]);
     * // => [2]
     */
    var intersection = restParam(function(arrays) {
      var othLength = arrays.length,
          othIndex = othLength,
          caches = Array(length),
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          result = [];

      while (othIndex--) {
        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
      }
      var array = arrays[0],
          index = -1,
          length = array ? array.length : 0,
          seen = caches[0];

      outer:
      while (++index < length) {
        value = array[index];
        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
          var othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(value);
          }
          result.push(value);
        }
      }
      return result;
    });

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
     *  or `true` to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     *
     * // performing a binary search
     * _.lastIndexOf([1, 1, 2, 2], 2, true);
     * // => 3
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
      } else if (fromIndex) {
        index = binaryIndex(array, value, true) - 1;
        var other = array[index];
        if (value === value ? (value === other) : (other !== other)) {
          return index;
        }
        return -1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull() {
      var args = arguments,
          array = args[0];

      if (!(array && array.length)) {
        return array;
      }
      var index = 0,
          indexOf = getIndexOf(),
          length = args.length;

      while (++index < length) {
        var fromIndex = 0,
            value = args[index];

        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * Removes elements from `array` corresponding to the given indexes and returns
     * an array of the removed elements. Indexes may be specified as an array of
     * indexes or as individual arguments.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    var pullAt = restParam(function(array, indexes) {
      indexes = baseFlatten(indexes);

      var result = baseAt(array, indexes);
      basePullAt(array, indexes.sort(baseCompareAscending));
      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate, thisArg) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias tail
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     */
    function rest(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of `Array#slice` to support node
     * lists in IE < 9 and to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order. If an iteratee
     * function is provided it is invoked for `value` and each element of `array`
     * to compute their sort ranking. The iteratee is bound to `thisArg` and
     * invoked with one argument; (value).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 4, 5, 5], 5);
     * // => 2
     *
     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
     *
     * // using an iteratee function
     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
     *   return this.data[word];
     * }, dict);
     * // => 1
     *
     * // using the `_.property` callback shorthand
     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 1
     */
    var sortedIndex = createSortedIndex();

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 4, 5, 5], 5);
     * // => 4
     */
    var sortedLastIndex = createSortedIndex(true);

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
     * and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [2, 3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
     * // => []
     */
    function takeRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [1, 2]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeWhile(users, 'active', false), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeWhile(users, 'active'), 'user');
     * // => []
     */
    function takeWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all of the provided arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([1, 2], [4, 2], [2, 1]);
     * // => [1, 2, 4]
     */
    var union = restParam(function(arrays) {
      return baseUniq(baseFlatten(arrays, false, true));
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurence of each element
     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
     * for sorted arrays. If an iteratee function is provided it is invoked for
     * each element in the array to generate the criterion by which uniqueness
     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, array).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {boolean} [isSorted] Specify the array is sorted.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new duplicate-value-free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     *
     * // using `isSorted`
     * _.uniq([1, 1, 2], true);
     * // => [1, 2]
     *
     * // using an iteratee function
     * _.uniq([1, 2.5, 1.5, 2], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => [1, 2.5]
     *
     * // using the `_.property` callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (isSorted != null && typeof isSorted != 'boolean') {
        thisArg = iteratee;
        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
        isSorted = false;
      }
      var callback = getCallback();
      if (!(iteratee == null && callback === baseCallback)) {
        iteratee = callback(iteratee, thisArg, 3);
      }
      return (isSorted && getIndexOf() == baseIndexOf)
        ? sortedUniq(array, iteratee)
        : baseUniq(array, iteratee);
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var index = -1,
          length = 0;

      array = arrayFilter(array, function(group) {
        if (isArrayLike(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      var result = Array(length);
      while (++index < length) {
        result[index] = arrayMap(array, baseProperty(index));
      }
      return result;
    }

    /**
     * This method is like `_.unzip` except that it accepts an iteratee to specify
     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee] The function to combine regrouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      iteratee = bindCallback(iteratee, thisArg, 4);
      return arrayMap(result, function(group) {
        return arrayReduce(group, iteratee, undefined, true);
      });
    }

    /**
     * Creates an array excluding all provided values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    var without = restParam(function(array, values) {
      return isArrayLike(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([1, 2], [4, 2]);
     * // => [1, 4]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArrayLike(array)) {
          var result = result
            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
            : array;
        }
      }
      return result ? baseUniq(result) : [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    var zip = restParam(unzip);

    /**
     * The inverse of `_.pairs`; this method returns an object composed from arrays
     * of property names and values. Provide either a single two dimensional array,
     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
     * and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Array
     * @param {Array} props The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(props, values) {
      var index = -1,
          length = props ? props.length : 0,
          result = {};

      if (length && !values && !isArray(props[0])) {
        values = [];
      }
      while (++index < length) {
        var key = props[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /**
     * This method is like `_.zip` except that it accepts an iteratee to specify
     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee] The function to combine grouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
     * // => [111, 222]
     */
    var zipWith = restParam(function(arrays) {
      var length = arrays.length,
          iteratee = length > 2 ? arrays[length - 2] : undefined,
          thisArg = length > 1 ? arrays[length - 1] : undefined;

      if (length > 2 && typeof iteratee == 'function') {
        length -= 2;
      } else {
        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
        thisArg = undefined;
      }
      arrays.length = length;
      return unzipWith(arrays, iteratee, thisArg);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method
     * chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(users)
     *   .sortBy('age')
     *   .map(function(chr) {
     *     return chr.user + ' is ' + chr.age;
     *   })
     *   .first()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * bound to `thisArg` and invoked with one argument; (value). The purpose of
     * this method is to "tap into" a method chain in order to perform operations
     * on intermediate results within the chain.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor, thisArg) {
      interceptor.call(thisArg, value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor, thisArg) {
      return interceptor.call(thisArg, value);
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(users).first();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(users).chain()
     *   .first()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Creates a new array joining a wrapped array with any additional arrays
     * and/or values.
     *
     * @name concat
     * @memberOf _
     * @category Chain
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var wrapped = _(array).concat(2, [3], [[4]]);
     *
     * console.log(wrapped.value());
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    var wrapperConcat = restParam(function(values) {
      values = baseFlatten(values);
      return this.thru(function(array) {
        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
      });
    });

    /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).map(function(value) {
     *   return Math.pow(value, 2);
     * });
     *
     * var other = [3, 4];
     * var otherWrapped = wrapped.plant(other);
     *
     * otherWrapped.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * Reverses the wrapped array so the first element becomes the last, the
     * second element becomes the second to last, and so on.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;

      var interceptor = function(value) {
        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
      };
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(interceptor);
    }

    /**
     * Produces the result of coercing the unwrapped value to a string.
     *
     * @name toString
     * @memberOf _
     * @category Chain
     * @returns {string} Returns the coerced string value.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return (this.value() + '');
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias run, toJSON, valueOf
     * @category Chain
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements corresponding to the given keys, or indexes,
     * of `collection`. Keys may be specified as individual arguments or as arrays
     * of keys.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [props] The property names
     *  or indexes of elements to pick, specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * _.at(['a', 'b', 'c'], [0, 2]);
     * // => ['a', 'c']
     *
     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
     * // => ['barney', 'pebbles']
     */
    var at = restParam(function(collection, props) {
      return baseAt(collection, baseFlatten(props));
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * The predicate is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.every(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = undefined;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.filter([4, 5, 6], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [4, 6]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.filter(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.filter(users, 'active'), 'user');
     * // => ['barney']
     */
    function filter(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.result(_.find(users, function(chr) {
     *   return chr.age < 40;
     * }), 'user');
     * // => 'barney'
     *
     * // using the `_.matches` callback shorthand
     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.result(_.find(users, 'active', false), 'user');
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.result(_.find(users, 'active'), 'user');
     * // => 'barney'
     */
    var find = createFind(baseEach);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(baseEachRight, true);

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning the first element that has equivalent property
     * values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
     * // => 'barney'
     *
     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
     * // => 'fred'
     */
    function findWhere(collection, source) {
      return find(collection, baseMatches(source));
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection). Iteratee functions may exit iteration early
     * by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length" property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from left to right and returns the array
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
     *   console.log(n, key);
     * });
     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
     */
    var forEach = createForEach(arrayEach, baseEach);

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEachRight(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from right to left and returns the array
     */
    var forEachRight = createForEach(arrayEachRight, baseEachRight);

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using the `_.property` callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @alias contains, include
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} target The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, target, fromIndex, guard) {
      var length = collection ? getLength(collection) : 0;
      if (!isLength(length)) {
        collection = values(collection);
        length = collection.length;
      }
      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
        fromIndex = 0;
      } else {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
      }
      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keyData = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keyData, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return String.fromCharCode(object.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return this.fromCharCode(object.code);
     * }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function it is
     * invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invoke = restParam(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
      });
      return result;
    });

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
     * `sum`, `uniq`, and `words`
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function timesThree(n) {
     *   return n * 3;
     * }
     *
     * _.map([1, 2], timesThree);
     * // => [3, 6]
     *
     * _.map({ 'a': 1, 'b': 2 }, timesThree);
     * // => [3, 6] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee, thisArg) {
      var func = isArray(collection) ? arrayMap : baseMap;
      iteratee = getCallback(iteratee, thisArg, 3);
      return func(collection, iteratee);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, while the second of which
     * contains elements `predicate` returns falsey for. The predicate is bound
     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * _.partition([1, 2, 3], function(n) {
     *   return n % 2;
     * });
     * // => [[1, 3], [2]]
     *
     * _.partition([1.2, 2.3, 3.4], function(n) {
     *   return this.floor(n) % 2;
     * }, Math);
     * // => [[1.2, 3.4], [2.3]]
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * var mapper = function(array) {
     *   return _.pluck(array, 'user');
     * };
     *
     * // using the `_.matches` callback shorthand
     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
     * // => [['pebbles'], ['barney', 'fred']]
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.map(_.partition(users, 'active', false), mapper);
     * // => [['barney', 'pebbles'], ['fred']]
     *
     * // using the `_.property` callback shorthand
     * _.map(_.partition(users, 'active'), mapper);
     * // => [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Gets the property value of `path` from all elements in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|string} path The path of the property to pluck.
     * @returns {Array} Returns the property values.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(users, 'user');
     * // => ['barney', 'fred']
     *
     * var userIndex = _.indexBy(users, 'user');
     * _.pluck(userIndex, 'age');
     * // => [36, 40] (iteration order is not guaranteed)
     */
    function pluck(collection, path) {
      return map(collection, property(path));
    }

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not provided the first element of `collection` is used as the initial
     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
     * and `sortByOrder`
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(total, n) {
     *   return total + n;
     * });
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
     */
    var reduce = createReduce(arrayReduce, baseEach);

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.reject([1, 2, 3, 4], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [1, 3]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.reject(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.reject(users, 'active'), 'user');
     * // => ['barney']
     */
    function reject(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {*} Returns the random sample(s).
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
        collection = toIterable(collection);
        var length = collection.length;
        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
      }
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sample(collection, POSITIVE_INFINITY);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the size of `collection`.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? getLength(collection) : 0;
      return isLength(length) ? length : keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * The function returns as soon as it finds a passing value and does not iterate
     * over the entire collection. The predicate is bound to `thisArg` and invoked
     * with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.some(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, thisArg) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = undefined;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through `iteratee`. This method performs
     * a stable sort, that is, it preserves the original sort order of equal elements.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return Math.sin(n);
     * });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return this.sin(n);
     * }, Math);
     * // => [3, 1, 2]
     *
     * var users = [
     *   { 'user': 'fred' },
     *   { 'user': 'pebbles' },
     *   { 'user': 'barney' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.sortBy(users, 'user'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function sortBy(collection, iteratee, thisArg) {
      if (collection == null) {
        return [];
      }
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = undefined;
      }
      var index = -1;
      iteratee = getCallback(iteratee, thisArg, 3);

      var result = baseMap(collection, function(value, key, collection) {
        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
      });
      return baseSortBy(result, compareAscending);
    }

    /**
     * This method is like `_.sortBy` except that it can sort by multiple iteratees
     * or property names.
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
     *  The iteratees to sort by, specified as individual values or arrays of values.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
     *
     * _.map(_.sortByAll(users, 'user', function(chr) {
     *   return Math.floor(chr.age / 10);
     * }), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    var sortByAll = restParam(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var guard = iteratees[2];
      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
        iteratees.length = 1;
      }
      return baseSortByOrder(collection, baseFlatten(iteratees), []);
    });

    /**
     * This method is like `_.sortByAll` except that it allows specifying the
     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
     * values are sorted in ascending order. Otherwise, a value is sorted in
     * ascending order if its corresponding order is "asc", and descending if "desc".
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // sort by `user` in ascending order and by `age` in descending order
     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    function sortByOrder(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (guard && isIterateeCall(iteratees, orders, guard)) {
        orders = undefined;
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseSortByOrder(collection, iteratees, orders);
    }

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning an array of all elements that have equivalent
     * property values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
     * // => ['barney']
     *
     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
     * // => ['fred']
     */
    function where(collection, source) {
      return filter(collection, baseMatches(source));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Date
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = nativeNow || function() {
      return new Date().getTime();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it is called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      n = nativeIsFinite(n = +n) ? n : 0;
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      if (guard && isIterateeCall(func, n, guard)) {
        n = undefined;
      }
      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it is called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery('#add').on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method does not set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // using placeholders
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = restParam(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bind.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all enumerable function
     * properties, own and inherited, of `object` are bound.
     *
     * **Note:** This method does not set the "length" property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} [methodNames] The object method names to bind,
     *  specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs' when the element is clicked
     */
    var bindAll = restParam(function(object, methodNames) {
      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

      var index = -1,
          length = methodNames.length;

      while (++index < length) {
        var key = methodNames[index];
        object[key] = createWrapper(object[key], BIND_FLAG, object);
      }
      return object;
    });

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // using placeholders
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = restParam(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bindKey.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts one or more arguments of `func` that when
     * called either invokes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` may be specified
     * if `func.length` is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    var curry = createCurry(CURRY_FLAG);

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    var curryRight = createCurry(CURRY_RIGHT_FLAG);

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed invocations. Provide an options object to indicate that `func`
     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
     * Subsequent calls to the debounced function return the result of the last
     * `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it is invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }));
     *
     * // cancel a debounced call
     * var todoChanges = _.debounce(batchLog, 1000);
     * Object.observe(models.todo, todoChanges);
     *
     * Object.observe(models, function(changes) {
     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
     *     todoChanges.cancel();
     *   }
     * }, ['delete']);
     *
     * // ...at some point `models.todo` is changed
     * models.todo.completed = true;
     *
     * // ...before 1 second has passed `models.todo` is deleted
     * // which cancels the debounced `todoChanges` call
     * delete models.todo;
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = wait < 0 ? 0 : (+wait || 0);
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = !!options.leading;
        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        lastCalled = 0;
        maxTimeoutId = timeoutId = trailingCall = undefined;
      }

      function complete(isCalled, id) {
        if (id) {
          clearTimeout(id);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (isCalled) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = undefined;
          }
        }
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function maxDelayed() {
        complete(trailing, timeoutId);
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0 || remaining > maxWait;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = undefined;
        }
        return result;
      }
      debounced.cancel = cancel;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    var defer = restParam(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
    var delay = restParam(function(func, wait, args) {
      return baseDelay(func, wait, args);
    });

    /**
     * Creates a function that returns the result of invoking the provided
     * functions with the `this` binding of the created function, where each
     * successive invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the provided functions from right to left.
     *
     * @static
     * @memberOf _
     * @alias backflow, compose
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is coerced to a string and used as the
     * cache key. The `func` is invoked with the `this` binding of the memoized
     * function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var upperCase = _.memoize(function(string) {
     *   return string.toUpperCase();
     * });
     *
     * upperCase('fred');
     * // => 'FRED'
     *
     * // modifying the result cache
     * upperCase.cache.set('fred', 'BARNEY');
     * upperCase('fred');
     * // => 'BARNEY'
     *
     * // replacing `_.memoize.Cache`
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'barney' };
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'fred' }
     *
     * _.memoize.Cache = WeakMap;
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'barney' }
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that runs each argument through a corresponding
     * transform function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms] The functions to transform
     * arguments, specified as individual functions or arrays of functions.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var modded = _.modArgs(function(x, y) {
     *   return [x, y];
     * }, square, doubled);
     *
     * modded(1, 2);
     * // => [1, 4]
     *
     * modded(5, 10);
     * // => [25, 20]
     */
    var modArgs = restParam(function(func, transforms) {
      transforms = baseFlatten(transforms);
      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = transforms.length;
      return restParam(function(args) {
        var index = nativeMin(args.length, length);
        while (index--) {
          args[index] = transforms[index](args[index]);
        }
        return func.apply(this, args);
      });
    });

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first call. The `func` is invoked
     * with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // using placeholders
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = createPartial(PARTIAL_FLAG);

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // using placeholders
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     *
     * var map = _.rearg(_.map, [1, 0]);
     * map(function(n) {
     *   return n * 3;
     * }, [1, 2, 3]);
     * // => [3, 6, 9]
     */
    var rearg = restParam(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.restParam(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function restParam(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            rest = Array(length);

        while (++index < length) {
          rest[index] = args[start + index];
        }
        switch (start) {
          case 0: return func.call(this, rest);
          case 1: return func.call(this, args[0], rest);
          case 2: return func.call(this, args[0], args[1], rest);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = rest;
        return func.apply(this, otherArgs);
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * // with a Promise
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function(array) {
        return func.apply(this, array);
      };
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed invocations. Provide an options object to indicate
     * that `func` should be invoked on the leading and/or trailing edge of the
     * `wait` timeout. Subsequent calls to the throttled function return the
     * result of the last `func` call.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     *
     * // cancel a trailing throttled call
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
     * otherwise they are assigned by reference. If `customizer` is provided it is
     * invoked to produce the cloned values. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is bound to
     * `thisArg` and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var shallow = _.clone(users);
     * shallow[0] === users[0];
     * // => true
     *
     * var deep = _.clone(users, true);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.clone(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, customizer, thisArg) {
      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
        isDeep = false;
      }
      else if (typeof isDeep == 'function') {
        thisArg = customizer;
        customizer = isDeep;
        isDeep = false;
      }
      return typeof customizer == 'function'
        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
        : baseClone(value, isDeep);
    }

    /**
     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
     * to produce the cloned values. If `customizer` returns `undefined` cloning
     * is handled by the method instead. The `customizer` is bound to `thisArg`
     * and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var deep = _.cloneDeep(users);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.cloneDeep(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 20
     */
    function cloneDeep(value, customizer, thisArg) {
      return typeof customizer == 'function'
        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
        : baseClone(value, true);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    function gt(value, other) {
      return value > other;
    }

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    function gte(value, other) {
      return value >= other;
    }

    /**
     * Checks if `value` is classified as an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return isObjectLike(value) && isArrayLike(value) &&
        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(function() { return arguments; }());
     * // => false
     */
    var isArray = nativeIsArray || function(value) {
      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
    };

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return isObjectLike(value) && objToString.call(value) == dateTag;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    /**
     * Checks if `value` is empty. A value is considered empty unless it is an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
          (isObjectLike(value) && isFunction(value.splice)))) {
        return !value.length;
      }
      return !keys(value).length;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent. If `customizer` is provided it is invoked to compare values.
     * If `customizer` returns `undefined` comparisons are handled by the method
     * instead. The `customizer` is bound to `thisArg` and invoked with three
     * arguments: (value, other [, index|key]).
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. Functions and DOM nodes
     * are **not** supported. Provide a customizer function to extend support
     * for comparing other values.
     *
     * @static
     * @memberOf _
     * @alias eq
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * object == other;
     * // => false
     *
     * _.isEqual(object, other);
     * // => true
     *
     * // using a customizer callback
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqual(array, other, function(value, other) {
     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
     *     return true;
     *   }
     * });
     * // => true
     */
    function isEqual(value, other, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(10);
     * // => true
     *
     * _.isFinite('10');
     * // => false
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite(Object(10));
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in older versions of Chrome and Safari which return 'function' for regexes
      // and Safari 8 equivalents which return 'object' for typed array constructors.
      return isObject(value) && objToString.call(value) == funcTag;
    }

    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // Avoid a V8 JIT bug in Chrome 19-20.
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values. If `customizer` is provided
     * it is invoked to compare values. If `customizer` returns `undefined`
     * comparisons are handled by the method instead. The `customizer` is bound
     * to `thisArg` and invoked with three arguments: (value, other, index|key).
     *
     * **Note:** This method supports comparing properties of arrays, booleans,
     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
     * and DOM nodes are **not** supported. Provide a customizer function to extend
     * support for comparing other values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     *
     * // using a customizer callback
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatch(object, source, function(value, other) {
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
     * });
     * // => true
     */
    function isMatch(object, source, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
      return baseIsMatch(object, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(fnToString.call(value));
      }
      return isObjectLike(value) && reIsHostCtor.test(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(8.4);
     * // => true
     *
     * _.isNumber(NaN);
     * // => true
     *
     * _.isNumber('8.4');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * **Note:** This method assumes objects created by the `Object` constructor
     * have no inherited enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      var Ctor;

      // Exit early for non `Object` objects.
      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
        return false;
      }
      // IE < 9 iterates inherited properties before own properties. If the first
      // iterated property is an object's own property then there are no inherited
      // enumerable properties.
      var result;
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      baseForIn(value, function(subValue, key) {
        result = key;
      });
      return result === undefined || hasOwnProperty.call(value, result);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return isObject(value) && objToString.call(value) == regexpTag;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    function lt(value, other) {
      return value < other;
    }

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    function lte(value, other) {
      return value <= other;
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * (function() {
     *   return _.toArray(arguments).slice(1);
     * }(1, 2, 3));
     * // => [2, 3]
     */
    function toArray(value) {
      var length = value ? getLength(value) : 0;
      if (!isLength(length)) {
        return values(value);
      }
      if (!length) {
        return [];
      }
      return arrayCopy(value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return baseCopy(value, keysIn(value));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * overwrite property assignments of previous sources. If `customizer` is
     * provided it is invoked to produce the merged values of the destination and
     * source properties. If `customizer` returns `undefined` merging is handled
     * by the method instead. The `customizer` is bound to `thisArg` and invoked
     * with five arguments: (objectValue, sourceValue, key, object, source).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     *
     * // using a customizer callback
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(object, other, function(a, b) {
     *   if (_.isArray(a)) {
     *     return a.concat(b);
     *   }
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var merge = createAssigner(baseMerge);

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources overwrite property assignments of previous sources.
     * If `customizer` is provided it is invoked to produce the assigned values.
     * The `customizer` is bound to `thisArg` and invoked with five arguments:
     * (objectValue, sourceValue, key, object, source).
     *
     * **Note:** This method mutates `object` and is based on
     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using a customizer callback
     * var defaults = _.partialRight(_.assign, function(value, other) {
     *   return _.isUndefined(value) ? other : value;
     * });
     *
     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var assign = createAssigner(function(object, source, customizer) {
      return customizer
        ? assignWith(object, source, customizer)
        : baseAssign(object, source);
    });

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties, guard) {
      var result = baseCreate(prototype);
      if (guard && isIterateeCall(prototype, properties, guard)) {
        properties = undefined;
      }
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var defaults = createDefaults(assign, assignDefaults);

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
     * // => { 'user': { 'name': 'barney', 'age': 36 } }
     *
     */
    var defaultsDeep = createDefaults(merge, mergeDefaults);

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // using the `_.matches` callback shorthand
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    var findKey = createFindKey(baseForOwn);

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles` assuming `_.findKey` returns `barney`
     *
     * // using the `_.matches` callback shorthand
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    var findLastKey = createFindKey(baseForOwnRight);

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
     */
    var forIn = createForIn(baseFor);

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
     */
    var forInRight = createForIn(baseForRight);

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The `iteratee` is bound to `thisArg` and invoked with
     * three arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' and 'b' (iteration order is not guaranteed)
     */
    var forOwn = createForOwn(baseForOwn);

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
     */
    var forOwnRight = createForOwn(baseForOwnRight);

    /**
     * Creates an array of function property names from all enumerable properties,
     * own and inherited, of `object`.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * _.functions(_);
     * // => ['after', 'ary', 'assign', ...]
     */
    function functions(object) {
      return baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the property value at `path` of `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     */
    function has(object, path) {
      if (object == null) {
        return false;
      }
      var result = hasOwnProperty.call(object, path);
      if (!result && !isKey(path)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        if (object == null) {
          return false;
        }
        path = last(path);
        result = hasOwnProperty.call(object, path);
      }
      return result || (isLength(object.length) && isIndex(path, object.length) &&
        (isArray(object) || isArguments(object)));
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values unless `multiValue` is `true`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {boolean} [multiValue] Allow multiple values per key.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     *
     * // with `multiValue`
     * _.invert(object, true);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function invert(object, multiValue, guard) {
      if (guard && isIterateeCall(object, multiValue, guard)) {
        multiValue = undefined;
      }
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index],
            value = object[key];

        if (multiValue) {
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }
        else {
          result[value] = key;
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      var Ctor = object == null ? undefined : object.constructor;
      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
          (typeof object != 'function' && isArrayLike(object))) {
        return shimKeys(object);
      }
      return isObject(object) ? nativeKeys(object) : [];
    };

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      if (object == null) {
        return [];
      }
      if (!isObject(object)) {
        object = Object(object);
      }
      var length = object.length;
      length = (length && isLength(length) &&
        (isArray(object) || isArguments(object)) && length) || 0;

      var Ctor = object.constructor,
          index = -1,
          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
          result = Array(length),
          skipIndexes = length > 0;

      while (++index < length) {
        result[index] = (index + '');
      }
      for (var key in object) {
        if (!(skipIndexes && isIndex(key, length)) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * property of `object` through `iteratee`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    var mapKeys = createObjectMapper(true);

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, key, object).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
     *   return n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * // using the `_.property` callback shorthand
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    var mapValues = createObjectMapper();

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to omit, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.omit(object, 'age');
     * // => { 'user': 'fred' }
     *
     * _.omit(object, _.isNumber);
     * // => { 'user': 'fred' }
     */
    var omit = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      if (typeof props[0] != 'function') {
        var props = arrayMap(baseFlatten(props), String);
        return pickByArray(object, baseDifference(keysIn(object), props));
      }
      var predicate = bindCallback(props[0], props[1], 3);
      return pickByCallback(object, function(value, key, object) {
        return !predicate(value, key, object);
      });
    });

    /**
     * Creates a two dimensional array of the key-value pairs for `object`,
     * e.g. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
     */
    function pairs(object) {
      object = toObject(object);

      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates an object composed of the picked `object` properties. Property
     * names may be specified as individual arguments or as arrays of property
     * names. If `predicate` is provided it is invoked for each property of `object`
     * picking the properties `predicate` returns truthy for. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.pick(object, 'user');
     * // => { 'user': 'fred' }
     *
     * _.pick(object, _.isString);
     * // => { 'user': 'fred' }
     */
    var pick = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      return typeof props[0] == 'function'
        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
        : pickByArray(object, baseFlatten(props));
    });

    /**
     * This method is like `_.get` except that if the resolved value is a function
     * it is invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a.b.c', 'default');
     * // => 'default'
     *
     * _.result(object, 'a.b.c', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      var result = object == null ? undefined : object[path];
      if (result === undefined) {
        if (object != null && !isKey(path, object)) {
          path = toPath(path);
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          result = object == null ? undefined : object[last(path)];
        }
        result = result === undefined ? defaultValue : result;
      }
      return isFunction(result) ? result.call(object) : result;
    }

    /**
     * Sets the property value of `path` on `object`. If a portion of `path`
     * does not exist it is created.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to augment.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      if (object == null) {
        return object;
      }
      var pathKey = (path + '');
      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = path[index];
        if (isObject(nested)) {
          if (index == lastIndex) {
            nested[key] = value;
          } else if (nested[key] == null) {
            nested[key] = isIndex(path[index + 1]) ? [] : {};
          }
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
     * with four arguments: (accumulator, value, key, object). Iteratee functions
     * may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * });
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     */
    function transform(object, iteratee, accumulator, thisArg) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getCallback(iteratee, thisArg, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable property values
     * of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it is set to `start` with `start` then set to `0`.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} n The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     */
    function inRange(value, start, end) {
      start = +start || 0;
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      return value >= nativeMin(start, end) && value < nativeMax(start, end);
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number is returned.
     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
     * number is returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      if (floating && isIterateeCall(min, max, floating)) {
        max = floating = undefined;
      }
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (noMax && typeof min == 'boolean') {
          floating = min;
          min = 1;
        }
        else if (typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
        noMax = false;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
    });

    /**
     * Capitalizes the first character of `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('fred');
     * // => 'Fred'
     */
    function capitalize(string) {
      string = baseToString(string);
      return string && (string.charAt(0).toUpperCase() + string.slice(1));
    }

    /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('dÃ©jÃ  vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = baseToString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = baseToString(string);
      target = (target + '');

      var length = string.length;
      position = position === undefined
        ? length
        : nativeMin(position < 0 ? 0 : (+position || 0), length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional characters
     * use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in Internet Explorer < 9, they can break out
     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
      string = baseToString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
     */
    function escapeRegExp(string) {
      string = baseToString(string);
      return (string && reHasRegExpChars.test(string))
        ? string.replace(reRegExpChars, escapeRegExpChar)
        : (string || '(?:)');
    }

    /**
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = baseToString(string);
      length = +length;

      var strLength = string.length;
      if (strLength >= length || !nativeIsFinite(length)) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = nativeFloor(mid),
          rightLength = nativeCeil(mid);

      chars = createPadding('', rightLength, chars);
      return chars.slice(0, leftLength) + string + chars;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padLeft('abc', 6);
     * // => '   abc'
     *
     * _.padLeft('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padLeft('abc', 3);
     * // => 'abc'
     */
    var padLeft = createPadDir();

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padRight('abc', 6);
     * // => 'abc   '
     *
     * _.padRight('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padRight('abc', 3);
     * // => 'abc'
     */
    var padRight = createPadDir(true);

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
      // Chrome fails to trim leading <BOM> whitespace characters.
      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = trim(string);
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      var result = '';
      string = baseToString(string);
      n = +n;
      if (n < 1 || !string || !nativeIsFinite(n)) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = baseToString(string);
      position = position == null
        ? 0
        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is provided it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // using the HTML "escape" delimiter to escape data property values
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // using custom template delimiters
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using backslashes to treat delimiters as plain text
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // using the `imports` option to import `jQuery` as `jq`
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, otherOptions) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
        options = otherOptions = undefined;
      }
      string = baseToString(string);
      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
      }
      chars = (chars + '');
      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimLeft('  abc  ');
     * // => 'abc  '
     *
     * _.trimLeft('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimLeft(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string));
      }
      return string.slice(charsLeftIndex(string, (chars + '')));
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimRight('  abc  ');
     * // => '  abc'
     *
     * _.trimRight('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimRight(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(0, trimmedRightIndex(string) + 1);
      }
      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object|number} [options] The options object or maximum string length.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.trunc('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', 24);
     * // => 'hi-diddly-ho there, n...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function trunc(string, options, guard) {
      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (options != null) {
        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? (+options.length || 0) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        } else {
          length = +options || 0;
        }
      }
      string = baseToString(string);
      if (length >= string.length) {
        return string;
      }
      var end = length - omission.length;
      if (end < 1) {
        return omission;
      }
      var result = string.slice(0, end);
      if (separator == null) {
        return result + omission;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              newEnd,
              substring = string.slice(0, end);

          if (!separator.global) {
            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            newEnd = match.index;
          }
          result = result.slice(0, newEnd == null ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = baseToString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      if (guard && isIterateeCall(string, pattern, guard)) {
        pattern = undefined;
      }
      string = baseToString(string);
      return string.match(pattern || reWords) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // avoid throwing errors for invalid selectors
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = restParam(function(func, args) {
      try {
        return func.apply(undefined, args);
      } catch(e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and arguments of the created function. If `func` is a property name the
     * created callback returns the property value for a given element. If `func`
     * is an object the created callback returns `true` for elements that contain
     * the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @alias iteratee
     * @category Utility
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
     *   if (!match) {
     *     return callback(func, thisArg);
     *   }
     *   return function(object) {
     *     return match[2] == 'gt'
     *       ? object[match[1]] > match[3]
     *       : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(users, 'age__gt36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function callback(func, thisArg, guard) {
      if (guard && isIterateeCall(func, thisArg, guard)) {
        thisArg = undefined;
      }
      return isObjectLike(func)
        ? matches(func)
        : baseCallback(func, thisArg);
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that performs a deep comparison between a given object
     * and `source`, returning `true` if the given object has equivalent property
     * values, else `false`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that compares the property value of `path` on a given
     * object to `value`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` on a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': _.constant(2) } } },
     *   { 'a': { 'b': { 'c': _.constant(1) } } }
     * ];
     *
     * _.map(objects, _.method('a.b.c'));
     * // => [2, 1]
     *
     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    var method = restParam(function(path, args) {
      return function(object) {
        return invokePath(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path on `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = restParam(function(object, args) {
      return function(path) {
        return invokePath(object, path, args);
      };
    });

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      if (options == null) {
        var isObj = isObject(source),
            props = isObj ? keys(source) : undefined,
            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

        if (!(methodNames ? methodNames.length : isObj)) {
          methodNames = false;
          options = source;
          source = object;
          object = this;
        }
      }
      if (!methodNames) {
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = true,
          index = -1,
          isFunc = isFunction(object),
          length = methodNames.length;

      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      while (++index < length) {
        var methodName = methodNames[index],
            func = source[methodName];

        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = (function(func) {
            return function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = arrayCopy(this.__actions__);

                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }(func));
        }
      }
      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      root._ = oldDash;
      return this;
    }

    /**
     * A no-operation function that returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that returns the property value at `path` on a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the property value at a given path on `object`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return baseGet(object, toPath(path), path + '');
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. If `end` is not specified it is
     * set to `start` with `start` then set to `0`. If `end` is less than `start`
     * a zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      if (step && isIterateeCall(start, end, step)) {
        end = step = undefined;
      }
      start = +start || 0;
      step = step == null ? 1 : (+step || 0);

      if (end == null) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
     * one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) {
     *   mage.castSpell(n);
     * });
     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
     *
     * _.times(3, function(n) {
     *   this.cast(n);
     * }, mage);
     * // => also invokes `mage.castSpell(n)` three times
     */
    function times(n, iteratee, thisArg) {
      n = nativeFloor(n);

      // Exit early to avoid a JSC JIT bug in Safari 8
      // where `Array(0)` is treated as `Array(1)`.
      if (n < 1 || !nativeIsFinite(n)) {
        return [];
      }
      var index = -1,
          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

      iteratee = bindCallback(iteratee, thisArg, 1);
      while (++index < n) {
        if (index < MAX_ARRAY_LENGTH) {
          result[index] = iteratee(index);
        } else {
          iteratee(index);
        }
      }
      return result;
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return baseToString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number to add.
     * @param {number} addend The second number to add.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    function add(augend, addend) {
      return (+augend || 0) + (+addend || 0);
    }

    /**
     * Calculates `n` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Calculates `n` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Gets the maximum value of `collection`. If `collection` is empty or falsey
     * `-Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => -Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.max(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using the `_.property` callback shorthand
     * _.max(users, 'age');
     * // => { 'user': 'fred', 'age': 40 }
     */
    var max = createExtremum(gt, NEGATIVE_INFINITY);

    /**
     * Gets the minimum value of `collection`. If `collection` is empty or falsey
     * `Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.min(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // using the `_.property` callback shorthand
     * _.min(users, 'age');
     * // => { 'user': 'barney', 'age': 36 }
     */
    var min = createExtremum(lt, POSITIVE_INFINITY);

    /**
     * Calculates `n` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Gets the sum of the values in `collection`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 6]);
     * // => 10
     *
     * _.sum({ 'a': 4, 'b': 6 });
     * // => 10
     *
     * var objects = [
     *   { 'n': 4 },
     *   { 'n': 6 }
     * ];
     *
     * _.sum(objects, function(object) {
     *   return object.n;
     * });
     * // => 10
     *
     * // using the `_.property` callback shorthand
     * _.sum(objects, 'n');
     * // => 10
     */
    function sum(collection, iteratee, thisArg) {
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = undefined;
      }
      iteratee = getCallback(iteratee, thisArg, 3);
      return iteratee.length == 1
        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
        : baseSum(collection, iteratee);
    }

    /*------------------------------------------------------------------------*/

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    // Add functions to the `Map` cache.
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `Set` cache.
    SetCache.prototype.push = cachePush;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.callback = callback;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.modArgs = modArgs;
    lodash.negate = negate;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.restParam = restParam;
    lodash.set = set;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortByAll = sortByAll;
    lodash.sortByOrder = sortByOrder;
    lodash.spread = spread;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.backflow = flowRight;
    lodash.collect = map;
    lodash.compose = flowRight;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.iteratee = callback;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.findWhere = findWhere;
    lodash.first = first;
    lodash.floor = floor;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isMatch = isMatch;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.min = min;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padLeft = padLeft;
    lodash.padRight = padRight;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.sum = sum;
    lodash.template = template;
    lodash.trim = trim;
    lodash.trimLeft = trimLeft;
    lodash.trimRight = trimRight;
    lodash.trunc = trunc;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.words = words;

    // Add aliases.
    lodash.all = every;
    lodash.any = some;
    lodash.contains = includes;
    lodash.eq = isEqual;
    lodash.detect = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.head = first;
    lodash.include = includes;
    lodash.inject = reduce;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }()), false);

    /*------------------------------------------------------------------------*/

    // Add functions capable of returning wrapped and unwrapped values when chaining.
    lodash.sample = sample;

    lodash.prototype.sample = function(n) {
      if (!this.__chain__ && n == null) {
        return sample(this.value());
      }
      return this.thru(function(value) {
        return sample(value, n);
      });
    };

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(result.__takeCount__, n);
        } else {
          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type != LAZY_MAP_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
        var result = this.clone();
        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.first` and `_.last`.
    arrayEach(['first', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
    arrayEach(['initial', 'rest'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
    arrayEach(['pluck', 'where'], function(methodName, index) {
      var operationName = index ? 'filter' : 'map',
          createCallback = index ? baseMatches : property;

      LazyWrapper.prototype[methodName] = function(value) {
        return this[operationName](createCallback(value));
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.reject = function(predicate, thisArg) {
      predicate = getCallback(predicate, thisArg, 1);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = start == null ? 0 : (+start || 0);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = (+end || 0);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
      return this.reverse().takeWhile(predicate, thisArg).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(POSITIVE_INFINITY);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
          retUnwrapped = /^(?:first|last)$/.test(methodName),
          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var args = retUnwrapped ? [1] : arguments,
            chainAll = this.__chain__,
            value = this.__wrapped__,
            isHybrid = !!this.__actions__.length,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var interceptor = function(value) {
          return (retUnwrapped && chainAll)
            ? lodashFunc(value, 1)[0]
            : lodashFunc.apply(undefined, arrayPush([value], args));
        };

        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
            onlyLazy = isLazy && !isHybrid;

        if (retUnwrapped && !chainAll) {
          if (onlyLazy) {
            value = value.clone();
            value.__actions__.push(action);
            return func.call(value);
          }
          return lodashFunc.call(undefined, this.value())[0];
        }
        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push(action);
          return new LodashWrapper(result, chainAll);
        }
        return this.thru(interceptor);
      };
    });

    // Add `Array` and `String` methods to `lodash.prototype`.
    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Map minified function names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name,
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the `lodash` wrapper.
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.concat = wrapperConcat;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add function aliases to the `lodash` wrapper.
    lodash.prototype.collect = lodash.prototype.map;
    lodash.prototype.head = lodash.prototype.first;
    lodash.prototype.select = lodash.prototype.filter;
    lodash.prototype.tail = lodash.prototype.rest;

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js or RingoJS.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for Rhino with CommonJS support.
    else {
      freeExports._ = _;
    }
  }
  else {
    // Export for a browser or Rhino.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],6:[function(require,module,exports){
'use strict';

module.exports = require('./lib')

},{"./lib":11}],7:[function(require,module,exports){
'use strict';

var asap = require('asap/raw');

function noop() {}

// States:
//
// 0 - pending
// 1 - fulfilled with _value
// 2 - rejected with _value
// 3 - adopted the state of another promise, _value
//
// once the state is no longer pending (0) it is immutable

// All `_` prefixed properties will be reduced to `_{random number}`
// at build time to obfuscate them and discourage their use.
// We don't use symbols or Object.defineProperty to fully hide them
// because the performance isn't good enough.


// to avoid using try/catch inside critical functions, we
// extract them to here.
var LAST_ERROR = null;
var IS_ERROR = {};
function getThen(obj) {
  try {
    return obj.then;
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

function tryCallOne(fn, a) {
  try {
    return fn(a);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}
function tryCallTwo(fn, a, b) {
  try {
    fn(a, b);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

module.exports = Promise;

function Promise(fn) {
  if (typeof this !== 'object') {
    throw new TypeError('Promises must be constructed via new');
  }
  if (typeof fn !== 'function') {
    throw new TypeError('Promise constructor\'s argument is not a function');
  }
  this._40 = 0;
  this._65 = 0;
  this._55 = null;
  this._72 = null;
  if (fn === noop) return;
  doResolve(fn, this);
}
Promise._37 = null;
Promise._87 = null;
Promise._61 = noop;

Promise.prototype.then = function(onFulfilled, onRejected) {
  if (this.constructor !== Promise) {
    return safeThen(this, onFulfilled, onRejected);
  }
  var res = new Promise(noop);
  handle(this, new Handler(onFulfilled, onRejected, res));
  return res;
};

function safeThen(self, onFulfilled, onRejected) {
  return new self.constructor(function (resolve, reject) {
    var res = new Promise(noop);
    res.then(resolve, reject);
    handle(self, new Handler(onFulfilled, onRejected, res));
  });
}
function handle(self, deferred) {
  while (self._65 === 3) {
    self = self._55;
  }
  if (Promise._37) {
    Promise._37(self);
  }
  if (self._65 === 0) {
    if (self._40 === 0) {
      self._40 = 1;
      self._72 = deferred;
      return;
    }
    if (self._40 === 1) {
      self._40 = 2;
      self._72 = [self._72, deferred];
      return;
    }
    self._72.push(deferred);
    return;
  }
  handleResolved(self, deferred);
}

function handleResolved(self, deferred) {
  asap(function() {
    var cb = self._65 === 1 ? deferred.onFulfilled : deferred.onRejected;
    if (cb === null) {
      if (self._65 === 1) {
        resolve(deferred.promise, self._55);
      } else {
        reject(deferred.promise, self._55);
      }
      return;
    }
    var ret = tryCallOne(cb, self._55);
    if (ret === IS_ERROR) {
      reject(deferred.promise, LAST_ERROR);
    } else {
      resolve(deferred.promise, ret);
    }
  });
}
function resolve(self, newValue) {
  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
  if (newValue === self) {
    return reject(
      self,
      new TypeError('A promise cannot be resolved with itself.')
    );
  }
  if (
    newValue &&
    (typeof newValue === 'object' || typeof newValue === 'function')
  ) {
    var then = getThen(newValue);
    if (then === IS_ERROR) {
      return reject(self, LAST_ERROR);
    }
    if (
      then === self.then &&
      newValue instanceof Promise
    ) {
      self._65 = 3;
      self._55 = newValue;
      finale(self);
      return;
    } else if (typeof then === 'function') {
      doResolve(then.bind(newValue), self);
      return;
    }
  }
  self._65 = 1;
  self._55 = newValue;
  finale(self);
}

function reject(self, newValue) {
  self._65 = 2;
  self._55 = newValue;
  if (Promise._87) {
    Promise._87(self, newValue);
  }
  finale(self);
}
function finale(self) {
  if (self._40 === 1) {
    handle(self, self._72);
    self._72 = null;
  }
  if (self._40 === 2) {
    for (var i = 0; i < self._72.length; i++) {
      handle(self, self._72[i]);
    }
    self._72 = null;
  }
}

function Handler(onFulfilled, onRejected, promise){
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
  this.promise = promise;
}

/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */
function doResolve(fn, promise) {
  var done = false;
  var res = tryCallTwo(fn, function (value) {
    if (done) return;
    done = true;
    resolve(promise, value);
  }, function (reason) {
    if (done) return;
    done = true;
    reject(promise, reason);
  });
  if (!done && res === IS_ERROR) {
    done = true;
    reject(promise, LAST_ERROR);
  }
}

},{"asap/raw":2}],8:[function(require,module,exports){
'use strict';

var Promise = require('./core.js');

module.exports = Promise;
Promise.prototype.done = function (onFulfilled, onRejected) {
  var self = arguments.length ? this.then.apply(this, arguments) : this;
  self.then(null, function (err) {
    setTimeout(function () {
      throw err;
    }, 0);
  });
};

},{"./core.js":7}],9:[function(require,module,exports){
'use strict';

//This file contains the ES6 extensions to the core Promises/A+ API

var Promise = require('./core.js');

module.exports = Promise;

/* Static Functions */

var TRUE = valuePromise(true);
var FALSE = valuePromise(false);
var NULL = valuePromise(null);
var UNDEFINED = valuePromise(undefined);
var ZERO = valuePromise(0);
var EMPTYSTRING = valuePromise('');

function valuePromise(value) {
  var p = new Promise(Promise._61);
  p._65 = 1;
  p._55 = value;
  return p;
}
Promise.resolve = function (value) {
  if (value instanceof Promise) return value;

  if (value === null) return NULL;
  if (value === undefined) return UNDEFINED;
  if (value === true) return TRUE;
  if (value === false) return FALSE;
  if (value === 0) return ZERO;
  if (value === '') return EMPTYSTRING;

  if (typeof value === 'object' || typeof value === 'function') {
    try {
      var then = value.then;
      if (typeof then === 'function') {
        return new Promise(then.bind(value));
      }
    } catch (ex) {
      return new Promise(function (resolve, reject) {
        reject(ex);
      });
    }
  }
  return valuePromise(value);
};

Promise.all = function (arr) {
  var args = Array.prototype.slice.call(arr);

  return new Promise(function (resolve, reject) {
    if (args.length === 0) return resolve([]);
    var remaining = args.length;
    function res(i, val) {
      if (val && (typeof val === 'object' || typeof val === 'function')) {
        if (val instanceof Promise && val.then === Promise.prototype.then) {
          while (val._65 === 3) {
            val = val._55;
          }
          if (val._65 === 1) return res(i, val._55);
          if (val._65 === 2) reject(val._55);
          val.then(function (val) {
            res(i, val);
          }, reject);
          return;
        } else {
          var then = val.then;
          if (typeof then === 'function') {
            var p = new Promise(then.bind(val));
            p.then(function (val) {
              res(i, val);
            }, reject);
            return;
          }
        }
      }
      args[i] = val;
      if (--remaining === 0) {
        resolve(args);
      }
    }
    for (var i = 0; i < args.length; i++) {
      res(i, args[i]);
    }
  });
};

Promise.reject = function (value) {
  return new Promise(function (resolve, reject) {
    reject(value);
  });
};

Promise.race = function (values) {
  return new Promise(function (resolve, reject) {
    values.forEach(function(value){
      Promise.resolve(value).then(resolve, reject);
    });
  });
};

/* Prototype Methods */

Promise.prototype['catch'] = function (onRejected) {
  return this.then(null, onRejected);
};

},{"./core.js":7}],10:[function(require,module,exports){
'use strict';

var Promise = require('./core.js');

module.exports = Promise;
Promise.prototype['finally'] = function (f) {
  return this.then(function (value) {
    return Promise.resolve(f()).then(function () {
      return value;
    });
  }, function (err) {
    return Promise.resolve(f()).then(function () {
      throw err;
    });
  });
};

},{"./core.js":7}],11:[function(require,module,exports){
'use strict';

module.exports = require('./core.js');
require('./done.js');
require('./finally.js');
require('./es6-extensions.js');
require('./node-extensions.js');
require('./synchronous.js');

},{"./core.js":7,"./done.js":8,"./es6-extensions.js":9,"./finally.js":10,"./node-extensions.js":12,"./synchronous.js":13}],12:[function(require,module,exports){
'use strict';

// This file contains then/promise specific extensions that are only useful
// for node.js interop

var Promise = require('./core.js');
var asap = require('asap');

module.exports = Promise;

/* Static Functions */

Promise.denodeify = function (fn, argumentCount) {
  if (
    typeof argumentCount === 'number' && argumentCount !== Infinity
  ) {
    return denodeifyWithCount(fn, argumentCount);
  } else {
    return denodeifyWithoutCount(fn);
  }
};

var callbackFn = (
  'function (err, res) {' +
  'if (err) { rj(err); } else { rs(res); }' +
  '}'
);
function denodeifyWithCount(fn, argumentCount) {
  var args = [];
  for (var i = 0; i < argumentCount; i++) {
    args.push('a' + i);
  }
  var body = [
    'return function (' + args.join(',') + ') {',
    'var self = this;',
    'return new Promise(function (rs, rj) {',
    'var res = fn.call(',
    ['self'].concat(args).concat([callbackFn]).join(','),
    ');',
    'if (res &&',
    '(typeof res === "object" || typeof res === "function") &&',
    'typeof res.then === "function"',
    ') {rs(res);}',
    '});',
    '};'
  ].join('');
  return Function(['Promise', 'fn'], body)(Promise, fn);
}
function denodeifyWithoutCount(fn) {
  var fnLength = Math.max(fn.length - 1, 3);
  var args = [];
  for (var i = 0; i < fnLength; i++) {
    args.push('a' + i);
  }
  var body = [
    'return function (' + args.join(',') + ') {',
    'var self = this;',
    'var args;',
    'var argLength = arguments.length;',
    'if (arguments.length > ' + fnLength + ') {',
    'args = new Array(arguments.length + 1);',
    'for (var i = 0; i < arguments.length; i++) {',
    'args[i] = arguments[i];',
    '}',
    '}',
    'return new Promise(function (rs, rj) {',
    'var cb = ' + callbackFn + ';',
    'var res;',
    'switch (argLength) {',
    args.concat(['extra']).map(function (_, index) {
      return (
        'case ' + (index) + ':' +
        'res = fn.call(' + ['self'].concat(args.slice(0, index)).concat('cb').join(',') + ');' +
        'break;'
      );
    }).join(''),
    'default:',
    'args[argLength] = cb;',
    'res = fn.apply(self, args);',
    '}',
    
    'if (res &&',
    '(typeof res === "object" || typeof res === "function") &&',
    'typeof res.then === "function"',
    ') {rs(res);}',
    '});',
    '};'
  ].join('');

  return Function(
    ['Promise', 'fn'],
    body
  )(Promise, fn);
}

Promise.nodeify = function (fn) {
  return function () {
    var args = Array.prototype.slice.call(arguments);
    var callback =
      typeof args[args.length - 1] === 'function' ? args.pop() : null;
    var ctx = this;
    try {
      return fn.apply(this, arguments).nodeify(callback, ctx);
    } catch (ex) {
      if (callback === null || typeof callback == 'undefined') {
        return new Promise(function (resolve, reject) {
          reject(ex);
        });
      } else {
        asap(function () {
          callback.call(ctx, ex);
        })
      }
    }
  }
};

Promise.prototype.nodeify = function (callback, ctx) {
  if (typeof callback != 'function') return this;

  this.then(function (value) {
    asap(function () {
      callback.call(ctx, null, value);
    });
  }, function (err) {
    asap(function () {
      callback.call(ctx, err);
    });
  });
};

},{"./core.js":7,"asap":1}],13:[function(require,module,exports){
'use strict';

var Promise = require('./core.js');

module.exports = Promise;
Promise.enableSynchronous = function () {
  Promise.prototype.isPending = function() {
    return this.getState() == 0;
  };

  Promise.prototype.isFulfilled = function() {
    return this.getState() == 1;
  };

  Promise.prototype.isRejected = function() {
    return this.getState() == 2;
  };

  Promise.prototype.getValue = function () {
    if (this._65 === 3) {
      return this._55.getValue();
    }

    if (!this.isFulfilled()) {
      throw new Error('Cannot get a value of an unfulfilled promise.');
    }

    return this._55;
  };

  Promise.prototype.getReason = function () {
    if (this._65 === 3) {
      return this._55.getReason();
    }

    if (!this.isRejected()) {
      throw new Error('Cannot get a rejection reason of a non-rejected promise.');
    }

    return this._55;
  };

  Promise.prototype.getState = function () {
    if (this._65 === 3) {
      return this._55.getState();
    }
    if (this._65 === -1 || this._65 === -2) {
      return 0;
    }

    return this._65;
  };
};

Promise.disableSynchronous = function() {
  Promise.prototype.isPending = undefined;
  Promise.prototype.isFulfilled = undefined;
  Promise.prototype.isRejected = undefined;
  Promise.prototype.getValue = undefined;
  Promise.prototype.getReason = undefined;
  Promise.prototype.getState = undefined;
};

},{"./core.js":7}],14:[function(require,module,exports){
(function (global){
/*! https://mths.be/punycode v1.3.2 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.3.2',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],15:[function(require,module,exports){
'use strict';

var replace = String.prototype.replace;
var percentTwenties = /%20/g;

module.exports = {
    'default': 'RFC3986',
    formatters: {
        RFC1738: function (value) {
            return replace.call(value, percentTwenties, '+');
        },
        RFC3986: function (value) {
            return value;
        }
    },
    RFC1738: 'RFC1738',
    RFC3986: 'RFC3986'
};

},{}],16:[function(require,module,exports){
'use strict';

var stringify = require('./stringify');
var parse = require('./parse');
var formats = require('./formats');

module.exports = {
    formats: formats,
    parse: parse,
    stringify: stringify
};

},{"./formats":15,"./parse":17,"./stringify":18}],17:[function(require,module,exports){
'use strict';

var utils = require('./utils');

var has = Object.prototype.hasOwnProperty;

var defaults = {
    allowDots: false,
    allowPrototypes: false,
    arrayLimit: 20,
    decoder: utils.decode,
    delimiter: '&',
    depth: 5,
    parameterLimit: 1000,
    plainObjects: false,
    strictNullHandling: false
};

var parseValues = function parseQueryStringValues(str, options) {
    var obj = {};
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);

    for (var i = 0; i < parts.length; ++i) {
        var part = parts[i];

        var bracketEqualsPos = part.indexOf(']=');
        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

        var key, val;
        if (pos === -1) {
            key = options.decoder(part, defaults.decoder);
            val = options.strictNullHandling ? null : '';
        } else {
            key = options.decoder(part.slice(0, pos), defaults.decoder);
            val = options.decoder(part.slice(pos + 1), defaults.decoder);
        }
        if (has.call(obj, key)) {
            obj[key] = [].concat(obj[key]).concat(val);
        } else {
            obj[key] = val;
        }
    }

    return obj;
};

var parseObject = function parseObjectRecursive(chain, val, options) {
    if (!chain.length) {
        return val;
    }

    var root = chain.shift();

    var obj;
    if (root === '[]') {
        obj = [];
        obj = obj.concat(parseObject(chain, val, options));
    } else {
        obj = options.plainObjects ? Object.create(null) : {};
        var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
        var index = parseInt(cleanRoot, 10);
        if (
            !isNaN(index)
            && root !== cleanRoot
            && String(index) === cleanRoot
            && index >= 0
            && (options.parseArrays && index <= options.arrayLimit)
        ) {
            obj = [];
            obj[index] = parseObject(chain, val, options);
        } else {
            obj[cleanRoot] = parseObject(chain, val, options);
        }
    }

    return obj;
};

var parseKeys = function parseQueryStringKeys(givenKey, val, options) {
    if (!givenKey) {
        return;
    }

    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

    // The regex chunks

    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;

    // Get the parent

    var segment = brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;

    // Stash the parent if it exists

    var keys = [];
    if (parent) {
        // If we aren't using plain objects, optionally prefix keys
        // that would overwrite object prototype properties
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
            if (!options.allowPrototypes) {
                return;
            }
        }

        keys.push(parent);
    }

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while ((segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
            if (!options.allowPrototypes) {
                return;
            }
        }
        keys.push(segment[1]);
    }

    // If there's a remainder, just add whatever is left

    if (segment) {
        keys.push('[' + key.slice(segment.index) + ']');
    }

    return parseObject(keys, val, options);
};

module.exports = function (str, opts) {
    var options = opts ? utils.assign({}, opts) : {};

    if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {
        throw new TypeError('Decoder has to be a function.');
    }

    options.ignoreQueryPrefix = options.ignoreQueryPrefix === true;
    options.delimiter = typeof options.delimiter === 'string' || utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;
    options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;
    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;
    options.parseArrays = options.parseArrays !== false;
    options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;
    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;
    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;
    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;
    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;
    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;

    if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? Object.create(null) : {};
    }

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options);
        obj = utils.merge(obj, newObj, options);
    }

    return utils.compact(obj);
};

},{"./utils":19}],18:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var formats = require('./formats');

var arrayPrefixGenerators = {
    brackets: function brackets(prefix) { // eslint-disable-line func-name-matching
        return prefix + '[]';
    },
    indices: function indices(prefix, key) { // eslint-disable-line func-name-matching
        return prefix + '[' + key + ']';
    },
    repeat: function repeat(prefix) { // eslint-disable-line func-name-matching
        return prefix;
    }
};

var toISO = Date.prototype.toISOString;

var defaults = {
    delimiter: '&',
    encode: true,
    encoder: utils.encode,
    encodeValuesOnly: false,
    serializeDate: function serializeDate(date) { // eslint-disable-line func-name-matching
        return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
};

var stringify = function stringify( // eslint-disable-line func-name-matching
    object,
    prefix,
    generateArrayPrefix,
    strictNullHandling,
    skipNulls,
    encoder,
    filter,
    sort,
    allowDots,
    serializeDate,
    formatter,
    encodeValuesOnly
) {
    var obj = object;
    if (typeof filter === 'function') {
        obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
        obj = serializeDate(obj);
    } else if (obj === null) {
        if (strictNullHandling) {
            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder) : prefix;
        }

        obj = '';
    }

    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils.isBuffer(obj)) {
        if (encoder) {
            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder);
            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder))];
        }
        return [formatter(prefix) + '=' + formatter(String(obj))];
    }

    var values = [];

    if (typeof obj === 'undefined') {
        return values;
    }

    var objKeys;
    if (Array.isArray(filter)) {
        objKeys = filter;
    } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    }

    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) {
            continue;
        }

        if (Array.isArray(obj)) {
            values = values.concat(stringify(
                obj[key],
                generateArrayPrefix(prefix, key),
                generateArrayPrefix,
                strictNullHandling,
                skipNulls,
                encoder,
                filter,
                sort,
                allowDots,
                serializeDate,
                formatter,
                encodeValuesOnly
            ));
        } else {
            values = values.concat(stringify(
                obj[key],
                prefix + (allowDots ? '.' + key : '[' + key + ']'),
                generateArrayPrefix,
                strictNullHandling,
                skipNulls,
                encoder,
                filter,
                sort,
                allowDots,
                serializeDate,
                formatter,
                encodeValuesOnly
            ));
        }
    }

    return values;
};

module.exports = function (object, opts) {
    var obj = object;
    var options = opts ? utils.assign({}, opts) : {};

    if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
    }

    var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
    var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
    var encoder = typeof options.encoder === 'function' ? options.encoder : defaults.encoder;
    var sort = typeof options.sort === 'function' ? options.sort : null;
    var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
    var serializeDate = typeof options.serializeDate === 'function' ? options.serializeDate : defaults.serializeDate;
    var encodeValuesOnly = typeof options.encodeValuesOnly === 'boolean' ? options.encodeValuesOnly : defaults.encodeValuesOnly;
    if (typeof options.format === 'undefined') {
        options.format = formats.default;
    } else if (!Object.prototype.hasOwnProperty.call(formats.formatters, options.format)) {
        throw new TypeError('Unknown format option provided.');
    }
    var formatter = formats.formatters[options.format];
    var objKeys;
    var filter;

    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    } else if (Array.isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
    }

    var keys = [];

    if (typeof obj !== 'object' || obj === null) {
        return '';
    }

    var arrayFormat;
    if (options.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = options.arrayFormat;
    } else if ('indices' in options) {
        arrayFormat = options.indices ? 'indices' : 'repeat';
    } else {
        arrayFormat = 'indices';
    }

    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

    if (!objKeys) {
        objKeys = Object.keys(obj);
    }

    if (sort) {
        objKeys.sort(sort);
    }

    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) {
            continue;
        }

        keys = keys.concat(stringify(
            obj[key],
            key,
            generateArrayPrefix,
            strictNullHandling,
            skipNulls,
            encode ? encoder : null,
            filter,
            sort,
            allowDots,
            serializeDate,
            formatter,
            encodeValuesOnly
        ));
    }

    var joined = keys.join(delimiter);
    var prefix = options.addQueryPrefix === true ? '?' : '';

    return joined.length > 0 ? prefix + joined : '';
};

},{"./formats":15,"./utils":19}],19:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty;

var hexTable = (function () {
    var array = [];
    for (var i = 0; i < 256; ++i) {
        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    }

    return array;
}());

exports.arrayToObject = function (source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== 'undefined') {
            obj[i] = source[i];
        }
    }

    return obj;
};

exports.merge = function (target, source, options) {
    if (!source) {
        return target;
    }

    if (typeof source !== 'object') {
        if (Array.isArray(target)) {
            target.push(source);
        } else if (typeof target === 'object') {
            if (options.plainObjects || options.allowPrototypes || !has.call(Object.prototype, source)) {
                target[source] = true;
            }
        } else {
            return [target, source];
        }

        return target;
    }

    if (typeof target !== 'object') {
        return [target].concat(source);
    }

    var mergeTarget = target;
    if (Array.isArray(target) && !Array.isArray(source)) {
        mergeTarget = exports.arrayToObject(target, options);
    }

    if (Array.isArray(target) && Array.isArray(source)) {
        source.forEach(function (item, i) {
            if (has.call(target, i)) {
                if (target[i] && typeof target[i] === 'object') {
                    target[i] = exports.merge(target[i], item, options);
                } else {
                    target.push(item);
                }
            } else {
                target[i] = item;
            }
        });
        return target;
    }

    return Object.keys(source).reduce(function (acc, key) {
        var value = source[key];

        if (has.call(acc, key)) {
            acc[key] = exports.merge(acc[key], value, options);
        } else {
            acc[key] = value;
        }
        return acc;
    }, mergeTarget);
};

exports.assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function (acc, key) {
        acc[key] = source[key];
        return acc;
    }, target);
};

exports.decode = function (str) {
    try {
        return decodeURIComponent(str.replace(/\+/g, ' '));
    } catch (e) {
        return str;
    }
};

exports.encode = function (str) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) {
        return str;
    }

    var string = typeof str === 'string' ? str : String(str);

    var out = '';
    for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);

        if (
            c === 0x2D    // -
            || c === 0x2E // .
            || c === 0x5F // _
            || c === 0x7E // ~
            || (c >= 0x30 && c <= 0x39) // 0-9
            || (c >= 0x41 && c <= 0x5A) // a-z
            || (c >= 0x61 && c <= 0x7A) // A-Z
        ) {
            out += string.charAt(i);
            continue;
        }

        if (c < 0x80) {
            out = out + hexTable[c];
            continue;
        }

        if (c < 0x800) {
            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }

        if (c < 0xD800 || c >= 0xE000) {
            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }

        i += 1;
        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
        out += hexTable[0xF0 | (c >> 18)]
            + hexTable[0x80 | ((c >> 12) & 0x3F)]
            + hexTable[0x80 | ((c >> 6) & 0x3F)]
            + hexTable[0x80 | (c & 0x3F)];
    }

    return out;
};

exports.compact = function (obj, references) {
    if (typeof obj !== 'object' || obj === null) {
        return obj;
    }

    var refs = references || [];
    var lookup = refs.indexOf(obj);
    if (lookup !== -1) {
        return refs[lookup];
    }

    refs.push(obj);

    if (Array.isArray(obj)) {
        var compacted = [];

        for (var i = 0; i < obj.length; ++i) {
            if (obj[i] && typeof obj[i] === 'object') {
                compacted.push(exports.compact(obj[i], refs));
            } else if (typeof obj[i] !== 'undefined') {
                compacted.push(obj[i]);
            }
        }

        return compacted;
    }

    var keys = Object.keys(obj);
    keys.forEach(function (key) {
        obj[key] = exports.compact(obj[key], refs);
    });

    return obj;
};

exports.isRegExp = function (obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
};

exports.isBuffer = function (obj) {
    if (obj === null || typeof obj === 'undefined') {
        return false;
    }

    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};

},{}],20:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],21:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],22:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":20,"./encode":21}],23:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var punycode = require('punycode');
var util = require('./util');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

},{"./util":24,"punycode":14,"querystring":22}],24:[function(require,module,exports){
'use strict';

module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};

},{}],25:[function(require,module,exports){
'use strict';
var ValidationRules = function(){};
ValidationRules.prototype.guestOrderFormRules = function() {
    var obj = {
        rules: {
            "dwfrm_guestorderhistory_orderNumber": {
                required: true,
                number: true
            },
            "dwfrm_guestorderhistory_orderEmail": {
                email: true,
                required: true
            },
            "dwfrm_guestorderhistory_postalCode": {
                required: true,
                number: true,
                minlength: 5,
                maxlength: 15
            }

        },
        messages: {
            "dwfrm_guestorderhistory_orderEmail": {
                required: Resources.VALIDATE_EMAIL,
                email: Resources.VALIDATE_EMAIL
            },
            "dwfrm_guestorderhistory_postalCode": {
                required: Resources.VALIDATE_POSTAL,
                number: Resources.VALIDATE_POSTAL,
                minlength: Resources.VALIDATE_POSTAL,
                maxlength: Resources.VALIDATE_POSTAL
            },
            "dwfrm_guestorderhistory_orderNumber": {
                required: Resources.VALIDATE_ORDERNUMBER,
                number: Resources.VALIDATE_ORDERNUMBER
            }
        },
        errorClass : 'error',
        errorElement : 'span',
        ignore: ":hidden:not(.replaced)",
        onkeyup : false,
        onfocusout : function (element) {
            if(!this.checkable(element)) {
                this.element(element);
            }
        },
        highlight : function(element, errorClass, validClass) {
            if (element.type === 'radio') {
                this.findByName(element.name).addClass(errorClass).removeClass(validClass);
            } else {
                $(element).addClass(errorClass).removeClass(validClass);
                if(element.type === 'select-one'){
                    var $element = $(element);
                    if($element.attr('id') && $element.hasClass('replaced')){
                        var selectBox = $('#' + $element.attr('id') + 'SelectBoxItContainer');
                        if(selectBox){
                            selectBox.addClass(errorClass).removeClass(validClass);
                        }
                    }
                }
            }
        },
        unhighlight : function(element, errorClass, validClass) {
            if (element.type === 'radio') {
                this.findByName(element.name).removeClass(errorClass).addClass(validClass);
            } else {
                $(element).removeClass(errorClass).addClass(validClass);
                if(element.type === 'select-one'){
                    var $element = $(element);
                    if($element.attr('id') && $element.hasClass('replaced')){
                        var selectBox = $('#' + $element.attr('id') + 'SelectBoxItContainer');
                        if(selectBox){
                            selectBox.removeClass(errorClass).addClass(validClass);
                        }
                    }
                }
            }
        },
        showErrors: function (errorMap, errorList) {
            this.defaultShowErrors();
        }
    }
    
    return obj;
}
module.exports = ValidationRules;

},{}],26:[function(require,module,exports){
'use strict';

var progress = require('./progress'),
    util = require('./util');

var currentRequests = [];

/**
 * @function
 * @description Ajax request to get json response
 * @param {Boolean} async  Asynchronous or not
 * @param {String} url URI for the request
 * @param {Object} data Name/Value pair data request
 * @param {Function} callback  Callback function to be called
 */
var getJson = function (options) {
    options.url = util.toAbsoluteUrl(options.url);
    // return if no url exists or url matches a current request
    if (!options.url || currentRequests[options.url]) {
        return;
    }

    currentRequests[options.url] = true;

    // make the server call
    $.ajax({
        dataType: 'json',
        url: options.url,
        async: (typeof options.async === 'undefined' || options.async === null) ? true : options.async,
        data: options.data || {}
    })
    // success
    .done(function (response) {
        if (options.callback) {
            options.callback(response);
        }
    })
    // failed
    .fail(function (xhr, textStatus) {
        if (textStatus === 'parsererror') {
        }
        if (options.callback) {
            options.callback(null);
        }
    })
    // executed on success or fail
    .always(function () {
        // remove current request from hash
        if (currentRequests[options.url]) {
            delete currentRequests[options.url];
        }
    });
};
/**
 * @function
 * @description ajax request to load html response in a given container
 * @param {String} url URI for the request
 * @param {Object} data Name/Value pair data request
 * @param {Function} callback  Callback function to be called
 * @param {Object} target Selector or element that will receive content
 */
var load = function (options) {
    options.url = util.toAbsoluteUrl(options.url);
    // return if no url exists or url matches a current request
    if (!options.url || currentRequests[options.url]) {
        return;
    }

    currentRequests[options.url] = true;

    // make the server call
    $.ajax({
        dataType: 'html',
        url: util.appendParamToURL(options.url, 'format', 'ajax'),
        data: options.data,
        xhrFields: {
            withCredentials: true
        }
    })
    .done(function (response) {
        // success
        if (options.target) {
            $(options.target).empty().html(response);
        }
        if (options.callback) {
            options.callback(response);
        }
    })
    .fail(function (xhr, textStatus) {
        // failed
        if (textStatus === 'parsererror') {
        }
        options.callback(null, textStatus);
    })
    .always(function () {
        progress.hide();
        // remove current request from hash
        if (currentRequests[options.url]) {
            delete currentRequests[options.url];
        }
    });
};

exports.getJson = getJson;
exports.load = load;

},{"./progress":68,"./util":82}],27:[function(require,module,exports){
/**
 *    (c) 2009-2014 Demandware Inc.
 *    Subject to standard usage terms and conditions
 *    For all details and documentation:
 *    https://bitbucket.com/demandware/sitegenesis
 */

'use strict';

// if jQuery has not been loaded, load from google cdn
if (!window.jQuery) {
    var s = document.createElement('script');
    s.setAttribute('src', 'https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js');
    s.setAttribute('type', 'text/javascript');
    document.getElementsByTagName('head')[0].appendChild(s);
}

require('./jquery-ext')();
require('./cookieprivacy')();
require('./captcha')();
var util = require('./util');
var ValidationRules = require('./ValidationRules');

function initializeEvents() {
    var controlKeys = ['8', '13', '46', '45', '36', '35', '38', '37', '40', '39'];

    window.addEventListener('orientationchange', function() {
	  document.getElementById('wrapper').classList.remove('menu-active')
	  document.getElementsByTagName('body')[0].classList.remove('menu-active')
	})
    
    $("body").on("click", ".dialogify, [data-dlg-options], [data-dlg-action]", app.util.setDialogify);
    $('body')
        .on('keydown', 'textarea[data-character-limit]', function (e) {
            var text = $.trim($(this).val()),
                charsLimit = $(this).data('character-limit'),
                charsUsed = text.length;

            if ((charsUsed >= charsLimit) && (controlKeys.indexOf(e.which.toString()) < 0)) {
                e.preventDefault();
            }
        }).on('click','#BVRRRatingSummaryLinkReadID', function(e){
            e.preventDefault();
            $(this).find('a').toggleClass('active').removeAttr('onclick');
            $('#BVRRDisplayContentID').toggleClass('open');

        })
        .on('change keyup mouseup', 'textarea[data-character-limit]', function () {
            var text = $.trim($(this).val()),
                charsLimit = $(this).data('character-limit'),
                charsUsed = text.length,
                charsRemain = charsLimit - charsUsed;

            if (charsRemain < 0) {
                $(this).val(text.slice(0, charsRemain));
                charsRemain = 0;
            }

            $(this).next('div.char-count').find('.char-remain-count').html(charsRemain);
        })
        .on('change', '#registry-search-container select', function (){
        	if ($(this).val()) {
        		$(this).parent().addClass('selected');
        	} else {
        		$(this).parent().removeClass('selected');
        	}
        });

    /**
     * initialize search suggestions, pending the value of the site preference(enhancedSearchSuggestions)
     * this will either init the legacy(false) or the beta versions(true) of the the search suggest feature.
     * */
    var $searchContainer = $('#navigation .header-search');
    searchsuggest.init($searchContainer, Resources.SIMPLE_SEARCH);
    var $searchContainerMobile = $('#navigation .header-search-mobile');
    var $mobileSearchInput = $searchContainerMobile.find('#q');
    var $mobileSearchInputPlaceholder = $mobileSearchInput.attr('placeholder');
    searchsuggest.init($searchContainerMobile, Resources.SIMPLE_SEARCH);
    
    $mobileSearchInput.blur(function(){
    	if($(this).attr('placeholder') == ''){
    		$(this).attr('placeholder',$mobileSearchInputPlaceholder);
    	}
	});
    
    $mobileSearchInput.focus(function(){
		$(this).attr('placeholder','');
	});
    // add show/hide navigation elements
    $('.secondary-navigation .toggle').click(function () {
        $(this).toggleClass('open').next('div').slideToggle({'duration': 200,'easing':'linear'});
    });

    $('.mobile-account-nav .secondary-navigation .nav-header').click(function (e) {
         e.preventDefault();
         $(this).toggleClass('expanded').next('ul').toggle();
     });

    $('.account-nav-asset .help-nav-header, .customer-service-mobile-nav-asset .help-nav-header').click(function (e) {
        e.preventDefault();
        if(window.innerWidth < 959){
            $(this).toggleClass('expanded').next('.account-help-nav-content').toggle();
        }
    });

    /* drawer toggle functionality */
    $('.drawer label').on('click', function(e) {
        var drawer = $(this).closest('.drawer');
        drawer.toggleClass('open');
        drawer.find('.drawer-content').slideToggle();
    });
    $('.select-shipping-method input[type="radio"]').on('change', function (e) {
    	$('.select-shipping-method .form-row').removeClass('radio-button-selected');
    	$(this).parent().addClass('radio-button-selected');
    });

    // add generic toggle functionality
    $('.toggle').next('.toggle-content').hide();
    $('.toggle').click(function (e) {
        e.preventDefault();
        if(!($(this).parent('.secondary-navigation').length)){
            e.preventDefault();
            $(this).toggleClass('expanded').next('.toggle-content').toggle();
        }
    });

    // Customer service mobile navigation
    var customerServiceActiveLink = $('.pt_customer-service .secondary-navigation a.active-link');
    var customerServicdeMobileNav = $('.pt_customer-service .customer-service-mobile-nav');
    if (customerServiceActiveLink.length) {
        var toggleLink = customerServiceActiveLink.clone();
        customerServicdeMobileNav.find('.customer-service-mobile-nav-toggle')
            .empty()
            .append(toggleLink);
        customerServiceActiveLink.parent('.content')
            .children()
            .clone()
            .appendTo(customerServicdeMobileNav.find('.customer-service-mobile-nav-items'));
    } else if (customerServicdeMobileNav.length) {
        customerServicdeMobileNav.find('.customer-service-mobile-nav-dropdown').hide();
    }

    $('.pt_customer-service .customer-service-mobile-nav-toggle').on('click', function(e) {
        e.preventDefault();
        $(this).toggleClass('expanded')
            .next('.customer-service-mobile-nav-items')
            .toggle();
    });

    // subscribe email box
    var $subscribeEmail = $('.subscribe-email');
    if ($subscribeEmail.length > 0)    {
        $subscribeEmail.focus(function () {
            var val = $(this.val());
            if (val.length > 0 && val !== Resources.SUBSCRIBE_EMAIL_DEFAULT) {
                return; // do not animate when contains non-default value
            }

            $(this).animate({color: '#999999'}, 500, 'linear', function () {
                $(this).val('').css('color', '#333333');
            });
        }).blur(function () {
            var val = $.trim($(this.val()));
            if (val.length > 0) {
                return; // do not animate when contains value
            }
            $(this).val(Resources.SUBSCRIBE_EMAIL_DEFAULT)
                .css('color', '#999999')
                .animate({color: '#333333'}, 500, 'linear');
        });
    }

    $('.privacy-policy').on('click', function (e) {
        e.preventDefault();
        var width;
        var $body = $('body');
        if ($body.width() < 960) {
            width = $body.width() - 40;
        } else {
            width = 800;
        }
        dialog.open({
            url: $(e.target).attr('href'),
            options: {
            	dialogClass: 'privacy-policy-dialog',
                height: 600,
                width: width
            }
        });
    });
    $('.header-help-span').on('click', function (e) {
        e.preventDefault();
        dialog.open({
            url: $(e.target).attr('href'),
            width: 375,
            options: {
                width: 375,
                dialogClass: 'help-widget-katespade'
            },
            callback: function(){
                $('body').on('click', '.guest-order', function(){
                    dialog.close();
                    var url = $(this).attr('data-url');
                    $.ajax({
                        url: url + '?format=ajax',
                        success: function(d){
                          app.validator.init();
                          dialog.open({
                            url: url,
                            closeOnEscape: true,
                            options: {
                                width: 668,
                                position: { my: "center", at: "center", of: window },
                                dialogClass: 'popup-guesthistory'
                            },
                            callback: function(){
                                var validationRules = new ValidationRules();
                                $('#dwfrm_guesthistory').validate(validationRules.guestOrderFormRules());
                                floatlabels.init();
                            }
                          });
                        }
                    });
                })
            }
        });
    });

    // main menu toggle
    $('.menu-toggle').on('click', function () {
        $('#wrapper').toggleClass('menu-active');
        $('body').toggleClass('menu-active');
    });
    $('.navigation-overlay').on('click', function () {
        $('#wrapper').toggleClass('menu-active');
        $('body').toggleClass('menu-active');
    });
    $('.menu-category li .menu-item-toggle').on('click', function (e) {
        e.preventDefault();
        var $parentLi = $(e.target).closest('li');
        $parentLi.siblings('li').removeClass('active').find('.menu-item-toggle').removeClass('fa-minus active').addClass('fa-chevron-right');
        $parentLi.toggleClass('active');
        $(e.target).toggleClass('fa-chevron-right fa-minus active');
    });

    // main menu mobile focus on click
    $('.menu-category.level-1 .menu-item-toggle').on('click', function () {
        // Only run when a closed menu is opened
        if ($(this).hasClass('active')) {
            // Get the element offset from body and current navigation scroll position
            var pos = $(this).offset().top + $('#navigation').scrollTop();

            $('#navigation').animate({
                scrollTop: pos
            }, 500);
        }
    });

    // Account login / signup flyout

    var customerInfoUrl = Urls.includeHeaderCustomerInfo;
    var rightHeaderLinks = $('.right-header-links');
    var mobileSignIn = $('#mobile-signin');

    // Login touch event
    $('body').on('touchend', '.right-header-links .account-link > a' ,function(e){
        e.preventDefault();
        if (!$(this).hasClass('open')){
            $(this).addClass('open')
        } else {
            window.location = $(this).attr('href');
        }
    });

    // Account Protected Links
    $('.protected').on('click', function (e) {
        e.preventDefault();
        $('#top-banner-interior .account-link-login a.user-login-hopup').click();
    });

    // Dynamically pull Account Link into header via ajax to replace remote includes on header.isml
    app.ajax.load({
        url:customerInfoUrl,
        callback: function (url){
            rightHeaderLinks.find('.search-toggle').after(url);
            mobileSignIn.append(url);
            app.hopupRegisterLogin.init();
        }
    });

    app.hopupRegisterLogin = {
        showHopup : function(hopup){
            var target = $(hopup);
            var dlg;
            var width = (window.innerWidth < 708) ? (window.innerWidth - 40).toString() : '668';
            if ((window.innerWidth > 707) && (window.innerWidth < 960))
                width = '476'
            if ((hopup == "#popup-register" || hopup == "#popup-guesthistory") && target.length > 0) {
                // Hide other instances of the dialog
                dialog.close();
                // Display the target
                target.show();
                // Wrap target in ui-dialog div
                dlg = app.dialog.create({ "target" : target, "options" : {'width' : width, 'height' : 'auto', 'dialogClass' : 'create-account'} });
                // if dialog is open, return
                if(dlg.dialog("isOpen")) {return;}
                // else, show the dialog
                dlg.dialog("open");
                var topOffset = (window.innerWidth < 708) ? 50 : ((window.innerWidth - 708) / 2) + 50;
                if (topOffset > 100) {
                    topOffset = 100;
                }
                topOffset = $(window).scrollTop() + topOffset;
                floatlabels.init();
                $('.ui-dialog').css('top', topOffset.toString() + 'px');
            }
            else {
                target.slideDown();
            }

            // None HTML5 inputs
            var form = target.find('form#dwfrm_login');
            if(form.length){
                validator.init();
                //form.find('input[placeholder]').placeholder();
                
            }

            return false;
        },
        init : function(target){
            if (typeof target == 'undefined' || !target){
                target = $('body');
            }

            if (typeof target == 'string') {
                target = $(target);
            }

            // Trigger LOGIN/REGISTER button to show hopup on click by save for later login link
            $('html body').on('click', '.saveforlater-login', function (e) {
                e.preventDefault();
                // scroll to the top on mobile devices to be consistent
                if (window.innerWidth <= 960) {
                    window.scrollTo(0, 0);
                }
                $('.header-links .js-user-login-hopup-trigger').trigger('click');
            });

            // HEADER LOGIN/REGISTER BUTTONS CLICK
            target.find('a.user-login-hopup, a.user-register-hopup').on('click', function(e){
                e.preventDefault();
            	var link = $(this);
                var popup = link.attr('href');
                var show = function() {

                    // if clicked from hamburger nav
                    if (link.closest('#mobile-signin').length) {
                        $('#wrapper').toggleClass('menu-active');
                        $('body').toggleClass('menu-active');
                    }

                    // Show the hopup
                    app.hopupRegisterLogin.showHopup(popup);
                    login.init();
                };

                if ($(popup).length == 0){
                    var d = $('<div/>');
                    if (link.hasClass('user-login-hopup')) {
                        d.addClass('login-tray');
                        if (popup === '#popup-register' || popup === "#popup-guesthistory") {
                            d.hide();
                        }

                        var header = $('.top-banner');
                        header.before(d);

                        // check if login tray needs to be sticky on initial load
                        if (header.hasClass('sticky')) {
                            d.addClass('sticky');
                        }
                    }
                    else {
                        $('body').append(d);
                    }
                    app.ajax.load({url:link.data('url'), target:d, callback:function() {
                        app.hopupRegisterLogin.init(d);
                        d.find('.login-tray-close').on('click', function(e){
                            $(popup).slideUp();
                        });

                        //push account creation to dataLayer
                        $('#dwfrm_register').on('submit',function(){
                            if (typeof dataLayer !== "undefined") {
                                dataLayer.push(app.datalayer.getEvent("event", "account-creation", "type", "Kate Spade"));
                                var test = '';
                                //dataLayer.push({"event" : "account-creation", "type" : "Kate Spade" });

                                //push email signup to dataLayer
                                if ($("#dwfrm_profile_customer_addtoemaillist").is(":checked")) {
                                    dataLayer.push(app.datalayer.getEvent("event", "email-subscribe", "subscribeType", "accountCreate"));
                                    //dataLayer.push({"event" : "email-subscribe", "subscribeType": "accountCreate"});
                                }
                            }
                        });

                        function LookUpUserName(fieldId) {
                            /*
                                LookUpUserName
                                    1. Determines if a user already exists based on the the email address provided in the current field which is the only.
                                    2. #1 occurs via an AJAX call to the pipeline Account-LoginLookup utilizing the appresources.isml URL AccountLoginCheck (app.urls.AccountLoginCheck).
                                        - This pipeline will look on the HttpParameterMap for the passed email address coming from the current form.
                                        - It then checks if the customer exists via the GetCustomer pipelet.
                                        - IF the piplet does not return an error (this means the user exists), and errorjson.isml is returned within the response.
                                        - OTHERWISE, util/successjson is returned.
                            */

                            $('body').on('blur', fieldId ,function(){

                                // Get the email address field.
                                var emailAccountLookup = $(fieldId);


                                // Determine if the email address exists and has a minumum of three characters.
                                if (emailAccountLookup.length > 0  && emailAccountLookup.val().length > 3
                                    && $(fieldId).hasClass('valid')) {

                                    // Get the email address entered by the user.
                                    var emailToLookup = emailAccountLookup.val();

                                    // Get the Id of the DOM element emailAccountLookup.
                                    var emailAccountLookupID = emailAccountLookup.attr('id');

                                    // Add the user email address to the params object.
                                    // This will be sent as a query string param in the AJAX
                                    // call to follow.
                                    var params = {email : emailToLookup};

                                    app.ajax.getJson({
                                        async: true,
                                        url: Urls.AccountLoginCheck,
                                        data: params,
                                        callback: function (data) {
                                            if(data && data.success){
                                                // There exists a user with the supplied email address / username.



                                                // Create the necessary DOM elements / attribute for jQuery Validate purposes.
                                                emailAccountLookup.removeClass('valid');
                                                emailAccountLookup.addClass('error');
                                                emailAccountLookup.siblings('span')
                                                    .removeClass('valid')
                                                    .html(Resources.INVALID_USERNAMETAKEN);

                                                if($("#dwfrm_guesthistory").validate()) {
                                                    $("#dwfrm_guesthistory").validate().settings.ignore="*";
                                                }
                                                // Add the disabled attribute on the Submit button so the user
                                                // cannot submit since this user name / emaill address already exists.
                                                $("#dwfrm_register").find(".apply-button").prop('disabled', true);
                                            }
                                            else {
                                                // There DOES NOT exist a user with the supplied email address / username.

                                                // Remove error messaging
                                                emailAccountLookup.removeClass('error');
                                                emailAccountLookup.addClass('valid');
                                                emailAccountLookup.siblings('span').addClass('valid');

                                                // Remove the disabled attribute off of the submit button.
                                                $("#dwfrm_register").find(".apply-button").prop('disabled', false);
                                            }
                                        }
                                    });
                                }
                            });
                        }

                        var dateFields = ["#dwfrm_profile_customer_birthMonth", "#dwfrm_profile_customer_birthDay", "#dwfrm_profile_customer_birthYear"];
                        $('#dwfrm_register').validate({
                            groups: {
                                date: "dwfrm_profile_customer_birthMonth dwfrm_profile_customer_birthDay dwfrm_profile_customer_birthYear"
                            },
                            rules: {
                                "dwfrm_profile_customer_birthMonth": {
                                    multidate: dateFields
                                },
                                "dwfrm_profile_customer_birthDay": {
                                    multidate: dateFields
                                },
                                "dwfrm_profile_customer_birthYear": {
                                    multidate: dateFields
                                },
                                "dwfrm_profile_customer_emailconfirm": {
                                    equalTo: "#dwfrm_profile_customer_email"
                                },
                                "dwfrm_profile_login_password": {
                                    rangelength: [7, 20]
                                },
                                "dwfrm_profile_login_passwordconfirm": {
                                    equalTo: "#dwfrm_profile_login_password"
                                }
                            },
                            messages: {
                                "dwfrm_profile_customer_firstname": {
                                    required: Resources.MISSING_FIRST_NAME
                                },
                                "dwfrm_profile_customer_lastname": {
                                    required: Resources.MISSING_LAST_NAME
                                },
                                "dwfrm_profile_customer_email": {
                                    required: Resources.MISSING_EMAIL
                                },
                                "dwfrm_profile_customer_emailconfirm": {
                                    required: Resources.MISSING_EMAILCONFIRM,
                                    equalTo: Resources.VALIDATE_INVALID_EMAILMATCH
                                },
                                "dwfrm_profile_login_password": {
                                    required: Resources.MISSING_PASSWORD,
                                    rangelength: Resources.VALIDATE_RANGELENGTH
                                },
                                "dwfrm_profile_login_passwordconfirm": {
                                    required: Resources.MISSING_PASSWORDCONFIRM,
                                    equalTo: Resources.VALIDATE_INVALID_PASSMATCH
                                },
                                "dwfrm_profile_customer_zip": {
                                    required: Resources.MISSING_POSTAL
                                },
                                "dwfrm_profile_customer_birthMonth": {
                                    multidate: Resources.BIRTHDATE_INVALID
                                },
                                "dwfrm_profile_customer_birthDay": {
                                    multidate: Resources.BIRTHDATE_INVALID
                                },
                                "dwfrm_profile_customer_birthYear": {
                                    multidate: Resources.BIRTHDATE_INVALID
                                }
                            },
                            errorClass : 'error',
                            errorElement : 'span',
                            ignore: ":hidden:not(.replaced)",
                            onkeyup : false,
                            onfocusout : function (element) {
                                if(!this.checkable(element)) {
                                    this.element(element);
                                }
                            },
                            highlight : function(element, errorClass, validClass) {
                                if (element.type === 'radio') {
                                    this.findByName(element.name).addClass(errorClass).removeClass(validClass);
                                } else {
                                    $(element).addClass(errorClass).removeClass(validClass);
                                    if(element.type === 'select-one'){
                                        var $element = $(element);
                                        if($element.attr('id') && $element.hasClass('replaced')){
                                            var selectBox = $('#' + $element.attr('id') + 'SelectBoxItContainer');
                                            if(selectBox){
                                                selectBox.addClass(errorClass).removeClass(validClass);
                                            }
                                        }
                                    }
                                }
                                if ($(element).attr('id') === "dwfrm_profile_customer_birthMonth"
                                        || $(element).attr('id') === "dwfrm_profile_customer_birthDay"
                                        || $(element).attr('id') === "dwfrm_profile_customer_birthYear") {
                                    $(dateFields[0]).removeClass(errorClass);
                                    $(dateFields[1]).removeClass(errorClass);
                                    $(dateFields[2]).removeClass(errorClass);
                                    $("#errors").empty();
                                }
                            },
                            unhighlight : function(element, errorClass, validClass) {
                                if (element.type === 'radio') {
                                    this.findByName(element.name).removeClass(errorClass).addClass(validClass);
                                } else {
                                    $(element).removeClass(errorClass).addClass(validClass);
                                    if(element.type === 'select-one'){
                                        var $element = $(element);
                                        if($element.attr('id') && $element.hasClass('replaced')){
                                            var selectBox = $('#' + $element.attr('id') + 'SelectBoxItContainer');
                                            if(selectBox){
                                                selectBox.removeClass(errorClass).addClass(validClass);
                                            }
                                        }
                                    }
                                }
                                if ($(element).attr('id') === "dwfrm_profile_customer_birthMonth"
                                        || $(element).attr('id') === "dwfrm_profile_customer_birthDay"
                                        || $(element).attr('id') === "dwfrm_profile_customer_birthYear") {
                                    $(dateFields[0]).removeClass(errorClass);
                                    $(dateFields[1]).removeClass(errorClass);
                                    $(dateFields[2]).removeClass(errorClass);
                                    $("#errors").empty();
                                }
                            },
                            showErrors: function (errorMap, errorList) {
                                this.defaultShowErrors();

                                var birthdateError = "";
                                if (errorMap.hasOwnProperty("dwfrm_profile_customer_birthMonth")) {
                                    birthdateError = errorMap["dwfrm_profile_customer_birthMonth"];
                                } else if (errorMap.hasOwnProperty("dwfrm_profile_customer_birthDay")) {
                                    birthdateError = errorMap["dwfrm_profile_customer_birthDay"];
                                } else if (errorMap.hasOwnProperty("dwfrm_profile_customer_birthYear")) {
                                    birthdateError = errorMap["dwfrm_profile_customer_birthYear"];
                                }

                                if (birthdateError != "") {
                                    $("#errors").html('<span class="error" generated="true" for="date">' + birthdateError + '</span>');
                                    $(dateFields[0]).addClass("error");
                                    $(dateFields[1]).addClass("error");
                                    $(dateFields[2]).addClass("error");
                                }
                            },
                            submitHandler: function(form) {
                                if (($(dateFields[0]).val() == "" && $(dateFields[1]).val() == "" && $(dateFields[2]).val() == "") ||
                                        ($(dateFields[0]).val() != "" && $(dateFields[1]).val() != "" && $(dateFields[2]).val() != "")) {
                                    form.submit();
                                } else {
                                    // User has put in only a partial birthdate and we should error
                                    $("#errors").html('<span class="error" generated="true" for="date">' + Resources.BIRTHDATE_INVALID + '</span>');
                                    $(dateFields[0]).addClass("error");
                                    $(dateFields[1]).addClass("error");
                                    $(dateFields[2]).addClass("error");
                                }
                            }
                        });

                        // Inititialize the look up username for the form with ID dwfrm_profile_customer_email
                        LookUpUserName("#dwfrm_profile_customer_email");

                        $('#dwfrm_guesthistory').validate({

                            rules: {
                                "dwfrm_guestorderhistory_orderNumber": {
                                    required: true,
                                    number: true
                                },
                                "dwfrm_guestorderhistory_orderEmail": {
                                    email: true,
                                    required: true
                                },
                                "dwfrm_guestorderhistory_postalCode": {
                                    required: true,
                                    minlength: 5
                                }

                            },
                            messages: {
                                "dwfrm_guestorderhistory_orderEmail": {
                                    required: Resources.VALIDATE_EMAIL,
                                    email: Resources.VALIDATE_EMAIL
                                },
                                "dwfrm_guestorderhistory_postalCode": {
                                    required: Resources.VALIDATE_POSTAL,
                                    minlength: Resources.VALIDATE_POSTAL
                                },
                                "dwfrm_guestorderhistory_orderNumber": {
                                    required: Resources.VALIDATE_ORDERNUMBER,
                                    number: Resources.VALIDATE_ORDERNUMBER
                                }
                            },
                            errorClass : 'error',
                            errorElement : 'span',
                            ignore: ":hidden:not(.replaced)",
                            onkeyup : false,
                            onfocusout : function (element) {
                                if(!this.checkable(element)) {
                                    this.element(element);
                                }
                            },
                            highlight : function(element, errorClass, validClass) {
                                if (element.type === 'radio') {
                                    this.findByName(element.name).addClass(errorClass).removeClass(validClass);
                                } else {
                                    $(element).addClass(errorClass).removeClass(validClass);
                                    if(element.type === 'select-one'){
                                        var $element = $(element);
                                        if($element.attr('id') && $element.hasClass('replaced')){
                                            var selectBox = $('#' + $element.attr('id') + 'SelectBoxItContainer');
                                            if(selectBox){
                                                selectBox.addClass(errorClass).removeClass(validClass);
                                            }
                                        }
                                    }
                                }
                            },
                            unhighlight : function(element, errorClass, validClass) {
                                if (element.type === 'radio') {
                                    this.findByName(element.name).removeClass(errorClass).addClass(validClass);
                                } else {
                                    $(element).removeClass(errorClass).addClass(validClass);
                                    if(element.type === 'select-one'){
                                        var $element = $(element);
                                        if($element.attr('id') && $element.hasClass('replaced')){
                                            var selectBox = $('#' + $element.attr('id') + 'SelectBoxItContainer');
                                            if(selectBox){
                                                selectBox.removeClass(errorClass).addClass(validClass);
                                            }
                                        }
                                    }
                                }
                            },
                            showErrors: function (errorMap, errorList) {
                                this.defaultShowErrors();
                            }
                        });
                        show();
                    }});
                        checkStaticHeader();
                }else {
                    show();
                }
            });

            // if we are on the registration failure page, we are not in a hopup and need to set up validation differently
            if ($("#registrationFailureForm").length !== 0) {
                var dateFields = ["#dwfrm_profile_customer_birthMonth", "#dwfrm_profile_customer_birthDay", "#dwfrm_profile_customer_birthYear"];
                $('#dwfrm_register').validate({
                    groups: {
                        date: "dwfrm_profile_customer_birthMonth dwfrm_profile_customer_birthDay dwfrm_profile_customer_birthYear"
                    },
                    rules: {
                        "dwfrm_profile_customer_birthMonth": {
                            multidate: dateFields
                        },
                        "dwfrm_profile_customer_birthDay": {
                            multidate: dateFields
                        },
                        "dwfrm_profile_customer_birthYear": {
                            multidate: dateFields
                        }
                    },
                    messages: {
                        "dwfrm_profile_customer_firstname": {
                            required: Resources.MISSING_FIRST_NAME
                        },
                        "dwfrm_profile_customer_lastname": {
                            required: Resources.MISSING_LAST_NAME
                        },
                        "dwfrm_profile_customer_email": {
                            required: Resources.MISSING_EMAIL
                        },
                        "dwfrm_profile_customer_emailconfirm": {
                            required: Resources.MISSING_EMAILCONFIRM
                        },
                        "dwfrm_profile_login_password": {
                            required: Resources.MISSING_PASSWORD
                        },
                        "dwfrm_profile_login_passwordconfirm": {
                            required: Resources.MISSING_PASSWORDCONFIRM
                        },
                        "dwfrm_profile_customer_zip": {
                            required: Resources.MISSING_POSTAL
                        },
                        "dwfrm_profile_customer_birthMonth": {
                            multidate: Resources.BIRTHDATE_INVALID
                        },
                        "dwfrm_profile_customer_birthDay": {
                            multidate: Resources.BIRTHDATE_INVALID
                        },
                        "dwfrm_profile_customer_birthYear": {
                            multidate: Resources.BIRTHDATE_INVALID
                        }
                    },
                    errorClass : 'error',
                    errorElement : 'span',
                    ignore: ":hidden:not(.replaced)",
                    onkeyup : false,
                    onfocusout : function (element) {
                        if(!this.checkable(element)) {
                            this.element(element);
                        }
                    },
                    highlight : function(element, errorClass, validClass) {
                        if (element.type === 'radio') {
                            this.findByName(element.name).addClass(errorClass).removeClass(validClass);
                        } else {
                            $(element).addClass(errorClass).removeClass(validClass);
                            if(element.type === 'select-one'){
                                var $element = $(element);
                                if($element.attr('id') && $element.hasClass('replaced')){
                                    var selectBox = $('#' + $element.attr('id') + 'SelectBoxItContainer');
                                    if(selectBox){
                                        selectBox.addClass(errorClass).removeClass(validClass);
                                    }
                                }
                            }
                        }
                        if ($(element).attr('id') === "dwfrm_profile_customer_birthMonth"
                                || $(element).attr('id') === "dwfrm_profile_customer_birthDay"
                                || $(element).attr('id') === "dwfrm_profile_customer_birthYear") {
                            $(dateFields[0]).removeClass(errorClass);
                            $(dateFields[1]).removeClass(errorClass);
                            $(dateFields[2]).removeClass(errorClass);
                            $("#errors").empty();
                        }
                    },
                    unhighlight : function(element, errorClass, validClass) {
                        if (element.type === 'radio') {
                            this.findByName(element.name).removeClass(errorClass).addClass(validClass);
                        } else {
                            $(element).removeClass(errorClass).addClass(validClass);
                            if(element.type === 'select-one'){
                                var $element = $(element);
                                if($element.attr('id') && $element.hasClass('replaced')){
                                    var selectBox = $('#' + $element.attr('id') + 'SelectBoxItContainer');
                                    if(selectBox){
                                        selectBox.removeClass(errorClass).addClass(validClass);
                                    }
                                }
                            }
                        }
                        if ($(element).attr('id') === "dwfrm_profile_customer_birthMonth"
                                || $(element).attr('id') === "dwfrm_profile_customer_birthDay"
                                || $(element).attr('id') === "dwfrm_profile_customer_birthYear") {
                            $(dateFields[0]).removeClass(errorClass);
                            $(dateFields[1]).removeClass(errorClass);
                            $(dateFields[2]).removeClass(errorClass);
                            $("#errors").empty();
                        }
                    },
                    showErrors: function (errorMap, errorList) {
                        this.defaultShowErrors();

                        var birthdateError = "";
                        if (errorMap.hasOwnProperty("dwfrm_profile_customer_birthMonth")) {
                            birthdateError = errorMap["dwfrm_profile_customer_birthMonth"];
                        } else if (errorMap.hasOwnProperty("dwfrm_profile_customer_birthDay")) {
                            birthdateError = errorMap["dwfrm_profile_customer_birthDay"];
                        } else if (errorMap.hasOwnProperty("dwfrm_profile_customer_birthYear")) {
                            birthdateError = errorMap["dwfrm_profile_customer_birthYear"];
                        }

                        if (birthdateError != "") {
                            $("#errors").html('<span class="error" generated="true" for="date">' + birthdateError + '</span>');
                            $(dateFields[0]).addClass("error");
                            $(dateFields[1]).addClass("error");
                            $(dateFields[2]).addClass("error");
                        }
                    },
                    submitHandler: function(form) {
                        if (($(dateFields[0]).val() == "" && $(dateFields[1]).val() == "" && $(dateFields[2]).val() == "") ||
                                ($(dateFields[0]).val() != "" && $(dateFields[1]).val() != "" && $(dateFields[2]).val() != "")) {
                            form.submit();
                        } else {
                            // User has put in only a partial birthdate and we should error
                            $("#errors").html('<span class="error" generated="true" for="date">' + Resources.BIRTHDATE_INVALID + '</span>');
                            $(dateFields[0]).addClass("error");
                            $(dateFields[1]).addClass("error");
                            $(dateFields[2]).addClass("error");
                        }
                    }
                });
            }

            // HOOK VALIDATION FOR THE HOPUP FORM
            app.util.validateHook('#popup-register .apply-button');
            app.util.validateHook('#popup-guesthistory .apply-button');
            app.util.validateHook('#popup-login .apply-button');
        }
    }

    $(window).scroll(function(){
        checkStaticHeader();
    });

    $(window).resize(function(){
        var viewportWidth = $(window).width();
        var header = $('.top-banner');

        if ($('.ui-dialog').length) {
            setTimeout(function () {
                if (!$('.ui-dialog').is('.store-pickup-dialog, .ui-dialog_quick-view')) {
                    var width = (viewportWidth < 708) ? (viewportWidth - 40).toString() : '668';
                    var topOffset = (viewportWidth < 708) ? 50 : ((viewportWidth - 708) / 2) + 50;
                }
                else if ($('.ui-dialog').is('.ui-dialog_quick-view')) {
                    var width = (viewportWidth > 960) ? '820' : '720';
                    if (viewportWidth <= 768) {
                        width = (viewportWidth < 669) ? (viewportWidth).toString() : '668';
                    }
                }
                else if (!$('.ui-dialog').is('.ui-front.create-account')) {
                    var width = (viewportWidth < 669) ? (viewportWidth).toString() : '668';
                    var topOffset = (viewportWidth < 708) ? 61 : ((viewportWidth - 708) / 2) + 61;
                }
                var left = (viewportWidth - width) / 2;

                if (topOffset > 100) {
                    topOffset = 100;
                }
                topOffset = $(window).scrollTop() + topOffset;
                $('.ui-dialog').css('width', width);
                $('.ui-dialog').css('left', left);
                $('.ui-dialog').css('top', topOffset.toString() + 'px');
            }, 500);
        }

        setTimeout(function () {
            checkStaticHeader();
            if (viewportWidth < 960) {
                moveSearch($('nav').find('.search-toggle'), $('.right-header-links').find('.search-toggle'), true);
            } else {
                if (!header.hasClass('sticky')) {
                    moveSearch($('.right-header-links').find('.search-toggle'), $('nav').find('.search-toggle'), false);
                }
            }
        }, 500);

    	alignNavContent();
    });

    $('.search-toggle').find('a').on('click', function(e) {
        e.preventDefault();
        $('.search-toggle').toggleClass('active');
        $('.header-search').toggleClass('search-hidden');
        $('.search-toggle .header-search').find('#q').focus().removeClass('error');
    });
    $('.search-toggle').find('.close-search').on('click', function() {

        $('.search-toggle').toggleClass('active');
        $('.header-search').toggleClass('search-hidden');
    });
    $('.submit-search').on('click', function() {
        var searchValue = $('.submit-search').parent.find('#q');
        if (searchValue.val() == '') {
            searchValue.addClass('empty');
        }
    });
    $('nav[role="navigation"] .menu-category.level-1 > li a.has-sub-menu').on('mouseover', function() {
        $('.search-toggle').removeClass('active');
        $('.header-search').addClass('search-hidden');
        $('.search-toggle .header-search').find('#q').blur();

        // handle sticky nav positioning
        var width = window.innerWidth;
        var subNav = $(this).next('div.level-2');
    	var offset = $('#navigation').offset();

        if (width > 960 && $('.top-banner.sticky').is(':visible')) {
        	subNav.css({
        		'width': width,
        		'left': -offset.left,
        		'text-align': 'center'
        	});
        } else {
        	subNav.removeAttr('style');
    		alignNavContent(subNav);
        }
    });
    
    /* mimic placeholder behaviour */
    $('.search-toggle .header-search').find('.search-placeholder').on('mousedown touchstart', function(e) {
        var $q = $('.search-toggle .header-search').find('#q');
    	e.preventDefault();
    	if (!$q.is(':focus')) {
    		$q.focus();
    	}
    });
    $('.search-toggle .header-search').find('#q').on('input', function(e) {
        var $this = $(this);
        if ($this.val().length > 0) {
            $('.search-toggle .header-search .search-placeholder').addClass('hide');
        } else {
            $('.search-toggle .header-search .search-placeholder').removeClass('hide');
        }
    });

    // Back to top and chat buttons on product search results page
    var offset = 50;
    var duration = 300;

    $(window).scroll(function() {
        if ($(this).scrollTop() > offset) {
            $('#back-to-top, #chat').fadeIn(duration);
            $('#back-to-top, #chat').css('display', 'block');
            $('#back-to-top, #chat').css('display', 'block');
        } else {
            $('#back-to-top, #chat').fadeOut(duration);
        }
    });

    $('#back-to-top').click(function(event) {
        event.preventDefault();
        $('html, body').animate({scrollTop: 0}, duration);
        return false;
    });

    jQuery.validator.setDefaults({
        success: "valid"
    });

    // TODO : Move all account items into account.js
    function initResetPasswordForm() {
        $('#PasswordResetForm').validate({
            rules: {
                dwfrm_requestpassword_email: {
                    required: true,
                    email: true
                }
            },
            errorClass: 'error',
            errorElement: 'span',
            onfocusout: function (element) {
                jQuery(element).valid();
            }
        });

        $('#PasswordResetForm').on('submit', function (e) {
            e.preventDefault();
            var $this = $(this);
            if (!$this.valid()) {
                return;
            }

            var url = app.util.appendParamToURL($this.attr('action'), "format", "ajax");
            var postData = $this.serializeArray();
            postData.push({name: $this.find('.apply-button').attr('name'), value: $this.find('.apply-button').attr('value')});
            $.ajax({
                type: 'POST',
                url: url,
                data: postData,
                dataType: 'html',
                success : function (data) {
                    var $data = $(data);
                    if ($data.length && $data.filter('.forgot-password-wrapper.js-confirmation-page').length) {
                        var confirmaionHTML = $data.filter('.forgot-password-wrapper.js-confirmation-page').prop('outerHTML');
                        $('.forgot-password-wrapper').html(confirmaionHTML);

                        $('.close-button').on('click', function () {
                            dialog.close();
                        });
                    } else if ($data.length) {
                        var messageHTML = $data.find('.js-message').prop('outerHTML');
                        $('.forgot-password-wrapper').find('.js-message').html(messageHTML);
                    }
                },
                failure : function (data) {
                    alert('Error');
                }
            });
        });

    }

    jQuery('body').on('click', '#password-reset', function (e) {
        e.preventDefault();
        var width = (window.innerWidth < 708) ? (window.innerWidth - 40).toString() : '500';

        dialog.open({
            url: $(e.target).attr('href'),
            options: {
                width: width,
                height: 'auto',
                open: function () {
                    floatlabels.init();
                    initResetPasswordForm();
                }
            }
        });
    });

    //True Fit
    if (typeof tfc !== 'undefined'){
        tfc.event('tfc-set-userid','render',function(e) {
            if(e.response.tfpUser.isUserAvailable === 'true') {
                // Set session for truefit variable
                app.ajax.load({url : window.Urls.TrueFitCustomerSet});
            }
        });
    }

    // Trigger UIS call when submit order is clicked.
    $('.js-order-review-btn-submit').on('click', function(){
    	triggerUISCartCheck('placeOrder');
    });
}



/**
 * @private
 * @function
 * @description Adds class ('js') to html for css targeting and loads js specific styles.
 */
function initializeDom() {

    // add class to html for css targeting
    $('html').addClass('js');
    if (SitePreferences.LISTING_INFINITE_SCROLL) {
        $('html').addClass('infinite-scroll');
    }
    // load js specific styles
    util.limitCharacters();

    checkStaticHeader();
    moveSearch($('nav').find('.search-toggle'),$('.right-header-links').find('.search-toggle'),true);

    alignNavContent();
}

function alignNavContent(els) {
	var firstMenuItemLeft = $('.menu-category.level-1').children().first().position().left;
	
	var $els = els || $('.menu-category.level-1 >li >.level-2');
    
    $els.each(function (i, e) {
    	var wrapperPadding = $(e).css('padding-left').replace('px', ''),
    		leftAlignOffset = firstMenuItemLeft - wrapperPadding,
    		$navContent = $(e).find('.nav-aligned');
    		
    	$navContent.css({
    		"left": leftAlignOffset
    	});
    });
}

function checkStaticHeader() {
    var smallViewport = (window.innerWidth <= 480);
    var mediumViewport = (window.innerWidth > 480 && window.innerWidth <= 960);
    var largeUpViewport = (window.innerWidth > 960);
    var siteTabs = $('#site-tab-bar');
    var siteTabsHeight = siteTabs.height();
    var loginTray = $('.login-tray');
    var loginTrayHeight = loginTray.height();
    var header = $('.top-banner');
    var headerHeight = header.height();
    var stickySearch = $('.right-header-links').find('.search-toggle');
    var navSearch = $('nav').find('.search-toggle');
    var header = $('.top-banner');
    var menuToggle = header.find('.menu-toggle');
    var hasFilters = ($('#filters-selected').children().length > 0);

    if (smallViewport) {
        var stickyScrollOffset = loginTray.length ? loginTrayHeight + 40 : 0;
        var stickyMarginOffset = loginTray.length ? loginTrayHeight + 91 : 0;
        if (isCheckout()) {
            var stickyScrollOffset = loginTrayHeight;
            var stickyMarginOffset = loginTrayHeight + 60;
        }
    }
    else if (mediumViewport) {
        var stickyScrollOffset = loginTrayHeight + siteTabsHeight;
        var stickyMarginOffset = loginTrayHeight + siteTabsHeight + 59;
        if (isCheckout()) {
            var stickyScrollOffset = loginTrayHeight;
            var stickyMarginOffset = loginTrayHeight + 65;
        }
    }
    else if (largeUpViewport) {
        var stickyScrollOffset = loginTrayHeight + siteTabsHeight + 65;
        var stickyMarginOffset = loginTrayHeight + siteTabsHeight + 139;
        if (isCheckout()) {
            var stickyScrollOffset = loginTrayHeight;
            var stickyMarginOffset = loginTrayHeight + 90;
        }
    }

    if ($(document).scrollTop() - 400 > stickyScrollOffset && !header.hasClass('sticky')) {
        siteTabs.css('display', 'none');
        header.addClass('sticky');
        loginTray.addClass('sticky');
        $('.nav-aligned').css("left", "");
        if(!$('.interior-account').length){
            $('#main').css('margin-top', (stickyMarginOffset + 'px'));
        }
        moveSearch(navSearch,stickySearch,false);
    } else if ($(document).scrollTop() <= 1 + loginTrayHeight && header.hasClass('sticky')) {
        siteTabs.css('display', 'block');
        header.removeClass('sticky');
        loginTray.removeClass('sticky');
        alignNavContent();
        if(!$('.interior-account').length) {
            $('#main').css('margin-top', (smallViewport && !isCheckout() ? '120px' : '0'));
        }
        moveSearch(stickySearch,navSearch,false);
    }
    $('.login-tray.sticky').css('margin-top', '0');
}

function moveSearch(currentSearch,newSearch,pageLoad){
    var menuToggle = $('.top-banner').find('.menu-toggle');
    if (pageLoad == true && menuToggle.css('display') == 'block'){
        currentSearch.find('.header-search').detach().appendTo(newSearch);
        searchsuggest.init(newSearch.find('.header-search'), Resources.SIMPLE_SEARCH);
    }else if(pageLoad == false && menuToggle.css('display') == 'none'){
        currentSearch.find('.header-search').detach().appendTo(newSearch);
        searchsuggest.init(newSearch.find('.header-search'), Resources.SIMPLE_SEARCH);
    }
}
function getCurrentAccountPage() {
    if(typeof currentAccountPage !== 'undefined'){
        var $desktopCurrentPage = $('#secondary').find("#"+currentAccountPage);
        $desktopCurrentPage.addClass('active');
        var $mobileCurrentPage = $('.mobile-account-nav ul').find("#"+currentAccountPage).detach();
        if($mobileCurrentPage.length){
            var $navHeader = $('.mobile-account-nav').find('.nav-header');
            $('.mobile-account-nav ul').prepend("<li>"+$navHeader.html()+"</li>");
            $navHeader.find('a').text($mobileCurrentPage.text());
        }
    }
}

// AJAX call to UIS; avoid multiple calls by setting app.isUISRequested.
function triggerUISCartCheck(callSource) {
    if (!app.isUISRequested) {
    	var url = app.util.appendParamToURL(Urls.cartCheck, "callSource", callSource);
        $.ajax({url: url});
        app.isUISRequested = true;
    }
}

function isCheckout() {
    return $('.pt_checkout').length > 0;
}
var pages = {
    account: require('./pages/account'),
    cart: require('./pages/cart'),
    checkout: require('./pages/checkout'),
    compare: require('./pages/compare'),
    product: require('./pages/product'),
    registry: require('./pages/registry'),
    search: require('./pages/search'),
    storefront: require('./pages/storefront'),
    wishlist: require('./pages/wishlist'),
    storelocator: require('./pages/storelocator'),
    orderconfirmation: require('./pages/checkout/orderconfirmation')
};

window.app = {
    init: function () {
        if (document.cookie.length === 0) {
            $('<div/>').addClass('browser-compatibility-alert').append($('<p/>').addClass('browser-error').html(Resources.COOKIES_DISABLED)).appendTo('#browser-check');
        }
        initializeDom();
        initializeEvents();

        getCurrentAccountPage();

        // init specific global components
        countries.init();
        tooltip.init();
        minicart.init();
        floatlabels.init();
        validator.init();
        rating.init();
        searchplaceholder.init();
        emailsubscription.init();
        // execute page specific initializations
        $.extend(page, window.pageContext);
        var ns = page.ns;
        if (ns && pages[ns] && pages[ns].init) {
            pages[ns].init();
        }

        // Check TLS status if indicated by site preference
        if (SitePreferences.CHECK_TLS === true) {
            tls.getUserAgent();
        }
    }
};

app.resources = window.Resources;

app.dialog = {
    create : function (params) {
        // options.target can be an id selector or an jquery object
        var target = $(params.target || "#dialog-container");
        var id;
        // if no element found, create one
        if(target.length === 0) {
            if(target.selector && target.selector.charAt(0) === "#") {
                id = target.selector.substr(1);
            }
            target = $("<div>").attr("id", id).addClass("dialog-content").appendTo("body");
        }

        // create the dialog
        var container=target;
        container.dialog($.extend(true, {}, app.dialog.settings, params.options || {}));
        return container;
    },

    // opens a dialog using the given url
    open : function (params) {
        if (!params.url || params.url.length===0) { return; }

        $cache.container = app.dialog.create(params);
        params.url = app.util.appendParamsToUrl(params.url, {format:"ajax"});

        // finally load the dialog
        app.ajax.load({
            target : $cache.container,
            url : params.url,
            callback : function () {
                if($cache.container.dialog("isOpen")) {	return;	}
                $cache.container.dialog("open");
            }
        });

    },
    // closes the dialog and triggers the "close" event for the dialog
    close : function () {
        if(!$cache.container) {
            return;
        }
        $cache.container.dialog("close");
    },
    // triggers the "apply" event for the dialog
    triggerApply : function () {
        $(this).trigger("dialogApplied");
    },
    // attaches the given callback function upon dialog "apply" event
    onApply : function (callback) {
        if(callback) {
            $(this).bind("dialogApplied", callback);
        }
    },
    // triggers the "delete" event for the dialog
    triggerDelete : function () {
        $(this).trigger("dialogDeleted");
    },
    // attaches the given callback function upon dialog "delete" event
    onDelete : function (callback) {
        if(callback) {
            $(this).bind("dialogDeleted", callback);
        }
    },
    // submits the dialog form with the given action
    submit : function (action) {
        var form = $cache.container.find("form:first");

        if (!form.valid()) return;

        // set the action
        $("<input/>").attr({
            name : action,
            type : "hidden"
        }).appendTo(form);

        // serialize the form and get the post url
        var post = form.serialize();
        var url = form.attr("action");

        // post the data and replace current content with response content
        $.ajax({
            type : "POST",
            url : url,
            data : post,
            dataType : "html",
            success : function (data) {
                $cache.container.html(data);
                $(".ui-dialog-content").dialog("option","closeOnEscape", true);
            },
            failure : function (data) {
                window.alert(app.resources.SERVER_ERROR);
            }
        });
    },
    settings : {
        autoOpen : false,
        resizable : false,
        bgiframe : true,
        modal : true,
        closeOnEscape : false,
        height : 'auto',
        width : '484',
        buttons : {},
        title : '',
        draggable : false,
        position: {
            my: 'center',
            at: 'center',
            of: window,
            collision: 'flipfit'
        },
        overlay : {
            opacity : 0.5,
            background : "white"
        },
        close : function (event, ui) {
            $(this).dialog("destroy");
        },
        // A fix for webkit browsers. jQuery Dialog box disables click functionality, which breaks the browser's scroll bars
        // JS-1099. 6.9.13 EthanG
        open: function(event, ui) {
            window.setTimeout(function(){
                jQuery(document).unbind('mousedown.dialog-overlay')
                .unbind('mouseup.dialog-overlay');
            }, 100);
        }
    }
};//end app.dialog
app.util = {
    // trims a prefix from a given string, this can be used to trim
    // a certain prefix from DOM element IDs for further processing on the ID
    trimPrefix : function (str, prefix) {
        return str.substring(prefix.length);
    },
    setDialogify : function (e) {
        e.preventDefault();
        var actionSource = $(this),
            dlgAction = actionSource.data("dlg-action") || {}, // url, target, isForm
            dlgCallback = (actionSource.data("dlg-callback") != null && actionSource.data("dlg-callback")) ? actionSource.data("dlg-callback") : null,
            dlgOptions = $.extend({}, app.dialog.settings, actionSource.data("dlg-options") || {}),
            customClass = (actionSource.data("dlg-customclass") != null && actionSource.data("dlg-customclass") ? actionSource.data("dlg-customclass") : null),
            validForm = ( !dlgAction.isForm || ( dlgAction.isForm && actionSource.closest("form").valid() ));
        dlgOptions.title = dlgOptions.title || actionSource.attr("title") || "";
        // If we are submitting a form, make sure it is valid first
        if(!validForm) return;
        // Else continue
        var url = dlgAction.url // url from data
                  || (dlgAction.isForm ? actionSource.closest("form").attr("action") : null) // or url from form action if isForm=true
                  || actionSource.attr("href"); // or url from href
        if (!url) return;

        // if this is a content link, update url from Page-Show to Page-Include
        if (actionSource.hasClass("attributecontentlink")) {
            var uri = app.util.getUri(url);
            url = Urls.pageInclude+uri.query;
        }
        var dlg = app.dialog.create({target:dlgAction.target, options : dlgOptions, customClass : customClass});
        // Make sure any close buttons are initiated
        dlg.on("click", ".dialog-close-button, .ui-dialog-titlebar-close", function(e){
            e.preventDefault();
            app.dialog.close();
        });

        // If we are sending a form, serialize it and send it (including the button name/value)
        var formData = dlgAction.isForm ? (actionSource.closest("form").serialize() + "&" + actionSource.attr("name") + "=" + actionSource.attr("value")) : {};
        app.ajax.load({
            url: actionSource.attr("href") || actionSource.closest("form").attr("action"),
            data : formData,
            target: dlg,
            callback: function (e) {
                dlg.dialog("open"); // open after load to ensure dialog is centered
                if (customClass){
                    dlg.closest('.ui-dialog').addClass(customClass);
                    if (dlgOptions.customClass==='size-dialog') $('#size-chart-tabs').tabs();
                }
                floatlabels.init();
                app.validator.init(); // re-init validator

                if (dlgOptions.center && dlgOptions.dialogClass) {
                    $('.' + dlgOptions.dialogClass).center();
                }

                // Call the callback function if it was set in the initial <a> tag's data-dlg-callback attribute
                if(!dlgCallback || !window.hasOwnProperty(dlgCallback)) return;
                if (typeof dlgCallback == "string"){
                    dlgCallback = eval(dlgCallback);
                    if (typeof dlgCallback == "function") {
                        dlgCallback();
                    }
                }else {
                    window[dlgCallback](e);
                }
            }
        });
    },

    setCustomRedirectURL : function(url){
        $.ajax(app.util.appendParamToURL(
                app.urls.homeSetCustomRedirectUrl,"url",url));
    },
    // Create a hook for a form that utilizes standard submit features (non-ajax), but needs additional front-end validation before submitting
    validateHook : function(target){
        $(target).on('click', function(e){
            // Prevent default action if form is not valid
            if(!$(this).closest('form').valid()) {e.preventDefault();return false;}
        });
    },
    // Clear form elements and make sure they don't have focus on load
    // @target : A jQuery object representing a form
    // @placeholder  : A boolean. true - only redo the place holders : false - do everything
    formBlur : function(target, setHolder){
        target.each(function(index){
            // Removes any characters in the input fields
            if(!setHolder) this.reset();

            // Go through the inputs and remove any error class
            $(this).find('input').each(function(i){
                var input = $(this);

                // If we only need to do the placeholders - return out of this loop and don't reset errors
                if(setHolder) {
                    // None HTML5 place holders
                    input.placeholder();
                    return true;
                }

                // make sure it isn't auto focused (hides none-html5 place holders)
                input.blur();
                // None HTML5 place holders
                //input.placeholder();
                // Remove/hide errors due to blur
                input.removeClass('error');
                input.parent().find('span.error').hide();
            });
        });
    },
    // Submit a form via ajax (only if it is valid) and allow for a call back
    formsubmit : function(form, btn, type, callback){
        // Check to see if form is valid
        if (!form.valid()) return;
        // If valid, send the form via ajax
        // Data to send to the jquery call
        var url = app.util.appendParamToURL(form.attr('action'), "format", "ajax");
        // Collect the required form fields
        var data = form.serialize();
        // Figure out what type of call this is (from the button)
        data += "&" + btn.attr("name") + "=" + btn.attr("value");
        // make the server call
        $.ajax({
            url : url,
            data : data,
            type: "POST",
            dataType: type || "html"
        })
        .done(function(e, textStatus){
            if(!callback) return;
            callback(e, textStatus);
        })
        .fail(function (e, textStatus) {
            if(textStatus === "parsererror") {
                alert(textStatus);
            }
        });
    },
    padLeft : function (str, padChar, len) {
        var digs = len || 10;
        var s = str.toString();
        var dif = digs - s.length;
        while(dif > 0) {
            s = padChar + s;
            dif--;
        }
        return s;
    },
    // appends the parameter with the given name and
    // value to the given url and returns the changed url
    appendParamToURL : function (url, name, value, encode) {
        if (typeof encode == "undefined"){
            encode = true;
        }
        var c = "?";
        if(url && url.indexOf(c) !== -1) {
            c = "&";
        }
        return url + c + name + "=" + (encode ? encodeURIComponent(value) : value);
    },
    appendParamsToUrl : function (url, params) {
        var uri = app.util.getUri(url),
            includeHash = arguments.length < 3 ? false : arguments[2];

        var qsParams = $.extend(uri.queryParams, params);
        var result = uri.path+"?"+$.param(qsParams);
        if (includeHash) {
            result+=uri.hash;
        }
        if (result.indexOf("http")<0 && result.charAt(0)!=="/") {
            result="/"+result;
        }

        return result;
    },
    removeParamFromURL : function (url, parameter) {
        var urlparts = url.split('?');
        if(urlparts.length >= 2) {
            var urlBase = urlparts.shift();
            var queryString = urlparts.join("?");
            var prefix = encodeURIComponent(parameter) + '=';
            var pars = queryString.split(/[&;]/g);
            var i=pars.length;
            while(0 < i--) {
                if(pars[i].lastIndexOf(prefix, 0) !== -1) {
                    pars.splice(i, 1);
                }
            }
            url = urlBase + '?' + pars.join('&');
        }
        return url;
    },
    staticUrl : function (path) {
        if(!path || $.trim(path).length === 0) {
            return app.urls.staticPath;
        }
        return app.urls.staticPath + (path.charAt(0) === "/" ? path.substr(1) : path );
    },
    ajaxUrl : function (path) {
        return app.util.appendParamToURL(path, "format", "ajax");
    },

    toAbsoluteUrl : function (url) {
        if (url.indexOf("http")!==0 && url.charAt(0)!=="/") {
            url = "/"+url;
        }
        return url;
    },
    loadDynamicCss : function (urls) {
        var i, len=urls.length;
        for(i=0; i < len; i++) {
            app.util.loadedCssFiles.push(app.util.loadCssFile(urls[i]));
        }
    },
    // dynamically loads a CSS file
    loadCssFile : function (url) {
        return $("<link/>").appendTo($("head")).attr({
            type : "text/css",
            rel : "stylesheet"
        }).attr("href", url); // for i.e. <9, href must be added after link has been appended to head
    },
    // array to keep track of the dynamically loaded CSS files
    loadedCssFiles : [],
    // removes all dynamically loaded CSS files
    clearDynamicCss : function () {
        var i = app.util.loadedCssFiles.length;
        while(0 > i--) {
            $(app.util.loadedCssFiles[i]).remove();
        }
        app.util.loadedCssFiles = [];
    },
    scripts : [],
    loadScript : function (url, callback, context) {
        var script =  app.util.scripts[url] || ( app.util.scripts[url] = {
            loaded    : false,
            callbacks : []
        });

        if(script.loaded && callback != undefined) {
            return callback.apply(context);
        }

        script.callbacks.push({
            fn      : callback,
            context : context
        });

        if(script.callbacks.length == 1) {
            $.ajax({
                type     : 'GET',
                url      : url,
                dataType : 'script',
                cache    : true,
                success  : function() {
                    script.loaded = true;
                    $.each(script.callbacks, function() {
                        if (this.fn != undefined) {
                            this.fn.apply(this.context);
                        }
                    });
                    script.callbacks.length = 0;
                }
            });
        }
    },
    getQueryStringParams : function (qs) {
        if(!qs || qs.length === 0) { return {}; }
        var params = {};
        // Use the String::replace method to iterate over each
        // name-value pair in the string.
        qs.replace( new RegExp( "([^?=&]+)(=([^&]*))?", "g" ),
                    function ( $0, $1, $2, $3 ) {   params[ $1 ] = $3; }
        );
        return params;
    },
    getUri : function (o) {
        var a;
        if (o.tagName && $(o).attr("href")) {
            a = o;
        }
        else if (typeof o === "string") {
            a = document.createElement("a");
            a.href = o;
        }
        else {
            return null;
        }
        var pathParts = '';
        if (a.pathname) {
            pathParts = a.pathname.split('/');
        }
        return {
            protocol : a.protocol, //http:
            host : a.host, //www.myexample.com
            hostname : a.hostname, //www.myexample.com'
            port : a.port, //:80
            path : a.pathname, // /sub1/sub2
            query : a.search, // ?param1=val1&param2=val2
            queryParams : a.search.length > 1 ? app.util.getQueryStringParams(a.search.substr(1)) : {},
            hash : a.hash, // #OU812,5150
            url : a.protocol+ "//" + a.host + a.pathname,
            urlWithQuery : a.protocol+ "//" + a.host + a.port + a.pathname + a.search,
            page : pathParts.length > 0 ? pathParts[pathParts.length-1] : '' // sub2
        };
    },
    postForm : function (args) {
        var form = $("<form>").attr({action:args.url,method:"post"}).appendTo("body");
        var p;
        for (p in args.fields) {
            $("<input>").attr({name:p,value:args.fields[p]}).appendTo(form);
        }
        form.submit();
    },
    getMessage : function (key, bundleName, callback) {
        if (!callback || !key || key.length===0) {
            return;
        }
        var params = {key:key};
        if (bundleName && bundleName.length===0) {
            params.bn = bundleName;
        }
        var url = app.util.appendParamsToUrl(app.urls.appResources, params);
        $.getJSON(url, callback);
    },

    limitCharacters : function () {
        $('form').find('textarea[data-character-limit]').each(function(){
            var characterLimit = $(this).data("character-limit");
            var charCountHtml = String.format(app.resources.CHAR_LIMIT_MSG,
                                    '<span class="char-remain-count">'+characterLimit+'</span>',
                                    '<span class="char-allowed-count">'+characterLimit+'</span>');
            var charCountContainer = $(this).next('div.char-count');
            if (charCountContainer.length===0) {
                charCountContainer = $('<div class="char-count"/>').insertAfter($(this));
            }
            charCountContainer.html(charCountHtml);
            // trigger the keydown event so that any existing character data is calculated
            $(this).change();
        });
    },

    setDeleteConfirmation : function(container, message) {
        $(container).on("click", ".delete", function(e){
            return confirm(message);
        });
    },

    scrollBrowser : function (xLocation) {
        $('html, body').animate({ scrollTop: xLocation }, 500);
    },

    noImage : function(img) {
        if(app && app.resources && app.resources.NO_IMAGE_URL){
            var $img = $(img);
            $img.attr('data-failed-src', $img.attr('src'));
            $img.attr('src', app.resources.NO_IMAGE_URL);
        }
    },

    noImageHandler : function(img, errorHandler) {
        var $img = $(img);
        $img.on('error', function(){
            if(errorHandler){
                errorHandler(this);
            }
            else{
                app.util.noImage(this);
            }
        });
        // reload image in case we missed the error event
        var src = $img.attr('src');
        //$img.attr('src', ''); // this line crashes iOS 6.0
        if(app && app.resources && app.resources.BLANK_IMAGE_URL){
            $img.attr('src', app.resources.BLANK_IMAGE_URL);
        }
        $img.attr('src', src);
    },
    setCookie : function(c_name,value,exdays){
        // http://www.w3schools.com/js/js_cookies.asp
        var exdate=new Date();
        exdate.setDate(exdate.getDate() + exdays);
        var c_value=escape(value) + ((exdays==null) ? "" : "; expires="+exdate.toUTCString()) + "; path=/";
        document.cookie=c_name + "=" + c_value;
    },
    getCookie : function(c_name){
        // http://www.w3schools.com/js/js_cookies.asp
        var c_value = document.cookie;
        var c_start = c_value.indexOf(" " + c_name + "=");
        if (c_start == -1){
            c_start = c_value.indexOf(c_name + "=");
        }
        if (c_start == -1){
            c_value = null;
        }
        else {
            c_start = c_value.indexOf("=", c_start) + 1;
            var c_end = c_value.indexOf(";", c_start);
            if (c_end == -1) {
                c_end = c_value.length;
            }
            c_value = unescape(c_value.substring(c_start,c_end));
        }
        return c_value;

    },
    showHopup: function(url) {
        var dlg = app.dialog.create({options : app.dialog.settings});
        // Make sure any close buttons are initiated
        dlg.on("click", ".dialog-close-button", function(e){
            e.preventDefault();
            app.dialog.close();
        });

        $.ajax({
            url: url,
            data : {},
            target: dlg,
            success: function (e) {
                dlg.dialog("open"); // open after load to ensure dialog is centered
            }
        });
    }

};//end app.util

app.product = {
    init : function () {

        // Initialize CloudZoom
        if(!app.quickView.isActive()) {
            CloudZoom.quickStart();
        }


        app.product.initMobilePDPCarousel();

        if (app.page.params && app.page.params.egcimg){
            var egcImgPath = decodeURIComponent(app.page.params.egcimg);
            $('.swatches a[href$="' + egcImgPath + '"]').click();
        }
    },
    get : function (options) {
        // loads a product into a given container div
        // params
        //      containerId - id of the container div, if empty then global app.containerId is used
        //      source - source string e.g. search, cart etc.
        //      label - label for the add to cart button, default is Add to Cart
        //      url - url to get the product
        //      id - id of the product to get, is optional only used when url is empty
        var target = options.target || app.quickView.init();
        var source = options.source || "";
        var productUrl = options.url || app.util.appendParamToURL(app.urls.getProductUrl, "pid", options.id);
        if(source.length > 0) {
            productUrl = app.util.appendParamToURL(productUrl, "source", source);
        }
        // show small loading image
        //app.progress.show(app.ui.primary);
        app.ajax.load({
            target : target,
            url : productUrl,
            data : options.data || "",
            // replace with callback passed in by options
            callback : options.callback || app.product.init
        });
    },
    getAvailability : function (pid, quantity, callback) {
        app.ajax.getJson({
            url: app.util.appendParamsToUrl(app.urls.getAvailability, {pid:pid, Quantity:quantity}),
            callback: callback
        });
    },
    initAddThis : function () {
        var addThisServices = ["compact","facebook","myspace","google","twitter"],
            addThisToolbox = $(".addthis_toolbox"),
            addThisLinks="";

        var i,len=addThisServices.length;
        for (i=0;i<len;i++) {
            if (addThisToolbox.find(".addthis_button_"+addThisServices[i]).length==0) {
                addThisLinks += '<a class="addthis_button_'+addThisServices[i]+'"></a>';
            }
        }
        if (addThisLinks.length===0) { return; }

        addThisToolbox.html(addThisLinks);
        if(typeof addthis != 'undefined'){
            addthis.toolbox(".addthis_toolbox");
        }
    },
    initAddToCart : function (target) {
        if (target) {
        //	target.on("click", ".add-to-cart", setAddToCartHandler);
        }
        else {
            // calling off first ensures the event is not double hooked when init is called after ajax events
            // that don't replace the add-to-cart button
        //	$(".add-to-cart").off("click", setAddToCartHandler);
        //	$(".add-to-cart").on("click", setAddToCartHandler);
        }
    },
    initAddToWaitList : function (target) {
        if (target) {
            target.on("click",".add-to-waitlist", setAddToWaitListHandler);
        }
        else {
            $cache.pdpMain.on("click",".add-to-waitlist", setAddToWaitListHandler);
        }
    },
    updateQuantity :  function(options) {
        // load the updated quantity for the pdp
        var swatch = $('#product-content .product-variations ul.swatches.Color li.selected > a.swatchanchor').first();
        // Make sure that we aren't retrieving a gift card image, which breaks in Chrome and other similar browsers
        if (swatch.closest('.gift-card-image').length != 0) return;
        // If there is a swatch object, update quantity
        if(swatch.length){
            var url = swatch.attr('href');
            if(url){
                var params = {'format':'ajax'};
                url = app.util.appendParamsToUrl(url, params);
                $.ajax({
                    url: url,
                    success : function(response){
                        if(response){
                            var $response = $(response);
                            var $newQuantity = $response.find('select.select-quantity').first();
                            if($newQuantity && $newQuantity.length){
                                // for now, as a safety check, only continue if "data-incart" is greater than zero
                                if($newQuantity.attr('data-incart') && $newQuantity.attr('data-incart') > 0){
                                    var $oldQuantity = $('#product-content select.select-quantity');
                                    $oldQuantity.next('.selectboxit-container').remove();
                                    $oldQuantity.replaceWith($newQuantity);
                                    selectBoxIt($newQuantity);
                                    if(options && options.checkPurchaseLimit == true){
                                        app.product.purchaseLimit.check($newQuantity);
                                    }
                                }
                            }
                        }
                    }
                });
            }
        }
    },
    //TODO-MONO Replace this with app.monogram.getImage
    getMonogramImage : function(assetName, monogramText, preset) {
        assetName = assetName.split('/');
        assetName = assetName.length == 1 ? assetName[0] : assetName[1];
        assetName = assetName.replace(/_R$/,'');

        var url = app.monogramImageUrl;
        url = url.replace('{0}', assetName);
        url = url.replace('{1}', monogramText.toUpperCase());
        url = url.replace('{2}', preset);

        return url;
    },

    initMobilePDPCarousel : function () {

        // bm - siteprefs storefront - cloudzoom
        if(Resources.CLOUD_ZOOM_ENABLED){

            // setup carousel items
            var pdpImg = $('.product-imagery-container');
            var carousel = pdpImg.find('.jcarousel');
            var controls = pdpImg.find('.controls');
            var control = pdpImg.find('.control');
            var thumblink = pdpImg.find('.thumbnail-link');

            // init carousel
            carousel.jcarousel({
                scroll: 1,
                itemFallbackDimension: 100,
                itemLoadCallback: {
                    onAfterAnimation: function (e) {
                        control.removeClass('active');
                        controls.find('#control-' + e.first).addClass('active');
                    }
                }
            // mobile swipe
            }).touchwipe({
                wipeLeft: function () {
                    carousel.jcarousel('next');
                },
                wipeRight: function () {
                    carousel.jcarousel('prev');
                },
                preventDefaultEvents: false
            });

            // pagination controls
            control.click(function (e) {
                control.removeClass('active');
                $(this).addClass('active');

                // get the current items index
                var delimiter = parseInt($(this).attr('id').split('-')[1]);

                // pass index to carousel scroll
                carousel.jcarousel('scroll', delimiter);
            });
        }
    },

    purchaseLimit : {

        check : function (quantity) {

            if(!quantity){
                quantity = $('#product-content .product-add-to-cart select.select-quantity');
            }
            var $quantity = $(quantity);
            if($quantity.length){
                var options = $quantity.find('option').length;
                var inCart = $quantity.attr('data-incart');
                if(options == 0 && inCart > 0 || $quantity.data('maxlimit')){
                    app.product.purchaseLimit.show();
                }
            }
        },
        show : function () {
            // purchase limit exceeded
            var $quantity = $('#product-content .product-add-to-cart .inventory .quantity .value');
            if($quantity.length){
                //clear out the quantity select box of all options to effectively disable it
                $quantity.find('select').html('')
                selectBoxIt($('select.select-quantity'));

            }
            var $availability = $('#product-content .product-add-to-cart .availability');
            if($availability.length){
                //clear out the current availability messaging and replace it with the purchase limit message
                $availability.find('.value').empty().html('<div class="availability-msg"><p class="not-available-msg">' + Resources.PRODUCT_PURCHASE_LIMIT + '</p></div>');
            }
            var addtocart = $('#add-to-cart');
            if(addtocart.length){
                addtocart.addClass('gray-disabled');
                addtocart.attr('disabled','disabled');
            }
        }

    },
    addToInCartTotal : function() {
        var quantityElement = $('#product-content .product-add-to-cart select.select-quantity');
        var quantity = quantityElement.attr('data-incart');
        if(quantity < 5){
            quantity++;
            quantityElement.attr('data-incart',quantity);
        }else{
            app.product.purchaseLimit.show();
        }
    }
};//end app.product

app.validator = {
    init : function () {

        $("form:not(.suppress)").each(function () {
            $(this).validate(app.validator.settings);
        });

    },
    initForm : function(f) {
        $(f).validate(app.validator.settings);
    },
    initFormWSettings : function(f,s){
        $(f).validate(s);
    },
    validEmail : function(value) {
        return regex.email.test($.trim(value));
    },
    aslConfirm : function(form){
        // create asl dialog popup
        var width = window.innerWidth < 480 ? 300 : 361;

        var dlg = app.dialog.create({target:$('#asl-confirmation'), options:{
            width: width,
            autoOpen: true,
            closeOnEscape: true,
            dialogClass: 'asl-confirmation-dialog',
            open: function( event, ui ) {

            var $form = form;
            var formdata = $form.serialize();
            $('#confirmation-link').click(function(e) {

                var checkbox = dlg.find('#jsp-asl-confirm');
                if(checkbox.is(':checked')){
                    // add hidden input field stating confirmation
                    $('<input>').attr({
                        type: 'hidden',
                        name: 'antiSpamInput',
                        value: 'true'
                    }).appendTo($form);

                    // close dialog
                    dlg.dialog("close");
                    // re submit form
                    $form.submit();

                    // reset antispam after use
                    $form.find('input[name=antiSpamInput]').remove();
                }
            });
           }
        }});
    }
}; //end app.validator

app.quickView = {
    initializeButton : function (container, target) {
        // quick view button
        if(navigator.userAgent.match(/iPad/i) == null){
            $(container).on("mouseenter", target, function (e) {
                if(!$cache.qvButton) {
                    $cache.qvButton = $("<a id='quickviewbutton'/>");
                    $cache.qvButton.html(app.resources['QUICKSHOP']);
                }
                bindQvButton();

                var link = $(this).children("a:first");
                $cache.qvButton.attr({
                    "href" : link.attr("data-full-url"),
                    "title" : link.attr("title")
                }).appendTo($(this));
            });
        }
    },

    initQuickViewCarousel : function () {
    var dialogContainer = $('#quick-view-dialog');
    var productImage = dialogContainer.find($('.product-primary-image img'));

    $(".thumb a").click(function(e){
        e.preventDefault();
        var imageSrc = $(this).attr('href');
        productImage.attr('src', imageSrc)
        $(e.target).closest(".thumb .jcarousel-item li").addClass("selected").siblings().removeClass("selected");
    });

    var $list = dialogContainer.find('#thumbnail-carousel');
    var next = dialogContainer.find('#next');
    var prev = dialogContainer.find('#prev');
    var jcarouselPrev = dialogContainer.find('.jcarousel-prev');
    var jcarouselNext = dialogContainer.find('.jcarousel-next');

    var $first = $('li:first', $list),
        $last = $('li:last', $list);
        next.click(function (e) {
            var $next, $selected = dialogContainer.find((".thumb.selected"));
            $next = $selected.next('li').length ? $selected.next('li') : $first;
            $selected.removeClass("selected");
            $next.addClass('selected');
            productImage.attr('src', $next.find('a').attr("href"));
            if ($last.hasClass('selected')) {
                $(".jcarousel-next").trigger( "click" );
            }

        });

        prev.click(function () {
            var $prev, $selected = dialogContainer.find((".thumb.selected"));
            $prev = $selected.prev('li').length ? $selected.prev('li') : $last;
            $selected.removeClass("selected");
            $prev.addClass('selected');
            productImage.attr('src', $prev.find('a').attr("href"));

            if ($first.hasClass('selected')) {
                $(".jcarousel-prev").trigger( "click" );
            }

        });

        $list.jcarousel({
            auto: 0,
            vertical:true,
            scroll:1
        });

        // 1 alt image no need to display arrows
        if (dialogContainer.find('#thumbnail-carousel li').length <= 1) {
            jcarouselPrev.hide();
            jcarouselNext.hide();
            next.hide();
            prev.hide();
        }

        productImage.touchwipe({
            wipeLeft: function() { $('#next').click(); },
            wipeRight: function() { $('#prev').click(); },
            preventDefaultEvents: false
        });
        $(function() {
            var pdpMain = $('#pdpMain');
            var iscNext = pdpMain.find($('.jcarousel-next')).is(':hidden');
            var iscPrev = pdpMain.find($('.jcarousel-prev')).is(':hidden');
            var carouselClip = pdpMain.find('.jcarousel-clip');

            if(iscNext && iscPrev){
                carouselClip.css({'margin-top': '0'});
            }
        });

    },

    init : function () {
        if(app.quickView.exists()) {
            return $cache.quickView;
        }
        $cache.quickView = $("<div/>").attr("id", "quick-view-dialog").appendTo(document.body);
        return $cache.quickView;
    },
    // show quick view dialog and send request to the server to get the product
    // options.source - source of the dialog i.e. search/cart
    // options.url - product url
    show : function (options) {
        options.target = app.quickView.init();
        options.callback = function () {
            app.product.init();
            var width = 774;

            app.dialog.create({
                target : $cache.quickView,
                options : {
                    height : 'auto',
                    width : width,
                    dialogClass : 'quickview',
                    title : 'Product Quickview',
                    resizable : false,
                    position : 'center',
                    open : function () {
                        app.progress.hide();
                        if(app.resources.SESSION_CUSTOM_SITEID === 'katemobile'){
                            $('.ui-widget-overlay').bind('click', function() {
                                $('.quickview, #quick-view-dialog ').dialog('close');
                            });
                        }
                        app.tooltips.init();
                        if (typeof FB != 'undefined' && 'XFBML' in FB && 'parse' in FB.XFBML) {
                            $('fb\\:like').attr('href',options.url.replace('source=cart', 'source='));
                            FB.XFBML.parse();
                        }
                        //True Fit
                        if (typeof tfc !== 'undefined'){
                            tfc.calculate();
                        }
                    }
                }
            });

            // If the quick view is for an eGC search for the selected swatch and select it
            if (options.egcimg){
                var egcImgPath = options.egcimg;
                // make sure we have an EGC image path supplied
                if (typeof(egcImgPath) != 'undefined' && egcImgPath != ''){
                    $('.swatches a')
                        .filter(function(i,e){
                            // search for a swach with a matching image name
                            var $this = $(this);
                            var href = $this.attr('href');
                            if (typeof(href) == 'undefined' || href == ''){
                                return false;
                            }
                            var uri = app.util.getUri(href);
                            return (uri.page == egcImgPath);
                    }).click(); // 'click' swatch to select it
                }
            }
            $cache.quickView.dialog('open');
            app.quickView.initQuickViewCarousel();
        };
        app.product.get(options);
        return $cache.quickView;
    },
    // close the quick view dialog
    close : function () {
        if($cache.quickView) {
            $cache.quickView.dialog('close').empty();
            return $cache.quickView;
        }
    },
    exists : function () {
        return $cache.quickView && ($cache.quickView.length > 0);
    },
    isActive : function () {
        return $cache.quickView && ($cache.quickView.length > 0) && ($cache.quickView.children.length > 0);
    }
};//end app.quickView

app.minicart = {
    url : "", // during page loading, the Demandware URL is stored here
    // app.minicart.init: initializations
    countdownID : null,
    init : function () {

        var minicart = $("#mini-cart");
        var mcCondensed = $("#mini-cart-condensed");

        var mcTotal = minicart.find(".mini-cart-total");

        var moved = false;


        if (typeof(sr_refreshMessages) != 'undefined'){
            sr_updateMessages();
        }
        // check to see if we need to move the mini cart
        if(mcCondensed.length){

            $cache.mcCondensed = mcCondensed;

            var mcContentRegular = minicart.find(".mini-cart-content");
            var mcContentCondensed = mcCondensed.find(".mini-cart-content");
            var headerCondensed = $('#header-condensed');
            if(headerCondensed.length){
                if(headerCondensed.hasClass('visible')){
                    // use the condensed header
                    $cache.minicart = mcCondensed;
                    mcTotal = $cache.minicart.find(".mini-cart-total");
                    if(mcContentRegular && mcContentRegular.length){
                        // move mini-cart-content from regular header to condensed header
                        mcContentRegular.appendTo(mcTotal);
                        moved = true;
                    }
                    // copy count into regular header
                    $('#mini-cart .mini-cart-label').html($('#mini-cart-condensed .mini-cart-label').html());
                }
                else{
                    // use the regular header
                    $cache.minicart = minicart;
                    mcTotal = $cache.minicart.find(".mini-cart-total");
                    if(mcContentCondensed && mcContentCondensed.length){
                        // move mini-cart-content from condensed header to regular header
                        mcContentCondensed.appendTo(mcTotal);
                        moved = true;
                    }
                    // copy count into condensed header
                    $('#mini-cart-condensed .mini-cart-label').html($('#mini-cart .mini-cart-label').html());
                }
            }
        }
        else{
            $cache.minicart = minicart;
        }

        if(moved){
            $cache.mcContainer.removeClass('expanded');
        }

        $cache.mcRefresh = $cache.minicart.find(".mini-cart-refresh");
        $cache.mcTotal = $cache.minicart.find(".mini-cart-total");
        $cache.mcContent = $cache.minicart.find(".mini-cart-content");
        $cache.mcContainer = $cache.minicart.parents(".cart-link");
        $cache.mcClose = $cache.minicart.find(".mini-cart-close");
        $cache.mcProductList = $cache.minicart.find(".mini-cart-products");
        $cache.mcProducts = $cache.mcProductList.children(".mini-cart-product");
        //var collapsed = $cache.mcProductList.children().not(":first").addClass("collapsed");

        $cache.minicart.find('.mini-cart-image img').each(function(){
            app.util.noImageHandler(this);
        });

        if ($cache.mcContent.length == 0) {
            $cache.mcContainer.removeClass('expanded');
        }

        if(!initialized || moved){

            if($cache.mcContent.is(":visible")) {
                $cache.mcContainer.addClass('expanded');
            }

            if ( app.resources.SESSION_CUSTOM_SITEID != 'katemobile' )
            {
                // non-mobile event handlers

                // using click.minicart namespace to prevent duplication of events
                $cache.minicart.unbind("mouseover.minicart").unbind("mouseleave.minicart");

                // bind click event to the cart total link at the top right corner of the condensed header
                $cache.minicart.on("mouseover.minicart", ".mini-cart-link", function () {
                    if(!$cache.mcContent.is(":visible") && $(this).parents('.checkout-redesign').length == 0) {
                        // open the mini cart
                        app.minicart.slide();
                    }
                });

                $cache.minicart.on("mouseover.minicart", ".mini-cart-content", function (e) {
                    timer.clear();
                });

                $cache.minicart.on("mouseleave.minicart", ".mini-cart-total", function (e) {
                    if($cache.mcContent.is(":visible")) {
                        timer.clear();
                        timer.start(app.minicart.close,app.resources.MINICART_TIMEOUT);
                    }
                });
            }
            else
            {
                // mobile event handlers
                $cache.minicart.on("click", ".mini-cart-link", function (e) {
                    e.preventDefault();
                    if (!$cache.mcContent.is(":visible")) {
                        app.minicart.slide();
                    }
                });
            }

            $cache.minicart.on("click", ".close", function (e) {
                if($cache.mcContent.is(":visible")) {
                    app.minicart.close();
                }
            });

            //show remove button on hover
            $cache.minicart.on("mouseover", ".mini-cart-product", function(){
                $(this).find(".mini-cart-remove").show();
            })
            .on("mouseleave", ".mini-cart-product", function(){
                $(this).find(".mini-cart-remove").hide();
            });

            $cache.minicart.on("click", ".mini-cart-remove", function (e) {
                e.preventDefault();
                var uuid = $(this).parents('.mini-cart-product').data('uuid');
                if (uuid) {
                    $.ajax({
                        url : app.util.ajaxUrl(app.urls.removeProduct),
                        data : { "uuid" : uuid },
                        dataType : "html",
                        success : function (response) {
                            app.minicart.update(response);
                        }
                    });
                }
            });

            initialized = true;

        }

    },
    // reloads the mini cart, used by katespade.js for moving between the two different headers
    reload : function () {
        app.minicart.init();
        if($cache.mcContainer.hasClass('expanded')){
            app.minicart.close();
            app.minicart.slide();
        }
    },
    // shows the given content in the mini cart
    show : function (html) {
        app.minicart.update(html);
        if(!$cache.mcCondensed){
            // only scroll up to the top if we don't have a condensed version
            app.util.scrollBrowser(0);
        }
        app.minicart.slide();
        app.bonusProductsView.loadBonusOption();
        // after a time out automatically close it
        timer.start(app.minicart.close,app.resources.MINICART_TIMEOUT);
    },
    // slide down and show the contents of the mini cart
    slide : function () {
        app.minicart.init();
        if(app.minicart.suppressSlideDown && app.minicart.suppressSlideDown()) {
            return;
        }
        $cache.mcContainer.addClass('expanded');
        timer.clear();
        // show the item
        if(!$cache.mcContent.attr('style')){
            // adding this will ensure it slides the first time
            $cache.mcContent.css('display','none');
        }

        // On the mobile site, the opened search bar overlays the min-cart
        if (app.resources.SESSION_CUSTOM_SITEID === 'katemobile') {
            $('.header-search-bar').removeClass('open');
        }

        $('.mini-cart-mask').css({visibility: 'visible', opacity: '0.8'});
        $cache.mcContent.slideDown('slow', function(){
            $cache.mcContainer.addClass('expanded');
            timer.clear();
            if (app.resources.SESSION_CUSTOM_SITEID !== 'katemobile') {
                timer.start(app.minicart.close,app.resources.MINICART_TIMEOUT);
            }
        });
    },
    // closes the mini cart with given delay
    close : function (delay) {
        timer.clear();
        $('.mini-cart-mask').css({opacity: '0'});
        $cache.mcContent.slideUp('slow', function(){
            $cache.mcContainer.removeClass('expanded');
            $('.mini-cart-mask').css({visibility: 'hidden'});
            $(this).removeClass('show');
        });
    },
    // hook which can be replaced by individual pages/page types (e.g. cart)
    suppressSlideDown : function () {
        return false;
    },
    // update minicart html
    update : function (html) {
        $cache.mcRefresh.replaceWith(html);
        app.minicart.init();
    },
    // app.minicart.flyout: show flyout instead of minicart
    flyout : function (html,pdpMain,targetButton,customMessage) {

        var addtocart = (targetButton != null)? targetButton : $('#add-to-cart');

        if(addtocart.length){

            var addtocart = (targetButton != null)? targetButton : $('#add-to-cart');

            var flyout = $('#minicart-flyout');
            if(flyout.length){
                flyout.remove();
            }

            var $html = $(html);
            var $purchaseLimitMsg = $html.find('.purchase-limit-exceeded');
            if($purchaseLimitMsg.length ){ // for now only enable on kate spade and kate sale){
                app.product.purchaseLimit.show();
            }
            else{
                flyout = $('<div></div>').attr('id', 'minicart-flyout');
                flyout.html(html);
                if (customMessage != null) {
                    flyout.html('<div class="availability-msg purchase-limit-exceeded"><p>' + customMessage + '</p></div>');
                }

                if($purchaseLimitMsg.length){
                    flyout.addClass('purchase-limit');
                    addtocart.attr('disabled', 'disabled');
                }

                addtocart.after(flyout);
                if ( app.resources.SESSION_CUSTOM_SITEID === 'katemobile' ) {

                    flyout.dialog({
                        dialogClass: "minicart-flyout-dialog",
                        title: flyout.find('.mini-cart-title').remove().html(),
                        modal: true,
                        open: function(){
                            $('.ui-widget-overlay').bind('click',function(){
                                flyout.dialog('close');
                            })
                        }
                    }).find('.mini-cart-link-continue').on('click', function(e) {
                        flyout.dialog('close');
                    });

                } else {
                    timer.clear();
                    timer.start(app.minicart.closeFade,app.resources.ADDBAG_TIMEOUT);

                    flyout.on("mouseleave", function (e) {
                        timer.start(app.minicart.closeFade,app.resources.ADDBAG_TIMEOUT);
                    });

                    flyout.on("mouseover", function (e) {
                        timer.clear();
                    });

                    flyout.find('.mini-cart-image img').each(function(){
                        app.util.noImageHandler(this);
                    });
                    $('.continue-shopping-button').off('click');
                    $('.continue-shopping-button').on('click', function(e) {
                        e.preventDefault();
                        $('#minicart-flyout').hide();
                    });
                }
            }
        }

    },
    closeFade : function (){
        $('#minicart-flyout').fadeOut('slow');
    },
    cancel : function (){
        timer.clear();
    }
};//end app.minicart
var currentRequests = [];
app.ajax = {
    // ajax request to get json response
    // @param - async - boolean - asynchronous or not
    // @param - url - String - uri for the request
    // @param - data - name/value pair data request
    // @param - callback - function - callback function to be called
    getJson: function (options) {
        var currentRequests = [];
        options.url = app.util.toAbsoluteUrl(options.url);
        // return if no url exists or url matches a current request
        if(!options.url || currentRequests[options.url]) {
            return;
        }

        currentRequests[options.url] = true;
        // make the server call
        $.ajax({
            dataType : "json",
            url : options.url,
            async : (typeof options.async==="undefined" || options.async===null) ? true : options.async,
            data : options.data || {}
        })
        // success
        .done(function (response) {
            if(options.callback) {
                options.callback(response);
            }
        })
        // failed
        .fail(function (xhr, textStatus) {
            if(textStatus === "parsererror") {
                window.alert(app.resources.BAD_RESPONSE);
            }
            if(options.callback) {
                options.callback(null);
            }
        })
        // executed on success or fail
        .always(function () {
            // remove current request from hash
            if(currentRequests[options.url]) {
                delete currentRequests[options.url];
            }
        });
    },
    // ajax request to load html response in a given container
    // @param - url - String - uri for the request
    // @param - data - name/value pair data request
    // @param - callback - function - callback function to be called
    // @param - target - Object - Selector or element that will receive content
    load : function (options) {
        options.url = app.util.toAbsoluteUrl(options.url);
        // return if no url exists or url matches a current request
        if(!options.url || currentRequests[options.url]) {
            return;
        }
        currentRequests[options.url] = true;
        // make the server call
        $.ajax({
            dataType : "html",
            url : app.util.appendParamToURL(options.url, "format", "ajax"),
            data : options.data,
            type: options.type ? options.type : 'GET'
        })
        .done(function (response) {
            // success
            if(options.target) {
                $(options.target).empty().html(response);
            }
            if(options.callback) {
                options.callback(response);
            }
        })
        .fail(function (xhr, textStatus) {
            // failed
            if(textStatus === "parsererror") {
                window.alert(app.resources.BAD_RESPONSE);
            }
            if ('callback' in options) {
                options.callback(null, textStatus);
            }
        })
        .always(function () {
            app.progress.hide();
            // remove current request from hash
            if(currentRequests[options.url]) {
                delete currentRequests[options.url];
            }
        });
    }
};//end app.ajax

app.monogram = {
    init : function () {
        // First, checks if it isn't implemented yet.
        if (!String.prototype.format) {
          String.prototype.format = function() {
            var args = arguments;
            return this.replace(/{(\d+)}/g, function(match, number) {
              return typeof args[number] != 'undefined'
                ? args[number]
                : match
              ;
            });
          };
        }
    }
};

var loader;
var lastContainer;
var depth = 0;
app.progress = {
    show: function (container, navigateToLink) {
        depth++;
        if (depth > 1) return;
        var target = (!container || $(container).length===0) ? $("body") : $(container);
        var loader;
        // PCRSPADES-23: keep user from scrolling if the whole page is meant to be hidden
        if(target.is('body')) target.css('overflow', 'hidden');
        // PCRSPADES-23 - site specific loading, even on cart
        loader = $("<div/>").addClass("loader")
                .append($("<div/>").addClass(app.resources.SESSION_CUSTOM_SITEID + "-loader-indicator"), $("<div/>").addClass("loader-bg"));
        lastContainer = target;
        loader.appendTo(target).show();

        if (navigateToLink == null) return true;

        setTimeout(function() {window.location = navigateToLink;},1000);
    },
    hide: function (container) {
        depth = Math.max(depth-1,0);
        if (depth > 0) return;
        var target = container || lastContainer;
        if(target){
            // PCRSPADES-23: allow user to from scrolling if the whole page
            if(target.is('body')) target.css('overflow', 'auto');
            var loader = target.find('.loader');
            if(false){
                // fadeOut seems to prevent clicking in KateSpade in IE
                loader.hide();
            }
            else{
                loader.fadeOut('fast', function() {loader.remove();});
            }
        }
    },
    // PCRSPADES-23: Allow progress when submitting forms natively
    submitForm: function (buttons){
        buttons.each( function(index){
            var button = $(this);
            var form = button.closest('form');

            // Capture submit of the form
            button.on('click',function(e){
                // Make sure the form isn't looping its submit
                if( !$cache[form.attr('id')] ){
                    // Make sure it is valid
                    //if( form.valid()  x) {
                        // Prevent the form from submitting right away so that the progress overlay can display
                        e.preventDefault();

                        // lock the form submission
                        $cache[form.attr('id')] = true;

                        // Display progress overlay with the $('body') as the default target
                        app.progress.show();

                        // Submit the form now that the overlay has had time to populate
                        setTimeout(function(){
                            // we need to send demandware the 'save' action so the form is processed correctly
                            $("<input/>").attr({type:"hidden", name: button.attr("name")}).appendTo(form);
                            // Submit the form
                            form.submit();
                        },1000);
                    //}
                }
            });
        });
    }
};//end app.progress

app.tooltips = {
    init : function () {
        // TOOLTIP
       /***** start checkout redesign events *****/
        if ($(".page-heading.v2").length || $(".checkout-redesign").length ) {
            $('body').addClass('CRv2');
            $(".phone-tip-row .tip").on('mouseenter', function(){
                $("#tooltip").addClass('phone');
            });
            $(".form-row.phone-tip-row.cvn .tip").on('mouseenter', function(){
                $("#tooltip").addClass('cvn');
            });


            var $cvcField = $('.input-text.cvc.required');
            var $phoneField = $('.input-text.phone.required');
            var $toolTip = $('.phone-tip-row');
            /***********************************************
            * Function to hide tooltip from row
            * once the user has started typing so the error
            * and valid icons do not overlap
            ************************************************/
            $phoneField.on('keydown', function() {
                $toolTip.hide();
             });
            $cvcField.on('keydown', function() {
                $toolTip.hide();
             });
            /*************************************************
            * Function to hide tooltip from row
            * if the user clicks into the fieled then out
            * without typing so the error icon does not overlap
            **************************************************/
            $phoneField.on('focusout', function() {
                $toolTip.hide();
             });
            $cvcField.on('focusout', function() {
                $toolTip.hide();
             });

        }
        /***** end of checkout redesign events *****/

        $('.tip').on('mouseenter', function(){
            var $this = $(this);
            if(!$cache.tip) {
                $cache.tip = $('#tooltip');
                if ( app.resources.SESSION_CUSTOM_SITEID === 'katemobile' ) {
                    $cache.bg = $("<div id='tooltip-mask'></div>");
                    $cache.bg.insertBefore($cache.tip);
                    $cache.bg.on("click", function(e) {
                        tooltipClosing();
                    });
                }
            }
            var cnt = $($this.data('content'));
            var width = $this.data('width');
            var ctop = $this.offset().top;
            var cleft = $this.offset().left;
            var align = $this.data('align');
            if(!align){
                align = '';
            }
            // when the tooltip is open, this adds opacity
            if ( app.resources.SESSION_CUSTOM_SITEID === 'katemobile' ) {
                $cache.bg.css({visibility: 'visible', opacity: '0.8'});
            }
            // Populate tip with content
            $cache.tip.find('.body').html(cnt.html())
            // Adjust width
            if (width) {
                $cache.tip.css('width',width);
            }

            // Adjust position
            if (align.indexOf('right') >= 0) {
                // right align
                if (align.indexOf('innerright') < 0) {
                    // for side right, add width of element and 5 pixels for spacing
                    cleft = cleft + $this.outerWidth() + 5;
                }
            }
            else {
                // left align
                // subtract width of tip box
                cleft = cleft - $cache.tip.outerWidth();
                if (align.indexOf('innerleft') >= 0) {
                    // for inner left, subtract width of element
                    cleft = cleft + $this.outerWidth();
                }
                else {
                    // default to left outer align
                    // for outer left, subtract extra 5 pixels for spacing
                    cleft = cleft - 5;
                }
            }
            if (align.indexOf('bottom') >= 0) {
                // bottom align
                if (align.indexOf('innerbottom') < 0) {
                    // for outer bottom (aka bottom), add element height and extra 5 pixels for spacing
                    ctop = ctop + $this.outerHeight() +5;
                }
            }
            else {
                // for backwards compatiblity, default to 20 pixels up from top of element
                ctop = ctop - 20;
            }

            // Position tip
            $cache.tip.css({'left': cleft, 'top': ctop})
            $cache.tip.stop(clearQueue, jumpToEnd).show();
            mouseOnTrigger = true;
        }).on('mouseleave', function(){
            tooltipClosing();
            mouseOnTrigger = false;
        }).each(function(){
            // Disable click event on tooltip links for the mobile site
            if ( app.resources.SESSION_CUSTOM_SITEID === 'katemobile' ) {
                $(this).closest('a').on('click', function(e) {
                    e.preventDefault();
                });
            }
        });

        $(document).on('mouseenter','#tooltip', function() {
            if ( app.resources.SESSION_CUSTOM_SITEID === 'katemobile' ) {
                $('#wrapper').addClass('tooltiphelp');
            }

            mouseOnTip = true;
        }).on('mouseleave','#tooltip', function() {
            tooltipClosing();
            mouseOnTip = false;
        }).on('click', '.closeHelp', function(){
            if ( app.resources.SESSION_CUSTOM_SITEID === 'katemobile' ) {
                tooltipClosing();
                mouseOnTip = false;
                $('#wrapper').removeClass('tooltiphelp');
            }
        });
    }
};

app.triggerUISCartCheck = triggerUISCartCheck;

// general extension functions
(function () {
    String.format = function () {
        var s = arguments[0];
        var i, len = arguments.length - 1;
        for (i = 0; i < len; i++) {
            var reg = new RegExp('\\{' + i + '\\}', 'gm');
            s = s.replace(reg, arguments[i + 1]);
        }
        return s;
    };
})();

function bindQvButton() {
    $cache.qvButton.one("click", function (e) {
        e.preventDefault();
        app.quickView.show({
            url : $(this).attr("href"),
            source : "quickview"
        });
    });
}

function selectBoxIt(select) {

    var items = select.filter('select');
    if (items.length == 0) return;

    // select box replacement is disabled for certain parts of the site
    if ("page" in app && "ns" in app.page &&
            (app.page.type == 'checkout'
            || app.page.type == 'orderconfirmation'
            || app.page.type == 'GiftRegistry'
            )) {
        var item = null;

        items.each(function() {
            item = $(this);
            if (item.parent('div.select-container').length == 0){
                var label = item.next('label');
                var valid = label.next('.valid-icon');
                $('<div class="select-container" />').insertBefore(item).append(item).append(label).append(valid);
            }
        });
    }else {
        items.each(function(){
            var item = $(this);
            try {
                item.addClass('replaced');
                var sb = item.selectBoxIt().data("selectBoxIt");
                sb.refresh();
                items.bind({
                    "open": function() {
                         // Adds the Twitter Bootstrap 'dropup' class to the
                            // drop down
                        $(this).next('.selectboxit-container').addClass('open')
                    },
                    'close': function(){
                        $(this).next('.selectboxit-container').removeClass('open')
                    },
                    'focusin' : function() {
                        $(this).next('.selectboxit-container').addClass('focus');
                    },
                    'focusout' : function() {
                        $(this).next('.selectboxit-container').removeClass('focus');
                    }
               });
                // add availablity message within dropdown
                sb.dropdownContainer.find('li[data-text] a').each(function(){
                    var a = $(this);
                    var li = a.parent();
                    var dataText = li.data('text');
                    if(dataText){
                        var html = a.html();
                        if(html.indexOf(dataText) == -1){
                            li.addClass('avail');
                            a.html('<span class="size">' + html + '</span>&nbsp;<span class="msg">' + dataText + '</span>');
                        }
                    }
                });
            }catch(e){}
        });


    }
}

var countries = require('./countries'),
dialog = require('./dialog'),
datalayer = require('./datalayer'),
floatlabels = require('./float-labels'),
minicart = require('./minicart'),
page = require('./page'),
rating = require('./rating'),
searchplaceholder = require('./searchplaceholder'),
searchsuggest = require('./searchsuggest'),
tooltip = require('./tooltip'),
util = require('./util'),
validator = require('./validator'),
tls = require('./tls'),
emailsubscription = require('./emailsubscription'),
login = require('./login');


// initialize app
$(document).ready(function () {
    app.init();
});
},{"./ValidationRules":25,"./captcha":29,"./cookieprivacy":31,"./countries":32,"./datalayer":33,"./dialog":34,"./emailsubscription":35,"./float-labels":36,"./jquery-ext":41,"./login":42,"./minicart":43,"./page":44,"./pages/account":45,"./pages/cart":46,"./pages/checkout":50,"./pages/checkout/orderconfirmation":52,"./pages/compare":54,"./pages/product":58,"./pages/registry":62,"./pages/search":63,"./pages/storefront":64,"./pages/storelocator":65,"./pages/wishlist":66,"./rating":70,"./searchplaceholder":71,"./searchsuggest":72,"./tls":80,"./tooltip":81,"./util":82,"./validator":83}],28:[function(require,module,exports){
'use strict';

var dialog = require('./dialog'),
    page = require('./page'),
    util = require('./util');

var selectedList = [];
var maxItems = 1;
var bliUUID = '';

/**
 * @private
 * @function
 * description Gets a list of bonus products related to a promoted product
 */
function getBonusProducts() {
    var bonusproducts = [];

    var i, len;
    for (i = 0, len = selectedList.length; i < len; i++) {
        var p = {
            pid: selectedList[i].pid,
            qty: selectedList[i].qty,
            options: {}
        };
        var a, alen, bp = selectedList[i];
        if (bp.options) {
            for (a = 0, alen = bp.options.length; a < alen; a++) {
                var opt = bp.options[a];
                p.options = {optionName:opt.name, optionValue:opt.value};
            }
        }
        bonusproducts.push({product:p});
    }
    return {bonusproducts: bonusproducts};
}

var selectedItemTemplate = function (data) {
    var attributes = '';
    for (var attrID in data.attributes) {
        var attr = data.attributes[attrID];
        attributes += '<li data-attribute-id="' + attrID + '">\n';
        attributes += '<span class="display-name">' + attr.displayName + '</span>: ';
        attributes += '<span class="display-value">' + attr.displayValue + '</span>\n';
        attributes += '</li>';
    }
    attributes += '<li class="item-qty">\n';
    attributes += '<span class="display-name">Qty</span>: ';
    attributes += '<span class="display-value">' + data.qty + '</span>';
    return [
        '<li class="selected-bonus-item" data-uuid="' + data.uuid + '" data-pid="' + data.pid + '">',
        '<i class="remove-link fa fa-remove" title="Remove this product" href="#"></i>',
        '<div class="item-name">' + data.name + '</div>',
        '<ul class="item-attributes">',
        attributes,
        '<ul>',
        '<li>'
    ].join('\n');
};

// hide swatches that are not selected or not part of a Product Variation Group
var hideSwatches = function () {
    $('.bonus-product-item:not([data-producttype="master"]) .swatches li').not('.selected').not('.variation-group-value').hide();
    // prevent unselecting the selected variant
    $('.bonus-product-item .swatches .selected').on('click', function () {
        return false;
    });
};

/**
 * @private
 * @function
 * @description Updates the summary page with the selected bonus product
 */
function updateSummary() {
    var $bonusProductList = $('#bonus-product-list');
    if (!selectedList.length) {
        $bonusProductList.find('li.selected-bonus-item').remove();
    } else {
        var ulList = $bonusProductList.find('ul.selected-bonus-items').first();
        var i, len;
        for (i = 0, len = selectedList.length; i < len; i++) {
            var item = selectedList[i];
            var li = selectedItemTemplate(item);
            $(li).appendTo(ulList);
        }
    }

    // get remaining item count
    var remain = maxItems - selectedList.length;
    $bonusProductList.find('.bonus-items-available').text(remain);
    if (remain <= 0) {
        $bonusProductList.find('.select-bonus-item').attr('disabled', 'disabled');
    } else {
        $bonusProductList.find('.select-bonus-item').removeAttr('disabled');
    }
}

function initializeGrid () {
    var $bonusProduct = $('#bonus-product-dialog'),
        $bonusProductList = $('#bonus-product-list'),
        bliData = $bonusProductList.data('line-item-detail');
    maxItems = bliData.maxItems;
    bliUUID = bliData.uuid;

    if (bliData.itemCount >= maxItems) {
        $bonusProductList.find('.select-bonus-item').attr('disabled', 'disabled');
    }

    var cartItems = $bonusProductList.find('.selected-bonus-item');
    cartItems.each(function () {
        var ci = $(this);
        var product = {
            uuid: ci.data('uuid'),
            pid: ci.data('pid'),
            qty: ci.find('.item-qty').text(),
            name: ci.find('.item-name').html(),
            attributes: {}
        };
        var attributes = ci.find('ul.item-attributes li');
        attributes.each(function () {
            var li = $(this);
            product.attributes[li.data('attributeId')] = {
                displayName:li.children('.display-name').html(),
                displayValue:li.children('.display-value').html()
            };
        });
        selectedList.push(product);
    });

    $bonusProductList.on('click', '.bonus-product-item a[href].swatchanchor', function (e) {
        e.preventDefault();
        var url = this.href,
            $this = $(this);
        url = util.appendParamsToUrl(url, {
            'source': 'bonus',
            'format': 'ajax'
        });
        $.ajax({
            url: url,
            success: function (response) {
                $this.closest('.bonus-product-item').empty().html(response);
                hideSwatches();
            }
        });
    })
    .on('change', '.input-text', function () {
        $bonusProductList.find('.select-bonus-item').removeAttr('disabled');
        $(this).closest('.bonus-product-form').find('.quantity-error').text('');
    })
    .on('click', '.select-bonus-item', function (e) {
        e.preventDefault();
        if (selectedList.length >= maxItems) {
            $bonusProductList.find('.select-bonus-item').attr('disabled', 'disabled');
            $bonusProductList.find('.bonus-items-available').text('0');
            return;
        }

        var form = $(this).closest('.bonus-product-form'),
            detail = $(this).closest('.product-detail'),
            uuid = form.find('input[name="productUUID"]').val(),
            qtyVal = form.find('input[name="Quantity"]').val(),
            qty = (isNaN(qtyVal)) ? 1 : (+qtyVal);

        if (qty > maxItems) {
            $bonusProductList.find('.select-bonus-item').attr('disabled', 'disabled');
            form.find('.quantity-error').text(Resources.BONUS_PRODUCT_TOOMANY);
            return;
        }

        var product = {
            uuid: uuid,
            pid: form.find('input[name="pid"]').val(),
            qty: qty,
            name: detail.find('.product-name').text(),
            attributes: detail.find('.product-variations').data('attributes'),
            options: []
        };

        var optionSelects = form.find('.product-option');

        optionSelects.each(function () {
            product.options.push({
                name: this.name,
                value: $(this).val(),
                display: $(this).children(':selected').first().html()
            });
        });
        selectedList.push(product);
        updateSummary();
    })
    .on('click', '.remove-link', function (e) {
        e.preventDefault();
        var container = $(this).closest('.selected-bonus-item');
        if (!container.data('uuid')) { return; }

        var uuid = container.data('uuid');
        var i, len = selectedList.length;
        for (i = 0; i < len; i++) {
            if (selectedList[i].uuid === uuid) {
                selectedList.splice(i, 1);
                break;
            }
        }
        updateSummary();
    })
    .on('click', '.add-to-cart-bonus', function (e) {
        e.preventDefault();
        var url = util.appendParamsToUrl(Urls.addBonusProduct, {bonusDiscountLineItemUUID: bliUUID});
        var bonusProducts = getBonusProducts();
        if (bonusProducts.bonusproducts[0].product.qty > maxItems) {
            bonusProducts.bonusproducts[0].product.qty = maxItems;
        }
        // make the server call
        $.ajax({
            type: 'POST',
            dataType: 'json',
            cache: false,
            contentType: 'application/json',
            url: url,
            data: JSON.stringify(bonusProducts)
        })
        .done(function () {
            // success
            page.refresh();
        })
        .fail(function (xhr, textStatus) {
            // failed
            if (textStatus === 'parsererror') {
                window.alert(Resources.BAD_RESPONSE);
            } else {
                window.alert(Resources.SERVER_CONNECTION_ERROR);
            }
        })
        .always(function () {
            $bonusProduct.dialog('close');
        });
    })
    .on('click', '#more-bonus-products', function (e) {
        e.preventDefault();
        var uuid = $('#bonus-product-list').data().lineItemDetail.uuid;

        //get the next page of choice of bonus products
        var lineItemDetail = JSON.parse($('#bonus-product-list').attr('data-line-item-detail'));
        lineItemDetail.pageStart = lineItemDetail.pageStart + lineItemDetail.pageSize;
        $('#bonus-product-list').attr('data-line-item-detail', JSON.stringify(lineItemDetail));

        var url = util.appendParamsToUrl(Urls.getBonusProducts, {
            bonusDiscountLineItemUUID: uuid,
            format: 'ajax',
            lazyLoad: 'true',
            pageStart: lineItemDetail.pageStart,
            pageSize: $('#bonus-product-list').data().lineItemDetail.pageSize,
            bonusProductsTotal: $('#bonus-product-list').data().lineItemDetail.bpTotal
        });

        $.ajax({
            type: 'GET',
            cache: false,
            contentType: 'application/json',
            url: url
        })
        .done(function (data) {
            //add the new page to DOM and remove 'More' link if it is the last page of results
            $('#more-bonus-products').before(data);
            if ((lineItemDetail.pageStart + lineItemDetail.pageSize) >= $('#bonus-product-list').data().lineItemDetail.bpTotal) {
                $('#more-bonus-products').remove();
            }
        })
        .fail(function (xhr, textStatus) {
            if (textStatus === 'parsererror') {
                window.alert(Resources.BAD_RESPONSE);
            } else {
                window.alert(Resources.SERVER_CONNECTION_ERROR);
            }
        });
    });
}

var bonusProductsView = {
    /**
     * @function
     * @description Open the list of bonus products selection dialog
     */
    show: function (url) {
        var $bonusProduct = $('#bonus-product-dialog');
        // create the dialog
        dialog.open({
            target: $bonusProduct,
            url: url,
            options: {
                width: 795,
                title: Resources.BONUS_PRODUCTS
            },
            callback: function () {
                initializeGrid();
                hideSwatches();
            }
        });
    },
    /**
     * @function
     * @description Open bonus product promo prompt dialog
     */
    loadBonusOption: function () {
        var    self = this,
            bonusDiscountContainer = document.querySelector('.bonus-discount-container');
        if (!bonusDiscountContainer) { return; }

        // get the html from minicart, then trash it
        var bonusDiscountContainerHtml = bonusDiscountContainer.outerHTML;
        bonusDiscountContainer.parentNode.removeChild(bonusDiscountContainer);

        dialog.open({
            html: bonusDiscountContainerHtml,
            options: {
                width: 400,
                title: Resources.BONUS_PRODUCT,
                buttons: [{
                    text: Resources.SELECT_BONUS_PRODUCTS,
                    click: function () {
                        var uuid = $('.bonus-product-promo').data('lineitemid'),
                            url = util.appendParamsToUrl(Urls.getBonusProducts, {
                                bonusDiscountLineItemUUID: uuid,
                                source: 'bonus',
                                format: 'ajax',
                                lazyLoad: 'false',
                                pageStart: 0,
                                pageSize: 10,
                                bonusProductsTotal: -1
                            });
                        $(this).dialog('close');
                        self.show(url);
                    }
                }, {
                    text: Resources.NO_THANKS,
                    click: function () {
                        $(this).dialog('close');
                    }
                }]
            },
            callback: function () {
                // show hide promo details
                $('.show-promo-details').on('click', function () {
                    $('.promo-details').toggleClass('visible');
                });
            }
        });
    }
};

module.exports = bonusProductsView;

},{"./dialog":34,"./page":44,"./util":82}],29:[function(require,module,exports){
'use strict';

var dialog = require('./dialog');
var util = require('./util');
var SessionAttributes = window.SessionAttributes;

/**
 * @function captcha    Used to display/control the scrim containing the simulated captcha code
 **/
module.exports = function () {
    /**
     * if the session.privacy.ratelimited element is present then show the notification
     * NOTE: You will probably want to replace this with a call to an actual CAPTCHA system to replace the simple one here
     */
    if (SessionAttributes.SHOW_CAPTCHA) {
        dialog.open({
            html: '<h1>' + Resources.ARE_YOU_HUMAN + '</h1>',
            options: {
                closeOnEscape: false,
                dialogClass: 'no-close',
                buttons: [{
                    text: Resources.OK,
                    click: function () {
                        var url = util.appendParamsToUrl(Urls.rateLimiterReset, {format: 'ajax'});
                        $.ajax({
                            url: url
                        });
                        $(this).dialog('close');
                    }
                }]
            }
        });
    }
};

},{"./dialog":34,"./util":82}],30:[function(require,module,exports){
'use strict';

var page = require('./page'),
    util = require('./util'),
    TPromise = require('promise');

var _currentCategory = '',
    MAX_ACTIVE = 6;

/**
 * @private
 * @function
 * @description Verifies the number of elements in the compare container and updates it with sequential classes for ui targeting
 */
function refreshContainer() {
    var $compareContainer = $('.compare-items');
    var $compareItems = $compareContainer.find('.compare-item');
    var numActive = $compareItems.filter('.active').length;

    if (numActive < 2) {
        $('#compare-items-button').attr('disabled', 'disabled');
    } else {
        $('#compare-items-button').removeAttr('disabled');
    }

    $compareContainer.toggle(numActive > 0);
}
/**
 * @private
 * @function
 * @description Adds an item to the compare container and refreshes it
 */
function addToList(data) {
    // get the first compare-item not currently active
    var $item = $('.compare-items .compare-item').not('.active').first(),
        $productTile = $('#' + data.uuid);

    if ($item.length === 0) {
        if ($productTile.length > 0) {
            $productTile.find('.compare-check')[0].checked = false;
        }
        window.alert(Resources.COMPARE_ADD_FAIL);
        return;
    }

    // if already added somehow, return
    if ($('[data-uuid="' + data.uuid + '"]').length > 0) {
        return;
    }
    // set as active item
    $item.addClass('active')
        .attr('data-uuid', data.uuid)
        .attr('data-itemid', data.itemid)
        .data('uuid', data.uuid)
        .data('itemid', data.itemid)
        .append($(data.img).clone().addClass('compare-item-image'));
}
/**
 * @private
 * @function
 * description Removes an item from the compare container and refreshes it
 */
function removeFromList($item) {
    if ($item.length === 0) { return; }
    // remove class, data and id from item
    $item.removeClass('active')
        .removeAttr('data-uuid')
        .removeAttr('data-itemid')
        .data('uuid', '')
        .data('itemid', '')
        // remove the image
        .find('.compare-item-image').remove();
}

function addProductAjax(args) {
    var promise = new TPromise(function (resolve, reject) {
        $.ajax({
            url: Urls.compareAdd,
            data: {
                pid: args.itemid,
                category: _currentCategory
            },
            dataType: 'json'
        }).done(function (response) {
            if (!response || !response.success) {
                reject(new Error(Resources.COMPARE_ADD_FAIL));
            } else {
                resolve(response);
            }
        }).fail(function (jqxhr, status, err) {
            reject(new Error(err));
        });
    });
    return promise;
}

function removeProductAjax(args) {
    var promise = new TPromise(function (resolve, reject) {
        $.ajax({
            url: Urls.compareRemove,
            data: {
                pid: args.itemid,
                category: _currentCategory
            },
            dataType: 'json'
        }).done(function (response) {
            if (!response || !response.success) {
                reject(new Error(Resources.COMPARE_REMOVE_FAIL));
            } else {
                resolve(response);
            }
        }).fail(function (jqxhr, status, err) {
            reject(new Error(err));
        });
    });
    return promise;
}

function shiftImages() {
    return new TPromise(function (resolve) {
        var $items = $('.compare-items .compare-item');
        $items.each(function (i, item) {
            var $item = $(item);
            // last item
            if (i === $items.length - 1) {
                return removeFromList($item);
            }
            var $next = $items.eq(i + 1);
            if ($next.hasClass('active')) {
                // remove its own image
                $next.find('.compare-item-image').detach().appendTo($item);
                $item.addClass('active')
                    .attr('data-uuid', $next.data('uuid'))
                    .attr('data-itemid', $next.data('itemid'))
                    .data('uuid', $next.data('uuid'))
                    .data('itemid', $next.data('itemid'));
            }
        });
        resolve();
    });
}

/**
 * @function
 * @description Adds product to the compare table
 */
function addProduct(args) {
    var promise;
    var $items = $('.compare-items .compare-item');
    var $cb = $(args.cb);
    var numActive = $items.filter('.active').length;
    if (numActive === MAX_ACTIVE) {
        if (!window.confirm(Resources.COMPARE_CONFIRMATION)) {
            $cb[0].checked = false;
            return;
        }

        // remove product using id
        var $firstItem = $items.first();
        promise = removeItem($firstItem).then(function () {
            return shiftImages();
        });
    } else {
        promise = TPromise.resolve(0);
    }
    return promise.then(function () {
        return addProductAjax(args).then(function () {
            addToList(args);
            if ($cb && $cb.length > 0) { $cb[0].checked = true; }
            refreshContainer();
        });
    }).then(null, function () {
        if ($cb && $cb.length > 0) { $cb[0].checked = false; }
    });
}

/**
 * @function
 * @description Removes product from the compare table
 * @param {object} args - the arguments object should have the following properties: itemid, uuid and cb (checkbox)
 */
function removeProduct(args) {
    var $cb = args.cb ? $(args.cb) : null;
    return removeProductAjax(args).then(function () {
        var $item = $('[data-uuid="' + args.uuid + '"]');
        removeFromList($item);
        if ($cb && $cb.length > 0) { $cb[0].checked = false; }
        refreshContainer();
    }, function () {
        if ($cb && $cb.length > 0) { $cb[0].checked = true; }
    });
}

function removeItem($item) {
    var uuid = $item.data('uuid'),
        $productTile = $('#' + uuid);
    return removeProduct({
        itemid: $item.data('itemid'),
        uuid: uuid,
        cb: ($productTile.length === 0) ? null : $productTile.find('.compare-check')
    });
}

/**
 * @private
 * @function
 * @description Initializes the DOM-Object of the compare container
 */
function initializeDom() {
    var $compareContainer = $('.compare-items');
    _currentCategory = $compareContainer.data('category') || '';
    var $active = $compareContainer.find('.compare-item').filter('.active');
    $active.each(function () {
        var $productTile = $('#' +  $(this).data('uuid'));
        if ($productTile.length === 0) {return;}
        $productTile.find('.compare-check')[0].checked = true;
    });
    // set container state
    refreshContainer();
}

/**
 * @private
 * @function
 * @description Initializes the events on the compare container
 */
function initializeEvents() {
    // add event to buttons to remove products
    $('.compare-item').on('click', '.compare-item-remove', function () {
        removeItem($(this).closest('.compare-item'));
    });

    // Button to go to compare page
    $('#compare-items-button').on('click', function () {
        page.redirect(util.appendParamToURL(Urls.compareShow, 'category', _currentCategory));
    });

    // Button to clear all compared items
    // rely on refreshContainer to take care of hiding the container
    $('#clear-compared-items').on('click', function () {
        $('.compare-items .active').each(function () {
            removeItem($(this));
        });
    });
}

exports.init = function () {
    initializeDom();
    initializeEvents();
};

exports.addProduct = addProduct;
exports.removeProduct = removeProduct;

},{"./page":44,"./util":82,"promise":6}],31:[function(require,module,exports){
'use strict';

var dialog = require('./dialog');

/**
 * @function cookieprivacy    Used to display/control the scrim containing the cookie privacy code
 **/
module.exports = function () {
    /**
     * If we have not accepted cookies AND we're not on the Privacy Policy page, then show the notification
     * NOTE: You will probably want to adjust the Privacy Page test to match your site's specific privacy / cookie page
     */
    if (SitePreferences.COOKIE_HINT === true && document.cookie.indexOf('dw_cookies_accepted') < 0) {
        // check for privacy policy page
        if ($('.privacy-policy').length === 0) {
            dialog.open({
                url: Urls.cookieHint,
                options: {
                    closeOnEscape: false,
                    dialogClass: 'no-close',
                    buttons: [{
                        text: Resources.I_AGREE,
                        click: function () {
                            $(this).dialog('close');
                            enableCookies();
                        }
                    }]
                }
            });
        }
    } else {
        // Otherwise, we don't need to show the asset, just enable the cookies
        enableCookies();
    }

    function enableCookies() {
        if (document.cookie.indexOf('dw=1') < 0) {
            document.cookie = 'dw=1; path=/';
        }
        if (document.cookie.indexOf('dw_cookies_accepted') < 0) {
            document.cookie = 'dw_cookies_accepted=1; path=/';
        }
    }
};

},{"./dialog":34}],32:[function(require,module,exports){
'use strict';

exports.init = function init () {
    $('.country-selector .current-country').on('click', function () {
        $('.country-selector .selector').toggleClass('active');
        $(this).toggleClass('selector-active');
    });
    // set currency first before reload
    $('.country-selector .selector .locale').on('click', function (e) {
        e.preventDefault();
        var url = this.href;
        var currency = this.getAttribute('data-currency');
        $.ajax({
            dataType: 'json',
            url: Urls.setSessionCurrency,
            data: {
                format: 'ajax',
                currencyMnemonic: currency
            }
        })
        .done(function (response) {
            if (!response.success) {
                throw new Error('Unable to set currency');
            }
            window.location.href = url;
        });
    });
};

},{}],33:[function(require,module,exports){
'use strict';
	
app.datalayer = {
	getEvent : function(eventKey, event, typeKey, type, action, products, list) {
		return _getEvent(eventKey, event, typeKey, type, action, products, list);
	},
	getObjectExamples : function () {
		return _getObjectExamples();
	},
	objects : _getObjectExamples (),
	sendAddToCartEvent : function(){
		var isQuickView = $('#QuickViewDialog').length > 0 ? true : false;
		if (typeof dataLayer !== "undefined") {
            var transactionProducts = [];
            var dlPid, dlSku, dlProductName, dlCategoryID, dlPrice, dlVariant, dlQuantity, dlSize, dlSeasonalCollection, dlColorway, dlItemAtFullPrice, dlAvailability, dlDiscount, dlMonogramming, dlBVAverage;
            var ecomDetail = null;
            for (var i = 0; i < dataLayer.length; i++) {
                if (dataLayer[i].event == 'ecomDetail') {
                    ecomDetail = dataLayer[i];
                    break;
                }
 
            }
			var producttiles = $('.product-tile');
			var availabilityMsgContainer = $(".availability-msg");
            for(i=0;i<producttiles.length;i++){
            	console.log(producttiles.eq(i).attr('data-cgid'));
            }
            if (ecomDetail && 'ecommerce' in ecomDetail
                    && 'detail' in ecomDetail.ecommerce
                    && 'products' in ecomDetail.ecommerce.detail
                    && ecomDetail.ecommerce.detail.products.length
                    && 'category' in ecomDetail.ecommerce.detail.products[0]) {
                dlCategoryID = ecomDetail.ecommerce.detail.products[0].category;
                dlPid = ecomDetail.ecommerce.detail.products[0].id;
                dlProductName = ecomDetail.ecommerce.detail.products[0].name
            } else if (typeof cmProductName !== "undefined") {
                dlProductName = cmProductName;
                dlCategoryID = cmCategoryID;
            } else {
            	var form = $(this).closest('form');
            	if(form.length == 0 && isQuickView){
            		form = $('#QuickViewDialog');
            	}
                dlProductName = $.trim(form.find('.product-name').text());
                dlCategoryID = $.trim($('.product-tile').eq(0).attr('data-cgid'));
            }
            var form = $('.pdpForm');
            dlQuantity = parseInt($('.quantity-dropdown .selectboxit').find(':selected').text());
		    dlQuantity = dlQuantity > 0 ? dlQuantity : 1;
            if (isQuickView) {
                var qvcontainer = $('#QuickViewDialog');
                dlSku = qvcontainer.find("#pid").val();
                dlPid = dlPid || qvcontainer.find('div[data-master]').attr('data-master');
                dlProductName = $.trim(qvcontainer.find(".product-name").text());
                dlCategoryID = $.trim($('.product-tile').eq(0).attr('data-cgid'));
                dlPrice = qvcontainer.find('#gcAmount').val() || ($.trim(qvcontainer.find(".price-sales").html().trim()).replace("$",""));
                dlVariant = $.trim(qvcontainer.find(".product-variations .swatches .selected .title").text());
                dlSize = $.trim(qvcontainer.find(".product-variations .swatches.size .selected a").text());
                // dlSeasonalCollection = '';
                dlColorway = $.trim(qvcontainer.find(".product-variations .swatches.Color .selected a").attr('title'));
                dlItemAtFullPrice = $.trim(qvcontainer.find(".product-price span").html()).replace("$","");
            	if (availabilityMsgContainer.length) {
            		dlAvailability = availabilityMsgContainer.attr('data-availible');
            		if (typeof dlAvailability != 'undefined' && dlAvailability.length) {
            			dlAvailability = $.trim(dlAvailability.replace(/_|-|\./g, ' '));
            		}
            	}
            	if (typeof dlAvailability == 'undefined' || !dlAvailability.length) {
            		dlAvailability = '';
            	}
                // dlDiscount = '';
                dlMonogramming = '';
                dlBVAverage = $.trim(qvcontainer.find("#BVRRRatingOverall_ .BVRRRatingNormalOutOf").text());   
            } else {
                dlSku = $("#pid").val();
                dlPid = dlPid || $('#product-content').find('div[data-master]').attr('data-master');
                // Incase dlProductName was not set previously
                if (dlProductName == "undefined") {
                    dlProductName = $.trim($("#product-content .product-name").text());
                }
                // Incase dlCategoryID was not set previously
                if (dlCategoryID == "undefined") {
                    dlCategoryID = $('#pdpMain').attr('data-category');
                }
                dlPrice = $('#gcAmount').val() || ($.trim($(".price-sales").html().trim()).replace("$",""));
                dlVariant = $.trim($(".product-variations .swatches .selected .title").text());
                dlSize = $.trim($(".product-variations .swatches.size .selected a").text());
                // dlSeasonalCollection = '';
                dlColorway = $.trim($(".product-variations .swatches.Color .selected a").attr('title'));
                dlItemAtFullPrice = $.trim($(".product-price span").html()).replace("$","");
            	if (availabilityMsgContainer.length) {
            		dlAvailability = availabilityMsgContainer.attr('data-availible');
            		if (typeof dlAvailability != 'undefined' && dlAvailability.length) {
            			dlAvailability = $.trim(dlAvailability.replace(/_|-|\./g, ' '));
            		}
            	}
            	if (typeof dlAvailability == 'undefined' || !dlAvailability.length) {
            		dlAvailability = '';
            	}
                // dlDiscount = '';
                dlMonogramming = '';
                dlBVAverage = $.trim($("#BVRRRatingOverall_ .BVRRRatingNormalOutOf").text());
            }
            transactionProducts.push({
                "brand" : 'kate',
                "sku" : dlSku,
                "id" : dlPid,
                "name" : dlProductName,
                "category" : dlCategoryID,
                "price" : dlPrice,
                "quantity" : dlQuantity,
                "variant" : dlVariant,
                "dimension5" : dlSize, //product size
                //"dimension9" : dlSeasonalCollection, // seasonal collection the product is part of
                "dimension10" : dlColorway, //colorway
                "dimension11" : dlItemAtFullPrice, //Was the item at full price
                "dimension12" : dlAvailability, //availability of product
                //"dimension13" : dlDiscount, discount amount if applicable
                "dimension14" : dlMonogramming, //was monogramming applied
                //"dimension15" : dlGiftWrap, //was gift wrap selected
                "dimension16" : dlBVAverage //bv average star rating
            });
            dataLayer.push(app.datalayer.getEvent("event","ecomAdd", "ecommerce", " ", "add", transactionProducts));
		}
	}
};

function _getEvent(eventKey, event, typeKey, type, action, products, list) {
	
	// Event Formats
		//	app.datalayer.getEvent("eventKey","event");
		//	app.datalayer.getEvent("eventKey","event", "typeKey", "type");
		//	app.datalayer.getEvent("eventKey","event", "ecommerce", "type", "add", "products");
		//	app.datalayer.getEvent("eventKey","event", "typeKey", "type", "remove", "products");
		//	app.datalayer.getEvent("eventKey","event", "ecommerce", "type", "click", "products", "list");
	
	var object = { };
	
	if(eventKey && event && !typeKey) {
		// Handle object such as { "event" : "addToCart" } 
		//object = { eventKey : event };
		object[eventKey] = event;
	}
	else if(eventKey && event && typeKey && type && typeKey != "ecommerce") {
		// Handle object such as{ "event" : "email-subscribe", "subscribeType": "accountCreate" }
		//object = { eventKey : event, typeKey : type };
		object[eventKey] = event;
		object[typeKey] = type;
	}
	
	if(eventKey && event && typeKey && type && typeKey == "ecommerce" && products && (action == "add" || action == "remove")) {
		// Handle object such as 
		// 		{ "event" : "ecomAdd", "ecommerce" : { "add": { "products": "transactionProductsObject" } } } 
		//object = { eventKey : event, typeKey : { action : { "products": products } } };
		
		object[eventKey] = event;
		var typeObj = object[typeKey] = {};
		typeObj[action] = { "products":  products  };
		
	}
	
	if(eventKey && event && typeKey && type && typeKey == "ecommerce" && products && (action == "click")) {
		// Handle object such as 
		// 		{ "event": "ecomProductImpressionClick", "ecommerce" : { "click" : { "actionField" : {"list" : null }, "products" : null } } } 
		//object = { eventKey : event, typeKey : { action : { "actionField" : {"list" : list }, "products" : products } } } ;
		
		object[eventKey] = event;
		var typeObj2 = object[typeKey] = {};
		var typeInnerObj = typeObj2[action] = { "products": [ products ] };
		typeInnerObj["actionField"] = { "list": list };
	}
	
	return object;
};

function _getObjectExamples () { 
	
	var dataLayerObjects = [];
	
	// Event with Two Parameters 
	dataLayerObjects.push( { "event" : "addToCart" } );
	dataLayerObjects.push( { "event": "batchedEcomProdImpression" } );
	dataLayerObjects.push( { "event": "ecomProductImpressionClick" } );
	
	// Event with Four Parameters
	dataLayerObjects.push( { "event" : "email-subscribe", "subscribeType": "accountCreate" } );
	dataLayerObjects.push( { "event" : "email-subscribe", "subscribeType": "checkout" } );
	dataLayerObjects.push( { "event" : "email-subscribe", "subscribeType": "customerService" } ) ;
	dataLayerObjects.push( { "event" : "email-subscribe", "subscribeType": "lightbox" } );
	dataLayerObjects.push( { "event" : "email-subscribe", "subscribeType": "footer" } ) ;
	dataLayerObjects.push( { "event" : "account-creation", "type" : "Kate Spade" } );
	
	// Event with Ecommerce Object
	dataLayerObjects.push( { "event" : "ecomAdd", "ecommerce" : { "add": { "products": "transactionProductsObject" } } } );
	dataLayerObjects.push( { "event": "ecomProductImpressionClick", "ecommerce" : { "click" : { "actionField" : {"list" : null }, "products" : null } } } );
	dataLayerObjects.push( { "event" : "ecomRemove", "ecommerce" : { "remove" : { "products": null } } } );
	
	// Transaction Products with Two Parameters
	dataLayerObjects.push( { "transactionProducts" : "transactionProductsObject" } );
	dataLayerObjects.push( { "transactionProducts" : "ecomProductImpressionClick" } );
		
	return dataLayerObjects;
};

module.exports = app.datalayer;

},{}],34:[function(require,module,exports){
'use strict';

var ajax = require('./ajax'),
    util = require('./util'),
    _ = require('lodash'),
    imagesLoaded = require('imagesloaded');

var dialog = {
    /**
     * @function
     * @description Appends a dialog to a given container (target)
     * @param {Object} params  params.target can be an id selector or an jquery object
     */
    create: function (params) {
        var $target, id;

        if (_.isString(params.target)) {
            if (params.target.charAt(0) === '#') {
                $target = $(params.target);
            } else {
                $target = $('#' + params.target);
            }
        } else if (params.target instanceof jQuery) {
            $target = params.target;
        } else {
            $target = $('#dialog-container');
        }

        // if no element found, create one
        if ($target.length === 0) {
            if ($target.selector && $target.selector.charAt(0) === '#') {
                id = $target.selector.substr(1);
                $target = $('<div>').attr('id', id).addClass('dialog-content').appendTo('body');
            }
        }

        // create the dialog
        this.$container = $target;
        this.$container.dialog(_.merge({}, this.settings, params.options || {}));
    },
    /**
     * @function
     * @description Opens a dialog using the given url (params.url) or html (params.html)
     * @param {Object} params
     * @param {Object} params.url should contain the url
     * @param {String} params.html contains the html of the dialog content
     */
    open: function (params) {
        // close any open dialog
        //this.close();
        this.create(params);
        this.replace(params);
    },
    /**
     * @description populate the dialog with html content, then open it
     **/
    openWithContent: function (params) {
        var content, position, callback;

        if (!this.$container) { return; }
        content = params.content || params.html;
        if (!content) { return; }
        this.$container.empty().html(content);
        if (!this.$container.dialog('isOpen')) {
            this.$container.dialog('open');
        }

        if (params.options) {
            position = params.options.position;
        }
        if (!position) {
            position = this.settings.position;
        }
        imagesLoaded(this.$container).on('done', function () {
            this.$container.dialog('option', 'position', position);
        }.bind(this));
        
        if(typeof params.callback === 'function'){
        	callback = params.callback;
        }else if(typeof params.options.open === 'function'){
        	callback = params.options.open;
        }else{
        	callback = function () {};
        }
        callback();
    },
    /**
     * @description Replace the content of current dialog
     * @param {object} params
     * @param {string} params.url - If the url property is provided, an ajax call is performed to get the content to replace
     * @param {string} params.html - If no url property is provided, use html provided to replace
     */
    replace: function (params) {
        if (params.useContainer) {
            this.$container = params.useContainer;
        }
        if (!this.$container) {
            return;
        }
        if (params.url) {
            params.url = util.appendParamToURL(params.url, 'format', 'ajax');
            ajax.load({
                url: params.url,
                data: params.data,
                callback: function (response) {
                    params.content = response;
                    this.openWithContent(params);
                }.bind(this)
            });
        } else if (params.html) {
            this.openWithContent(params);
        }
    },
    /**
     * @description Replace the content of current dialog, from another handled ajax call.
     * @param {html} content to replace.
     */
    replaceContent: function(content) {
		if (!this.$container || !content) {
			return;
		}
		this.$container.empty().html(content);
	},
    /**
     * @function
     * @description Closes the dialog
     */
    close: function () {
        if (!this.$container) {
            return;
        }
        this.$container.dialog('close');
    },
    exists: function () {
        return this.$container && (this.$container.length > 0);
    },
    isActive: function () {
        return this.exists() && (this.$container.children.length > 0);
    },
    settings: {
        autoOpen: true,
        height: 'auto',
        modal: true,
        overlay: {
            opacity: 0.5,
            background: 'black'
        },
        resizable: false,
        title: '',
        width: '800',
        close: function () {
            $(this).dialog('close');
        },
        position: {
            my: 'center',
            at: 'center',
            of: window,
            collision: 'flipfit'
        }
    }
};

module.exports = dialog;

},{"./ajax":26,"./util":82,"imagesloaded":4,"lodash":5}],35:[function(require,module,exports){
'use strict';

var ajax = require('./ajax'),
    dialog = require('./dialog'),
    smallMedBreakpoint = 360;

var emailsubscription = {
    init: function () {
        // GET FORM ELEMENTS
        var form		 = this.getField();
        var emailAddress = form.find("input.email");
        var zipCode 	 = form.find("input.postalAll");
        var url 		 = Urls.emailSubscription + "?email=" + $(emailAddress).val();

        // SET BLUR EVENTS
        this.setEvent("blur", emailAddress, "email address");
        this.setEvent("blur", zipCode, "zip");

        // SET DIALOG CLOSE EVENT
        $("ui-icon-closethick").click(function () {
            $( ".ui-icon-closethick" ).dialog().close();
        });

        // SET FORM SUBMISSION EVENT
        $(form).submit(function(event) {

            // Disable the default form action.
            // This allows us to make the AJAX call once
            // this action has been disabled.
            event.preventDefault();

            // GET FORM ELEMENTS
            var form		 = emailsubscription.getField();
            var emailAddress = form.find("input.email");
            var zipCode 	 = form.find("input.postalAll");

            if($(emailAddress).val()) {

                // GET AJAX URL
                // This URL is a concatenation of the
                // pipeline, email address, and source parameters.
                var url = Urls.emailSubscription;

                // MAKE AJAX CALL VIA EMAIL SUBSCRIPTION SIGN UP FORM
                ajax.getJson({
                     url: url,
                     data: emailsubscription.getField().serialize(),
                     callback: function (data) {
                        if(data.success) {
                            var form = emailsubscription.getField();
                            var emailAddress = form.find("input.email");
                            var newsletter = $("#newsletter-popuplink").attr('href');
                            var emailErrorExists = $(emailAddress).hasClass('error');
                            var zipErrorExists = form.find("input.postalAll").hasClass('error');

                            // ONLY OPEN THE DIALOG IF THERE DOES NOT EXIST ANY ERRORS
                            if(!emailErrorExists && !zipErrorExists) {
                                 if (typeof dataLayer !== 'undefined'){
                                    dataLayer.push(app.datalayer.getEvent("event", "email-subscribe", "subscribeType", "footer"));
                                 }

                                dialog.open({
                                    url: newsletter,
                                    closeOnEscape: true,
                                    options: {
                                        width: window.innerWidth < smallMedBreakpoint ? 300 : 340,
                                        position: { my: "center", at: "center", of: window },
                                        dialogClass: 'footer-newsletter-dialog',
                                        close: function () {
                                            $(emailAddress).val('');
                                            $(zipCode).val('');
                                        }
                                    },
                                    callback: function () {
                                        // SET FORM 2 SUBMISSION EVENT
                                        $("#newsletter-popup").find("form").on('submit', function(event) {

                                            // Disable the default form action.
                                            // This allows us to make the AJAX call once
                                            // this action has been disabled.
                                            event.preventDefault();

                                            // GET AJAX URL 2
                                            // This URL is a concatenation of the
                                            // pipeline, email address, and source parameters.
                                            var url2 = Urls.emailSignupAltLists + "?et_email=" + $(emailAddress).val() + "&et_postal=" + $(zipCode).val() + "&jsp=" + $("#jsp-receiveEmail").is(":checked") + "&source=ajax";

                                            // MAKE AJAX CALL VIA EMAIL SUBSCRIPTION SIGN UP FORM 2
                                            ajax.getJson({
                                                url: url2,
                                                 callback: function (data2) {
                                                     // CLEAR EMAIL AND ZIP CODE FIELDS
                                                     $(emailAddress).val('');
                                                     $(zipCode).val('');

                                                     // CLOSE THE DIALOG MODAL
                                                     dialog.close();
                                                 }
                                             });

                                        });
                                        // SET DIALOG CLOSE EVENT 2
                                         $(".nothanks").on('click', function () {
                                             $(emailAddress).val('');
                                             $(zipCode).val('');

                                             dialog.close();
                                         });

                                        $('.footer-newsletter-dialog').center();
                                    }
                                });

                                // REMOVE THE CLASS ERROR FROM THE EMAIL FIELD
                                $(emailAddress).removeClass("error");
                            }
                         }
                         else {
                            if (data.error.showAntiSpamDialog) {
                                app.validator.aslConfirm(emailsubscription.getField());
                            } else {
                                var form = emailsubscription.getField();
                                var emailAddress = form.find("input.email");
                                $(emailAddress).val("");
                                $(emailAddress).addClass("error");
                                $(emailAddress).attr("placeholder", data.error.message);
                            }
                         }
                     }
                });
            }
        });
        //IE newsletter placeholder fix
        if(!(window.ActiveXObject) && "ActiveXObject" in window) {
            webshims.setOptions("forms", {
                overridePlaceholder: true
            });
            webshims.polyfill("forms");
            $(".newsletter input[type='submit']").on('click', function () {
                setTimeout(function () {
                    $('.placeholder-focused').blur().focus();
                },200);
            });
        }
    },
    getField: function () {
        return $("#footer-wrapper").find(".content-asset").find("#footer").find("form");
    },
    setEvent: function (type, field, phrase) {
        $(field).on(type, function () {
            if($(this).val().length == 0 ) {
                $(this).attr("placeholder", phrase + " required");
            }
        });
    }
};

module.exports = emailsubscription;
},{"./ajax":26,"./dialog":34}],36:[function(require,module,exports){
'use strict';

/**
 * @function
 * @description Initializes input float labels
 */
exports.init = function () {

    $('.form-row.has-float-label').each(function () {
        var label = $(this).find('.text-input-label'),
            input = $(this).find('input, textarea');

        // auto expand textarea inputs so text does not overlap label
        if (input.hasClass('input-textarea') && $.fn.autogrow) {
            input.css('overflow', 'hidden').autogrow({
                vertical: true,
                horizontal: false,
                flickering: false
            });
        }

        // use the label as a placeholder, this adds (optional) if not required
        if(label[0] && label[0].innerText) {
            input.attr('placeholder', label[0].innerText);
        }
        
        input.on('focus keyup', function () {
            label.addClass('float');
            input.addClass('float');
            input.css('text-transform', 'none');
            input.css('color', '#000');
        }).on('blur', function () {
            if (!input.val()) {
                label.removeClass('float');
                input.removeClass('float');
                input.css('text-transform', 'uppercase');
                input.css('color', '#8F9194');
            } else {
                label.addClass('float');
                input.addClass('float');
                input.css('text-transform', 'none');
                input.css('color', '#000');
            }
        });
        
        if(input.attr('value') && input.attr('value').length){
        	label.addClass('float');
            input.addClass('float');
            input.css('text-transform', 'none');
            input.css('color', '#000');
        }
    });
};

},{}],37:[function(require,module,exports){
'use strict';

var ajax = require('./ajax'),
	util = require('./util'),
	validator = require('./validator');

/**
 * @description Initialize event handlers on giftcard detail page
 */
function initializeEvents() {
    var $pdpMain = $('#pdpMain'),
        pdpForm = $('.pdpForm'),
        $atc = $('#add-to-cart');
    
    /*Gift Card check inputs*/
    $pdpMain.on ('focus blur', '.gift-card-attribute input, .gift-card-attribute textarea', function(e){
    	var opacity = 1;
    	var speed = 500;
    	var $this = $(this);
    	if ($this.val() || e.type == 'focusin') {
    		opacity = 0;
    		speed = 0;
    	}
    	$this.closest('.gift-card-attribute').find('label').fadeTo(speed , opacity);
    });
    if ($('.gift-card-info').length > 0) {
        $('.gift-card-attribute').each(function(){
        	var $this = $(this);
        	var _thisin = $this.find('input');
        	var _thistx = $this.find('textarea');
        	if (_thisin.val() || _thistx.val()) {
        		$this.find('label').fadeTo(0 , 0);
        	}
        })
    }
    /*Gift Card set amount*/
    $('body').on('click', '#gcAmountselect a.swatchanchor', function() {
		$('body').find('input#gcAmount').val($(this).data('value'));
    });
	$('body').on('click', '.ui-dialog #gcAmountselect a.swatchanchor', function() {
		if (!$(this).hasClass('selected')) {
			$(this).parent().addClass('selected');
			$(this).parent().siblings().removeClass('selected');
		}
	});

    if ($('input#gcAmount').length) {
    	$('#gcAmount').val($('#gcAmountselect .selected a.swatchanchor').data('value'));
    }
    
    $pdpMain.find('div.product-detail .gift-card-image a.swatchanchor').on('click', function (e) {
    	e.preventDefault();
		var $this = $(this),
			storefrontImage = $('#gcStorefrontImage'),
			$val = $this.attr('data-src'); // use data-src for gsi image
		
		if (!$val) {
			$val = $this.attr('href'); // fall back to href (which is used for pdp image)
		}
		
		$('.gift-card-image .swatches li').each(function() {
			$(this).removeClass('selected');
		});
		
		$this.parent().addClass('selected');
		
		$('.gift-card-image .swatches li.selected-value').text($this.attr('title'));
		$('#gcImage').val($val);
		
		if (storefrontImage.length){
			storefrontImage.val($this.attr('href'));
		}
		
		$pdpMain.find('.product-primary-image').html('<img class="gift-card-main-image" src="' + $this.attr('href') + '"/>');
		$pdpMain.find('.thumbnail-link:first img').attr('src', $this.attr('href'));
	});
}

/**
 * @function
 * @description Public namespace
 */
module.exports = {
	checkBalance: function (id, pin, callback) {
		/**
		 * @function
		 * @description Load details to a given gift certificate
		 * @param {String} id The ID of the gift certificate
		 * @param {Function} callback A function to called
		 */
		var url = util.appendParamToURL(Urls.giftCardCheckBalance, "giftCardNumber", id);
		url = util.appendParamToURL(url, "giftCardPin", pin);
		ajax.getJson({
			url: url,
			callback: callback
		});
	},
	/**
	 * Get the party started.
	 */
	init: function () {
		// Custom GC logic
		if ($('.gift-card').length || $('.e-gift-card').length) {
			 initializeEvents();
			 validator.initForm('form.pdpForm');
			 util.limitCharacters();
		}
	}
};

},{"./ajax":26,"./util":82,"./validator":83}],38:[function(require,module,exports){
'use strict';

var ajax = require('./ajax'),
    minicart = require('./minicart'),
    util = require('./util');

var setAddToCartHandler = function (e) {
    e.preventDefault();
    var form = $(this).closest('form');

    var options = {
        url: util.ajaxUrl(form.attr('action')),
        method: 'POST',
        cache: false,
        data: form.serialize()
    };
    $.ajax(options).done(function (response) {
        if (response.success) {
            ajax.load({
                url: Urls.minicartGC,
                data: {lineItemId: response.result.lineItemId},
                callback: function (response) {
                    minicart.show(response);
                    form.find('input,textarea').val('');
                }
            });
        } else {
            form.find('span.error').hide();
            for (var id in response.errors.FormErrors) {
                var $errorEl = $('#' + id).addClass('error').removeClass('valid').next('.error');
                if (!$errorEl || $errorEl.length === 0) {
                    $errorEl = $('<span for="' + id + '" generated="true" class="error" style=""></span>');
                    $('#' + id).after($errorEl);
                }
                $errorEl.text(response.errors.FormErrors[id].replace(/\\'/g, '\'')).show();
            }
        }
    }).fail(function (xhr, textStatus) {
        // failed
        if (textStatus === 'parsererror') {
            window.alert(Resources.BAD_RESPONSE);
        } else {
            window.alert(Resources.SERVER_CONNECTION_ERROR);
        }
    });
};

exports.init = function () {
    $('#AddToBasketButton').on('click', setAddToCartHandler);
};

},{"./ajax":26,"./minicart":43,"./util":82}],39:[function(require,module,exports){
/*! Image Map Resizer
 *  Desc: Resize HTML imageMap to scaled image.
 *  Copyright: (c) 2014-15 David J. Bradshaw - dave@bradshaw.net
 *  License: MIT
 */

(function(){
    'use strict';

    function scaleImageMap(){

        function resizeMap() {
            function resizeAreaTag(cachedAreaCoords,idx){
                function scale(coord){
                    var dimension = ( 1 === (isWidth = 1-isWidth) ? 'width' : 'height' );
                    return Math.floor(Number(coord) * scallingFactor[dimension]);
                }

                var isWidth = 0;

                areas[idx].coords = cachedAreaCoords.split(',').map(scale).join(',');
            }

            var scallingFactor = {
                width  : image.width  / image.naturalWidth,
                height : image.height / image.naturalHeight
            };

            cachedAreaCoordsArray.forEach(resizeAreaTag);
        }

        function getCoords(e){
            //Normalize coord-string to csv format without any space chars
            return e.coords.replace(/ *, */g,',').replace(/ +/g,',');
        }

        function debounce() {
            clearTimeout(timer);
            timer = setTimeout(resizeMap, 250);
        }

        function start(){
            if ((image.width !== image.naturalWidth) || (image.height !== image.naturalHeight)) {
                resizeMap();
            }
        }

        function addEventListeners(){
            image.addEventListener('load',  resizeMap, false); //Detect late image loads in IE11
            window.addEventListener('focus',  resizeMap, false); //Cope with window being resized whilst on another tab
            window.addEventListener('resize', debounce,  false);
            window.addEventListener('readystatechange', resizeMap,  false);
            document.addEventListener('fullscreenchange', resizeMap,  false);
        }

        function beenHere(){
            return ('function' === typeof map._resize);
        }

        function setup(){
            areas                 = map.getElementsByTagName('area');
            cachedAreaCoordsArray = Array.prototype.map.call(areas, getCoords);
            image                 = document.querySelector('img[usemap="#'+map.name+'"]');
            map._resize           = resizeMap; //Bind resize method to HTML map element
        }

        var
            /*jshint validthis:true */
            map   = this,
            areas = null, cachedAreaCoordsArray = null, image = null, timer = null;

        if (!beenHere()){
            setup();
            addEventListeners();
            start();
        } else {
            map._resize(); //Already setup, so just resize map
        }
    }



    function factory(){
        function chkMap(element){
            if(!element.tagName) {
                throw new TypeError('Object is not a valid DOM element');
            } else if ('MAP' !== element.tagName.toUpperCase()) {
                throw new TypeError('Expected <MAP> tag, found <'+element.tagName+'>.');
            }
        }

        function init(element){
            if (element){
                chkMap(element);
                scaleImageMap.call(element);
                maps.push(element);
            }
        }

        var maps;

        return function imageMapResizeF(target){
            maps = [];  // Only return maps from this call

            switch (typeof(target)){
                case 'undefined':
                case 'string':
                    Array.prototype.forEach.call(document.querySelectorAll(target||'map'),init);
                    break;
                case 'object':
                    init(target);
                    break;
                default:
                    throw new TypeError('Unexpected data type ('+typeof target+').');
            }

            return maps;
        };
    }


    if (typeof define === 'function' && define.amd) {
        define([],factory);
    } else if (typeof module === 'object' && typeof module.exports === 'object'){
        module.exports = factory(); //Node for browserfy
    } else {
        window.imageMapResize = factory();
    }


    if('jQuery' in window) {
        jQuery.fn.imageMapResize = function $imageMapResizeF(){
            return this.filter('map').each(scaleImageMap).end();
        };
    }

})();
},{}],40:[function(require,module,exports){
/**
 * interact.js v1.2.6
 *
 * Copyright (c) 2012-2015 Taye Adeyemi <dev@taye.me>
 * Open source under the MIT License.
 * https://raw.github.com/taye/interact.js/master/LICENSE
 */
(function (realWindow) {
    'use strict';

    // return early if there's no window to work with (eg. Node.js)
    if (!realWindow) { return; }

    var // get wrapped window if using Shadow DOM polyfill
        window = (function () {
            // create a TextNode
            var el = realWindow.document.createTextNode('');

            // check if it's wrapped by a polyfill
            if (el.ownerDocument !== realWindow.document
                && typeof realWindow.wrap === 'function'
                && realWindow.wrap(el) === el) {
                // return wrapped window
                return realWindow.wrap(realWindow);
            }

            // no Shadow DOM polyfil or native implementation
            return realWindow;
        }()),

        document           = window.document,
        DocumentFragment   = window.DocumentFragment   || blank,
        SVGElement         = window.SVGElement         || blank,
        SVGSVGElement      = window.SVGSVGElement      || blank,
        SVGElementInstance = window.SVGElementInstance || blank,
        HTMLElement        = window.HTMLElement        || window.Element,

        PointerEvent = (window.PointerEvent || window.MSPointerEvent),
        pEventTypes,

        hypot = Math.hypot || function (x, y) { return Math.sqrt(x * x + y * y); },

        tmpXY = {},     // reduce object creation in getXY()

        documents       = [],   // all documents being listened to

        interactables   = [],   // all set interactables
        interactions    = [],   // all interactions

        dynamicDrop     = false,

        // {
        //      type: {
        //          selectors: ['selector', ...],
        //          contexts : [document, ...],
        //          listeners: [[listener, useCapture], ...]
        //      }
        //  }
        delegatedEvents = {},

        defaultOptions = {
            base: {
                accept        : null,
                actionChecker : null,
                styleCursor   : true,
                preventDefault: 'auto',
                origin        : { x: 0, y: 0 },
                deltaSource   : 'page',
                allowFrom     : null,
                ignoreFrom    : null,
                _context      : document,
                dropChecker   : null
            },

            drag: {
                enabled: false,
                manualStart: true,
                max: Infinity,
                maxPerElement: 1,

                snap: null,
                restrict: null,
                inertia: null,
                autoScroll: null,

                axis: 'xy'
            },

            drop: {
                enabled: false,
                accept: null,
                overlap: 'pointer'
            },

            resize: {
                enabled: false,
                manualStart: false,
                max: Infinity,
                maxPerElement: 1,

                snap: null,
                restrict: null,
                inertia: null,
                autoScroll: null,

                square: false,
                preserveAspectRatio: false,
                axis: 'xy',

                // use default margin
                margin: NaN,

                // object with props left, right, top, bottom which are
                // true/false values to resize when the pointer is over that edge,
                // CSS selectors to match the handles for each direction
                // or the Elements for each handle
                edges: null,

                // a value of 'none' will limit the resize rect to a minimum of 0x0
                // 'negate' will alow the rect to have negative width/height
                // 'reposition' will keep the width/height positive by swapping
                // the top and bottom edges and/or swapping the left and right edges
                invert: 'none'
            },

            gesture: {
                manualStart: false,
                enabled: false,
                max: Infinity,
                maxPerElement: 1,

                restrict: null
            },

            perAction: {
                manualStart: false,
                max: Infinity,
                maxPerElement: 1,

                snap: {
                    enabled     : false,
                    endOnly     : false,
                    range       : Infinity,
                    targets     : null,
                    offsets     : null,

                    relativePoints: null
                },

                restrict: {
                    enabled: false,
                    endOnly: false
                },

                autoScroll: {
                    enabled     : false,
                    container   : null,     // the item that is scrolled (Window or HTMLElement)
                    margin      : 60,
                    speed       : 300       // the scroll speed in pixels per second
                },

                inertia: {
                    enabled          : false,
                    resistance       : 10,    // the lambda in exponential decay
                    minSpeed         : 100,   // target speed must be above this for inertia to start
                    endSpeed         : 10,    // the speed at which inertia is slow enough to stop
                    allowResume      : true,  // allow resuming an action in inertia phase
                    zeroResumeDelta  : true,  // if an action is resumed after launch, set dx/dy to 0
                    smoothEndDuration: 300    // animate to snap/restrict endOnly if there's no inertia
                }
            },

            _holdDuration: 600
        },

        // Things related to autoScroll
        autoScroll = {
            interaction: null,
            i: null,    // the handle returned by window.setInterval
            x: 0, y: 0, // Direction each pulse is to scroll in

            // scroll the window by the values in scroll.x/y
            scroll: function () {
                var options = autoScroll.interaction.target.options[autoScroll.interaction.prepared.name].autoScroll,
                    container = options.container || getWindow(autoScroll.interaction.element),
                    now = new Date().getTime(),
                    // change in time in seconds
                    dtx = (now - autoScroll.prevTimeX) / 1000,
                    dty = (now - autoScroll.prevTimeY) / 1000,
                    vx, vy, sx, sy;

                // displacement
                if (options.velocity) {
                  vx = options.velocity.x;
                  vy = options.velocity.y;
                }
                else {
                  vx = vy = options.speed
                }
 
                sx = vx * dtx;
                sy = vy * dty;

                if (sx >= 1 || sy >= 1) {
                    if (isWindow(container)) {
                        container.scrollBy(autoScroll.x * sx, autoScroll.y * sy);
                    }
                    else if (container) {
                        container.scrollLeft += autoScroll.x * sx;
                        container.scrollTop  += autoScroll.y * sy;
                    }

                    if (sx >=1) autoScroll.prevTimeX = now;
                    if (sy >= 1) autoScroll.prevTimeY = now;
                }

                if (autoScroll.isScrolling) {
                    cancelFrame(autoScroll.i);
                    autoScroll.i = reqFrame(autoScroll.scroll);
                }
            },

            isScrolling: false,
            prevTimeX: 0,
            prevTimeY: 0,

            start: function (interaction) {
                autoScroll.isScrolling = true;
                cancelFrame(autoScroll.i);

                autoScroll.interaction = interaction;
                autoScroll.prevTimeX = new Date().getTime();
                autoScroll.prevTimeY = new Date().getTime();
                autoScroll.i = reqFrame(autoScroll.scroll);
            },

            stop: function () {
                autoScroll.isScrolling = false;
                cancelFrame(autoScroll.i);
            }
        },

        // Does the browser support touch input?
        supportsTouch = (('ontouchstart' in window) || window.DocumentTouch && document instanceof window.DocumentTouch),

        // Does the browser support PointerEvents
        supportsPointerEvent = !!PointerEvent,

        // Less Precision with touch input
        margin = supportsTouch || supportsPointerEvent? 20: 10,

        pointerMoveTolerance = 1,

        // for ignoring browser's simulated mouse events
        prevTouchTime = 0,

        // Allow this many interactions to happen simultaneously
        maxInteractions = Infinity,

        // Check if is IE9 or older
        actionCursors = (document.all && !window.atob) ? {
            drag    : 'move',
            resizex : 'e-resize',
            resizey : 's-resize',
            resizexy: 'se-resize',

            resizetop        : 'n-resize',
            resizeleft       : 'w-resize',
            resizebottom     : 's-resize',
            resizeright      : 'e-resize',
            resizetopleft    : 'se-resize',
            resizebottomright: 'se-resize',
            resizetopright   : 'ne-resize',
            resizebottomleft : 'ne-resize',

            gesture : ''
        } : {
            drag    : 'move',
            resizex : 'ew-resize',
            resizey : 'ns-resize',
            resizexy: 'nwse-resize',

            resizetop        : 'ns-resize',
            resizeleft       : 'ew-resize',
            resizebottom     : 'ns-resize',
            resizeright      : 'ew-resize',
            resizetopleft    : 'nwse-resize',
            resizebottomright: 'nwse-resize',
            resizetopright   : 'nesw-resize',
            resizebottomleft : 'nesw-resize',

            gesture : ''
        },

        actionIsEnabled = {
            drag   : true,
            resize : true,
            gesture: true
        },

        // because Webkit and Opera still use 'mousewheel' event type
        wheelEvent = 'onmousewheel' in document? 'mousewheel': 'wheel',

        eventTypes = [
            'dragstart',
            'dragmove',
            'draginertiastart',
            'dragend',
            'dragenter',
            'dragleave',
            'dropactivate',
            'dropdeactivate',
            'dropmove',
            'drop',
            'resizestart',
            'resizemove',
            'resizeinertiastart',
            'resizeend',
            'gesturestart',
            'gesturemove',
            'gestureinertiastart',
            'gestureend',

            'down',
            'move',
            'up',
            'cancel',
            'tap',
            'doubletap',
            'hold'
        ],

        globalEvents = {},

        // Opera Mobile must be handled differently
        isOperaMobile = navigator.appName == 'Opera' &&
            supportsTouch &&
            navigator.userAgent.match('Presto'),

        // scrolling doesn't change the result of getClientRects on iOS 7
        isIOS7 = (/iP(hone|od|ad)/.test(navigator.platform)
                         && /OS 7[^\d]/.test(navigator.appVersion)),

        // prefix matchesSelector
        prefixedMatchesSelector = 'matches' in Element.prototype?
                'matches': 'webkitMatchesSelector' in Element.prototype?
                    'webkitMatchesSelector': 'mozMatchesSelector' in Element.prototype?
                        'mozMatchesSelector': 'oMatchesSelector' in Element.prototype?
                            'oMatchesSelector': 'msMatchesSelector',

        // will be polyfill function if browser is IE8
        ie8MatchesSelector,

        // native requestAnimationFrame or polyfill
        reqFrame = realWindow.requestAnimationFrame,
        cancelFrame = realWindow.cancelAnimationFrame,

        // Events wrapper
        events = (function () {
            var useAttachEvent = ('attachEvent' in window) && !('addEventListener' in window),
                addEvent       = useAttachEvent?  'attachEvent': 'addEventListener',
                removeEvent    = useAttachEvent?  'detachEvent': 'removeEventListener',
                on             = useAttachEvent? 'on': '',

                elements          = [],
                targets           = [],
                attachedListeners = [];

            function add (element, type, listener, useCapture) {
                var elementIndex = indexOf(elements, element),
                    target = targets[elementIndex];

                if (!target) {
                    target = {
                        events: {},
                        typeCount: 0
                    };

                    elementIndex = elements.push(element) - 1;
                    targets.push(target);

                    attachedListeners.push((useAttachEvent ? {
                            supplied: [],
                            wrapped : [],
                            useCount: []
                        } : null));
                }

                if (!target.events[type]) {
                    target.events[type] = [];
                    target.typeCount++;
                }

                if (!contains(target.events[type], listener)) {
                    var ret;

                    if (useAttachEvent) {
                        var listeners = attachedListeners[elementIndex],
                            listenerIndex = indexOf(listeners.supplied, listener);

                        var wrapped = listeners.wrapped[listenerIndex] || function (event) {
                            if (!event.immediatePropagationStopped) {
                                event.target = event.srcElement;
                                event.currentTarget = element;

                                event.preventDefault = event.preventDefault || preventDef;
                                event.stopPropagation = event.stopPropagation || stopProp;
                                event.stopImmediatePropagation = event.stopImmediatePropagation || stopImmProp;

                                if (/mouse|click/.test(event.type)) {
                                    event.pageX = event.clientX + getWindow(element).document.documentElement.scrollLeft;
                                    event.pageY = event.clientY + getWindow(element).document.documentElement.scrollTop;
                                }

                                listener(event);
                            }
                        };

                        ret = element[addEvent](on + type, wrapped, Boolean(useCapture));

                        if (listenerIndex === -1) {
                            listeners.supplied.push(listener);
                            listeners.wrapped.push(wrapped);
                            listeners.useCount.push(1);
                        }
                        else {
                            listeners.useCount[listenerIndex]++;
                        }
                    }
                    else {
                        ret = element[addEvent](type, listener, useCapture || false);
                    }
                    target.events[type].push(listener);

                    return ret;
                }
            }

            function remove (element, type, listener, useCapture) {
                var i,
                    elementIndex = indexOf(elements, element),
                    target = targets[elementIndex],
                    listeners,
                    listenerIndex,
                    wrapped = listener;

                if (!target || !target.events) {
                    return;
                }

                if (useAttachEvent) {
                    listeners = attachedListeners[elementIndex];
                    listenerIndex = indexOf(listeners.supplied, listener);
                    wrapped = listeners.wrapped[listenerIndex];
                }

                if (type === 'all') {
                    for (type in target.events) {
                        if (target.events.hasOwnProperty(type)) {
                            remove(element, type, 'all');
                        }
                    }
                    return;
                }

                if (target.events[type]) {
                    var len = target.events[type].length;

                    if (listener === 'all') {
                        for (i = 0; i < len; i++) {
                            remove(element, type, target.events[type][i], Boolean(useCapture));
                        }
                        return;
                    } else {
                        for (i = 0; i < len; i++) {
                            if (target.events[type][i] === listener) {
                                element[removeEvent](on + type, wrapped, useCapture || false);
                                target.events[type].splice(i, 1);

                                if (useAttachEvent && listeners) {
                                    listeners.useCount[listenerIndex]--;
                                    if (listeners.useCount[listenerIndex] === 0) {
                                        listeners.supplied.splice(listenerIndex, 1);
                                        listeners.wrapped.splice(listenerIndex, 1);
                                        listeners.useCount.splice(listenerIndex, 1);
                                    }
                                }

                                break;
                            }
                        }
                    }

                    if (target.events[type] && target.events[type].length === 0) {
                        target.events[type] = null;
                        target.typeCount--;
                    }
                }

                if (!target.typeCount) {
                    targets.splice(elementIndex, 1);
                    elements.splice(elementIndex, 1);
                    attachedListeners.splice(elementIndex, 1);
                }
            }

            function preventDef () {
                this.returnValue = false;
            }

            function stopProp () {
                this.cancelBubble = true;
            }

            function stopImmProp () {
                this.cancelBubble = true;
                this.immediatePropagationStopped = true;
            }

            return {
                add: add,
                remove: remove,
                useAttachEvent: useAttachEvent,

                _elements: elements,
                _targets: targets,
                _attachedListeners: attachedListeners
            };
        }());

    function blank () {}

    function isElement (o) {
        if (!o || (typeof o !== 'object')) { return false; }

        var _window = getWindow(o) || window;

        return (/object|function/.test(typeof _window.Element)
            ? o instanceof _window.Element //DOM2
            : o.nodeType === 1 && typeof o.nodeName === "string");
    }
    function isWindow (thing) { return thing === window || !!(thing && thing.Window) && (thing instanceof thing.Window); }
    function isDocFrag (thing) { return !!thing && thing instanceof DocumentFragment; }
    function isArray (thing) {
        return isObject(thing)
                && (typeof thing.length !== undefined)
                && isFunction(thing.splice);
    }
    function isObject   (thing) { return !!thing && (typeof thing === 'object'); }
    function isFunction (thing) { return typeof thing === 'function'; }
    function isNumber   (thing) { return typeof thing === 'number'  ; }
    function isBool     (thing) { return typeof thing === 'boolean' ; }
    function isString   (thing) { return typeof thing === 'string'  ; }

    function trySelector (value) {
        if (!isString(value)) { return false; }

        // an exception will be raised if it is invalid
        document.querySelector(value);
        return true;
    }

    function extend (dest, source) {
        for (var prop in source) {
            dest[prop] = source[prop];
        }
        return dest;
    }

    var prefixedPropREs = {
      webkit: /(Movement[XY]|Radius[XY]|RotationAngle|Force)$/
    };

    function pointerExtend (dest, source) {
        for (var prop in source) {
          var deprecated = false;

          // skip deprecated prefixed properties
          for (var vendor in prefixedPropREs) {
            if (prop.indexOf(vendor) === 0 && prefixedPropREs[vendor].test(prop)) {
              deprecated = true;
              break;
            }
          }

          if (!deprecated) {
            dest[prop] = source[prop];
          }
        }
        return dest;
    }

    function copyCoords (dest, src) {
        dest.page = dest.page || {};
        dest.page.x = src.page.x;
        dest.page.y = src.page.y;

        dest.client = dest.client || {};
        dest.client.x = src.client.x;
        dest.client.y = src.client.y;

        dest.timeStamp = src.timeStamp;
    }

    function setEventXY (targetObj, pointers, interaction) {
        var pointer = (pointers.length > 1
                       ? pointerAverage(pointers)
                       : pointers[0]);

        getPageXY(pointer, tmpXY, interaction);
        targetObj.page.x = tmpXY.x;
        targetObj.page.y = tmpXY.y;

        getClientXY(pointer, tmpXY, interaction);
        targetObj.client.x = tmpXY.x;
        targetObj.client.y = tmpXY.y;

        targetObj.timeStamp = new Date().getTime();
    }

    function setEventDeltas (targetObj, prev, cur) {
        targetObj.page.x     = cur.page.x      - prev.page.x;
        targetObj.page.y     = cur.page.y      - prev.page.y;
        targetObj.client.x   = cur.client.x    - prev.client.x;
        targetObj.client.y   = cur.client.y    - prev.client.y;
        targetObj.timeStamp = new Date().getTime() - prev.timeStamp;

        // set pointer velocity
        var dt = Math.max(targetObj.timeStamp / 1000, 0.001);
        targetObj.page.speed   = hypot(targetObj.page.x, targetObj.page.y) / dt;
        targetObj.page.vx      = targetObj.page.x / dt;
        targetObj.page.vy      = targetObj.page.y / dt;

        targetObj.client.speed = hypot(targetObj.client.x, targetObj.page.y) / dt;
        targetObj.client.vx    = targetObj.client.x / dt;
        targetObj.client.vy    = targetObj.client.y / dt;
    }

    function isNativePointer (pointer) {
        return (pointer instanceof window.Event
            || (supportsTouch && window.Touch && pointer instanceof window.Touch));
    }

    // Get specified X/Y coords for mouse or event.touches[0]
    function getXY (type, pointer, xy) {
        xy = xy || {};
        type = type || 'page';

        xy.x = pointer[type + 'X'];
        xy.y = pointer[type + 'Y'];

        return xy;
    }

    function getPageXY (pointer, page) {
        page = page || {};

        // Opera Mobile handles the viewport and scrolling oddly
        if (isOperaMobile && isNativePointer(pointer)) {
            getXY('screen', pointer, page);

            page.x += window.scrollX;
            page.y += window.scrollY;
        }
        else {
            getXY('page', pointer, page);
        }

        return page;
    }

    function getClientXY (pointer, client) {
        client = client || {};

        if (isOperaMobile && isNativePointer(pointer)) {
            // Opera Mobile handles the viewport and scrolling oddly
            getXY('screen', pointer, client);
        }
        else {
          getXY('client', pointer, client);
        }

        return client;
    }

    function getScrollXY (win) {
        win = win || window;
        return {
            x: win.scrollX || win.document.documentElement.scrollLeft,
            y: win.scrollY || win.document.documentElement.scrollTop
        };
    }

    function getPointerId (pointer) {
        return isNumber(pointer.pointerId)? pointer.pointerId : pointer.identifier;
    }

    function getActualElement (element) {
        return (element instanceof SVGElementInstance
            ? element.correspondingUseElement
            : element);
    }

    function getWindow (node) {
        if (isWindow(node)) {
            return node;
        }

        var rootNode = (node.ownerDocument || node);

        return rootNode.defaultView || rootNode.parentWindow || window;
    }

    function getElementClientRect (element) {
        var clientRect = (element instanceof SVGElement
                            ? element.getBoundingClientRect()
                            : element.getClientRects()[0]);

        return clientRect && {
            left  : clientRect.left,
            right : clientRect.right,
            top   : clientRect.top,
            bottom: clientRect.bottom,
            width : clientRect.width || clientRect.right - clientRect.left,
            height: clientRect.height || clientRect.bottom - clientRect.top
        };
    }

    function getElementRect (element) {
        var clientRect = getElementClientRect(element);

        if (!isIOS7 && clientRect) {
            var scroll = getScrollXY(getWindow(element));

            clientRect.left   += scroll.x;
            clientRect.right  += scroll.x;
            clientRect.top    += scroll.y;
            clientRect.bottom += scroll.y;
        }

        return clientRect;
    }

    function getTouchPair (event) {
        var touches = [];

        // array of touches is supplied
        if (isArray(event)) {
            touches[0] = event[0];
            touches[1] = event[1];
        }
        // an event
        else {
            if (event.type === 'touchend') {
                if (event.touches.length === 1) {
                    touches[0] = event.touches[0];
                    touches[1] = event.changedTouches[0];
                }
                else if (event.touches.length === 0) {
                    touches[0] = event.changedTouches[0];
                    touches[1] = event.changedTouches[1];
                }
            }
            else {
                touches[0] = event.touches[0];
                touches[1] = event.touches[1];
            }
        }

        return touches;
    }

    function pointerAverage (pointers) {
        var average = {
            pageX  : 0,
            pageY  : 0,
            clientX: 0,
            clientY: 0,
            screenX: 0,
            screenY: 0
        };
        var prop;

        for (var i = 0; i < pointers.length; i++) {
            for (prop in average) {
                average[prop] += pointers[i][prop];
            }
        }
        for (prop in average) {
            average[prop] /= pointers.length;
        }

        return average;
    }

    function touchBBox (event) {
        if (!event.length && !(event.touches && event.touches.length > 1)) {
            return;
        }

        var touches = getTouchPair(event),
            minX = Math.min(touches[0].pageX, touches[1].pageX),
            minY = Math.min(touches[0].pageY, touches[1].pageY),
            maxX = Math.max(touches[0].pageX, touches[1].pageX),
            maxY = Math.max(touches[0].pageY, touches[1].pageY);

        return {
            x: minX,
            y: minY,
            left: minX,
            top: minY,
            width: maxX - minX,
            height: maxY - minY
        };
    }

    function touchDistance (event, deltaSource) {
        deltaSource = deltaSource || defaultOptions.deltaSource;

        var sourceX = deltaSource + 'X',
            sourceY = deltaSource + 'Y',
            touches = getTouchPair(event);


        var dx = touches[0][sourceX] - touches[1][sourceX],
            dy = touches[0][sourceY] - touches[1][sourceY];

        return hypot(dx, dy);
    }

    function touchAngle (event, prevAngle, deltaSource) {
        deltaSource = deltaSource || defaultOptions.deltaSource;

        var sourceX = deltaSource + 'X',
            sourceY = deltaSource + 'Y',
            touches = getTouchPair(event),
            dx = touches[0][sourceX] - touches[1][sourceX],
            dy = touches[0][sourceY] - touches[1][sourceY],
            angle = 180 * Math.atan(dy / dx) / Math.PI;

        if (isNumber(prevAngle)) {
            var dr = angle - prevAngle,
                drClamped = dr % 360;

            if (drClamped > 315) {
                angle -= 360 + (angle / 360)|0 * 360;
            }
            else if (drClamped > 135) {
                angle -= 180 + (angle / 360)|0 * 360;
            }
            else if (drClamped < -315) {
                angle += 360 + (angle / 360)|0 * 360;
            }
            else if (drClamped < -135) {
                angle += 180 + (angle / 360)|0 * 360;
            }
        }

        return  angle;
    }

    function getOriginXY (interactable, element) {
        var origin = interactable
                ? interactable.options.origin
                : defaultOptions.origin;

        if (origin === 'parent') {
            origin = parentElement(element);
        }
        else if (origin === 'self') {
            origin = interactable.getRect(element);
        }
        else if (trySelector(origin)) {
            origin = closest(element, origin) || { x: 0, y: 0 };
        }

        if (isFunction(origin)) {
            origin = origin(interactable && element);
        }

        if (isElement(origin))  {
            origin = getElementRect(origin);
        }

        origin.x = ('x' in origin)? origin.x : origin.left;
        origin.y = ('y' in origin)? origin.y : origin.top;

        return origin;
    }

    // http://stackoverflow.com/a/5634528/2280888
    function _getQBezierValue(t, p1, p2, p3) {
        var iT = 1 - t;
        return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
    }

    function getQuadraticCurvePoint(startX, startY, cpX, cpY, endX, endY, position) {
        return {
            x:  _getQBezierValue(position, startX, cpX, endX),
            y:  _getQBezierValue(position, startY, cpY, endY)
        };
    }

    // http://gizma.com/easing/
    function easeOutQuad (t, b, c, d) {
        t /= d;
        return -c * t*(t-2) + b;
    }

    function nodeContains (parent, child) {
        while (child) {
            if (child === parent) {
                return true;
            }

            child = child.parentNode;
        }

        return false;
    }

    function closest (child, selector) {
        var parent = parentElement(child);

        while (isElement(parent)) {
            if (matchesSelector(parent, selector)) { return parent; }

            parent = parentElement(parent);
        }

        return null;
    }

    function parentElement (node) {
        var parent = node.parentNode;

        if (isDocFrag(parent)) {
            // skip past #shado-root fragments
            while ((parent = parent.host) && isDocFrag(parent)) {}

            return parent;
        }

        return parent;
    }

    function inContext (interactable, element) {
        return interactable._context === element.ownerDocument
                || nodeContains(interactable._context, element);
    }

    function testIgnore (interactable, interactableElement, element) {
        var ignoreFrom = interactable.options.ignoreFrom;

        if (!ignoreFrom || !isElement(element)) { return false; }

        if (isString(ignoreFrom)) {
            return matchesUpTo(element, ignoreFrom, interactableElement);
        }
        else if (isElement(ignoreFrom)) {
            return nodeContains(ignoreFrom, element);
        }

        return false;
    }

    function testAllow (interactable, interactableElement, element) {
        var allowFrom = interactable.options.allowFrom;

        if (!allowFrom) { return true; }

        if (!isElement(element)) { return false; }

        if (isString(allowFrom)) {
            return matchesUpTo(element, allowFrom, interactableElement);
        }
        else if (isElement(allowFrom)) {
            return nodeContains(allowFrom, element);
        }

        return false;
    }

    function checkAxis (axis, interactable) {
        if (!interactable) { return false; }

        var thisAxis = interactable.options.drag.axis;

        return (axis === 'xy' || thisAxis === 'xy' || thisAxis === axis);
    }

    function checkSnap (interactable, action) {
        var options = interactable.options;

        if (/^resize/.test(action)) {
            action = 'resize';
        }

        return options[action].snap && options[action].snap.enabled;
    }

    function checkRestrict (interactable, action) {
        var options = interactable.options;

        if (/^resize/.test(action)) {
            action = 'resize';
        }

        return  options[action].restrict && options[action].restrict.enabled;
    }

    function checkAutoScroll (interactable, action) {
        var options = interactable.options;

        if (/^resize/.test(action)) {
            action = 'resize';
        }

        return  options[action].autoScroll && options[action].autoScroll.enabled;
    }

    function withinInteractionLimit (interactable, element, action) {
        var options = interactable.options,
            maxActions = options[action.name].max,
            maxPerElement = options[action.name].maxPerElement,
            activeInteractions = 0,
            targetCount = 0,
            targetElementCount = 0;

        for (var i = 0, len = interactions.length; i < len; i++) {
            var interaction = interactions[i],
                otherAction = interaction.prepared.name,
                active = interaction.interacting();

            if (!active) { continue; }

            activeInteractions++;

            if (activeInteractions >= maxInteractions) {
                return false;
            }

            if (interaction.target !== interactable) { continue; }

            targetCount += (otherAction === action.name)|0;

            if (targetCount >= maxActions) {
                return false;
            }

            if (interaction.element === element) {
                targetElementCount++;

                if (otherAction !== action.name || targetElementCount >= maxPerElement) {
                    return false;
                }
            }
        }

        return maxInteractions > 0;
    }

    // Test for the element that's "above" all other qualifiers
    function indexOfDeepestElement (elements) {
        var dropzone,
            deepestZone = elements[0],
            index = deepestZone? 0: -1,
            parent,
            deepestZoneParents = [],
            dropzoneParents = [],
            child,
            i,
            n;

        for (i = 1; i < elements.length; i++) {
            dropzone = elements[i];

            // an element might belong to multiple selector dropzones
            if (!dropzone || dropzone === deepestZone) {
                continue;
            }

            if (!deepestZone) {
                deepestZone = dropzone;
                index = i;
                continue;
            }

            // check if the deepest or current are document.documentElement or document.rootElement
            // - if the current dropzone is, do nothing and continue
            if (dropzone.parentNode === dropzone.ownerDocument) {
                continue;
            }
            // - if deepest is, update with the current dropzone and continue to next
            else if (deepestZone.parentNode === dropzone.ownerDocument) {
                deepestZone = dropzone;
                index = i;
                continue;
            }

            if (!deepestZoneParents.length) {
                parent = deepestZone;
                while (parent.parentNode && parent.parentNode !== parent.ownerDocument) {
                    deepestZoneParents.unshift(parent);
                    parent = parent.parentNode;
                }
            }

            // if this element is an svg element and the current deepest is
            // an HTMLElement
            if (deepestZone instanceof HTMLElement
                && dropzone instanceof SVGElement
                && !(dropzone instanceof SVGSVGElement)) {

                if (dropzone === deepestZone.parentNode) {
                    continue;
                }

                parent = dropzone.ownerSVGElement;
            }
            else {
                parent = dropzone;
            }

            dropzoneParents = [];

            while (parent.parentNode !== parent.ownerDocument) {
                dropzoneParents.unshift(parent);
                parent = parent.parentNode;
            }

            n = 0;

            // get (position of last common ancestor) + 1
            while (dropzoneParents[n] && dropzoneParents[n] === deepestZoneParents[n]) {
                n++;
            }

            var parents = [
                dropzoneParents[n - 1],
                dropzoneParents[n],
                deepestZoneParents[n]
            ];

            child = parents[0].lastChild;

            while (child) {
                if (child === parents[1]) {
                    deepestZone = dropzone;
                    index = i;
                    deepestZoneParents = [];

                    break;
                }
                else if (child === parents[2]) {
                    break;
                }

                child = child.previousSibling;
            }
        }

        return index;
    }

    function Interaction () {
        this.target          = null; // current interactable being interacted with
        this.element         = null; // the target element of the interactable
        this.dropTarget      = null; // the dropzone a drag target might be dropped into
        this.dropElement     = null; // the element at the time of checking
        this.prevDropTarget  = null; // the dropzone that was recently dragged away from
        this.prevDropElement = null; // the element at the time of checking

        this.prepared        = {     // action that's ready to be fired on next move event
            name : null,
            axis : null,
            edges: null
        };

        this.matches         = [];   // all selectors that are matched by target element
        this.matchElements   = [];   // corresponding elements

        this.inertiaStatus = {
            active       : false,
            smoothEnd    : false,
            ending       : false,

            startEvent: null,
            upCoords: {},

            xe: 0, ye: 0,
            sx: 0, sy: 0,

            t0: 0,
            vx0: 0, vys: 0,
            duration: 0,

            resumeDx: 0,
            resumeDy: 0,

            lambda_v0: 0,
            one_ve_v0: 0,
            i  : null
        };

        if (isFunction(Function.prototype.bind)) {
            this.boundInertiaFrame = this.inertiaFrame.bind(this);
            this.boundSmoothEndFrame = this.smoothEndFrame.bind(this);
        }
        else {
            var that = this;

            this.boundInertiaFrame = function () { return that.inertiaFrame(); };
            this.boundSmoothEndFrame = function () { return that.smoothEndFrame(); };
        }

        this.activeDrops = {
            dropzones: [],      // the dropzones that are mentioned below
            elements : [],      // elements of dropzones that accept the target draggable
            rects    : []       // the rects of the elements mentioned above
        };

        // keep track of added pointers
        this.pointers    = [];
        this.pointerIds  = [];
        this.downTargets = [];
        this.downTimes   = [];
        this.holdTimers  = [];

        // Previous native pointer move event coordinates
        this.prevCoords = {
            page     : { x: 0, y: 0 },
            client   : { x: 0, y: 0 },
            timeStamp: 0
        };
        // current native pointer move event coordinates
        this.curCoords = {
            page     : { x: 0, y: 0 },
            client   : { x: 0, y: 0 },
            timeStamp: 0
        };

        // Starting InteractEvent pointer coordinates
        this.startCoords = {
            page     : { x: 0, y: 0 },
            client   : { x: 0, y: 0 },
            timeStamp: 0
        };

        // Change in coordinates and time of the pointer
        this.pointerDelta = {
            page     : { x: 0, y: 0, vx: 0, vy: 0, speed: 0 },
            client   : { x: 0, y: 0, vx: 0, vy: 0, speed: 0 },
            timeStamp: 0
        };

        this.downEvent   = null;    // pointerdown/mousedown/touchstart event
        this.downPointer = {};

        this._eventTarget    = null;
        this._curEventTarget = null;

        this.prevEvent = null;      // previous action event
        this.tapTime   = 0;         // time of the most recent tap event
        this.prevTap   = null;

        this.startOffset    = { left: 0, right: 0, top: 0, bottom: 0 };
        this.restrictOffset = { left: 0, right: 0, top: 0, bottom: 0 };
        this.snapOffsets    = [];

        this.gesture = {
            start: { x: 0, y: 0 },

            startDistance: 0,   // distance between two touches of touchStart
            prevDistance : 0,
            distance     : 0,

            scale: 1,           // gesture.distance / gesture.startDistance

            startAngle: 0,      // angle of line joining two touches
            prevAngle : 0       // angle of the previous gesture event
        };

        this.snapStatus = {
            x       : 0, y       : 0,
            dx      : 0, dy      : 0,
            realX   : 0, realY   : 0,
            snappedX: 0, snappedY: 0,
            targets : [],
            locked  : false,
            changed : false
        };

        this.restrictStatus = {
            dx         : 0, dy         : 0,
            restrictedX: 0, restrictedY: 0,
            snap       : null,
            restricted : false,
            changed    : false
        };

        this.restrictStatus.snap = this.snapStatus;

        this.pointerIsDown   = false;
        this.pointerWasMoved = false;
        this.gesturing       = false;
        this.dragging        = false;
        this.resizing        = false;
        this.resizeAxes      = 'xy';

        this.mouse = false;

        interactions.push(this);
    }

    Interaction.prototype = {
        getPageXY  : function (pointer, xy) { return   getPageXY(pointer, xy, this); },
        getClientXY: function (pointer, xy) { return getClientXY(pointer, xy, this); },
        setEventXY : function (target, ptr) { return  setEventXY(target, ptr, this); },

        pointerOver: function (pointer, event, eventTarget) {
            if (this.prepared.name || !this.mouse) { return; }

            var curMatches = [],
                curMatchElements = [],
                prevTargetElement = this.element;

            this.addPointer(pointer);

            if (this.target
                && (testIgnore(this.target, this.element, eventTarget)
                    || !testAllow(this.target, this.element, eventTarget))) {
                // if the eventTarget should be ignored or shouldn't be allowed
                // clear the previous target
                this.target = null;
                this.element = null;
                this.matches = [];
                this.matchElements = [];
            }

            var elementInteractable = interactables.get(eventTarget),
                elementAction = (elementInteractable
                                 && !testIgnore(elementInteractable, eventTarget, eventTarget)
                                 && testAllow(elementInteractable, eventTarget, eventTarget)
                                 && validateAction(
                                     elementInteractable.getAction(pointer, event, this, eventTarget),
                                     elementInteractable));

            if (elementAction && !withinInteractionLimit(elementInteractable, eventTarget, elementAction)) {
                 elementAction = null;
            }

            function pushCurMatches (interactable, selector) {
                if (interactable
                    && inContext(interactable, eventTarget)
                    && !testIgnore(interactable, eventTarget, eventTarget)
                    && testAllow(interactable, eventTarget, eventTarget)
                    && matchesSelector(eventTarget, selector)) {

                    curMatches.push(interactable);
                    curMatchElements.push(eventTarget);
                }
            }

            if (elementAction) {
                this.target = elementInteractable;
                this.element = eventTarget;
                this.matches = [];
                this.matchElements = [];
            }
            else {
                interactables.forEachSelector(pushCurMatches);

                if (this.validateSelector(pointer, event, curMatches, curMatchElements)) {
                    this.matches = curMatches;
                    this.matchElements = curMatchElements;

                    this.pointerHover(pointer, event, this.matches, this.matchElements);
                    events.add(eventTarget,
                                        PointerEvent? pEventTypes.move : 'mousemove',
                                        listeners.pointerHover);
                }
                else if (this.target) {
                    if (nodeContains(prevTargetElement, eventTarget)) {
                        this.pointerHover(pointer, event, this.matches, this.matchElements);
                        events.add(this.element,
                                            PointerEvent? pEventTypes.move : 'mousemove',
                                            listeners.pointerHover);
                    }
                    else {
                        this.target = null;
                        this.element = null;
                        this.matches = [];
                        this.matchElements = [];
                    }
                }
            }
        },

        // Check what action would be performed on pointerMove target if a mouse
        // button were pressed and change the cursor accordingly
        pointerHover: function (pointer, event, eventTarget, curEventTarget, matches, matchElements) {
            var target = this.target;

            if (!this.prepared.name && this.mouse) {

                var action;

                // update pointer coords for defaultActionChecker to use
                this.setEventXY(this.curCoords, [pointer]);

                if (matches) {
                    action = this.validateSelector(pointer, event, matches, matchElements);
                }
                else if (target) {
                    action = validateAction(target.getAction(this.pointers[0], event, this, this.element), this.target);
                }

                if (target && target.options.styleCursor) {
                    if (action) {
                        target._doc.documentElement.style.cursor = getActionCursor(action);
                    }
                    else {
                        target._doc.documentElement.style.cursor = '';
                    }
                }
            }
            else if (this.prepared.name) {
                this.checkAndPreventDefault(event, target, this.element);
            }
        },

        pointerOut: function (pointer, event, eventTarget) {
            if (this.prepared.name) { return; }

            // Remove temporary event listeners for selector Interactables
            if (!interactables.get(eventTarget)) {
                events.remove(eventTarget,
                                       PointerEvent? pEventTypes.move : 'mousemove',
                                       listeners.pointerHover);
            }

            if (this.target && this.target.options.styleCursor && !this.interacting()) {
                this.target._doc.documentElement.style.cursor = '';
            }
        },

        selectorDown: function (pointer, event, eventTarget, curEventTarget) {
            var that = this,
                // copy event to be used in timeout for IE8
                eventCopy = events.useAttachEvent? extend({}, event) : event,
                element = eventTarget,
                pointerIndex = this.addPointer(pointer),
                action;

            this.holdTimers[pointerIndex] = setTimeout(function () {
                that.pointerHold(events.useAttachEvent? eventCopy : pointer, eventCopy, eventTarget, curEventTarget);
            }, defaultOptions._holdDuration);

            this.pointerIsDown = true;

            // Check if the down event hits the current inertia target
            if (this.inertiaStatus.active && this.target.selector) {
                // climb up the DOM tree from the event target
                while (isElement(element)) {

                    // if this element is the current inertia target element
                    if (element === this.element
                        // and the prospective action is the same as the ongoing one
                        && validateAction(this.target.getAction(pointer, event, this, this.element), this.target).name === this.prepared.name) {

                        // stop inertia so that the next move will be a normal one
                        cancelFrame(this.inertiaStatus.i);
                        this.inertiaStatus.active = false;

                        this.collectEventTargets(pointer, event, eventTarget, 'down');
                        return;
                    }
                    element = parentElement(element);
                }
            }

            // do nothing if interacting
            if (this.interacting()) {
                this.collectEventTargets(pointer, event, eventTarget, 'down');
                return;
            }

            function pushMatches (interactable, selector, context) {
                var elements = ie8MatchesSelector
                    ? context.querySelectorAll(selector)
                    : undefined;

                if (inContext(interactable, element)
                    && !testIgnore(interactable, element, eventTarget)
                    && testAllow(interactable, element, eventTarget)
                    && matchesSelector(element, selector, elements)) {

                    that.matches.push(interactable);
                    that.matchElements.push(element);
                }
            }

            // update pointer coords for defaultActionChecker to use
            this.setEventXY(this.curCoords, [pointer]);
            this.downEvent = event;

            while (isElement(element) && !action) {
                this.matches = [];
                this.matchElements = [];

                interactables.forEachSelector(pushMatches);

                action = this.validateSelector(pointer, event, this.matches, this.matchElements);
                element = parentElement(element);
            }

            if (action) {
                this.prepared.name  = action.name;
                this.prepared.axis  = action.axis;
                this.prepared.edges = action.edges;

                this.collectEventTargets(pointer, event, eventTarget, 'down');

                return this.pointerDown(pointer, event, eventTarget, curEventTarget, action);
            }
            else {
                // do these now since pointerDown isn't being called from here
                this.downTimes[pointerIndex] = new Date().getTime();
                this.downTargets[pointerIndex] = eventTarget;
                pointerExtend(this.downPointer, pointer);

                copyCoords(this.prevCoords, this.curCoords);
                this.pointerWasMoved = false;
            }

            this.collectEventTargets(pointer, event, eventTarget, 'down');
        },

        // Determine action to be performed on next pointerMove and add appropriate
        // style and event Listeners
        pointerDown: function (pointer, event, eventTarget, curEventTarget, forceAction) {
            if (!forceAction && !this.inertiaStatus.active && this.pointerWasMoved && this.prepared.name) {
                this.checkAndPreventDefault(event, this.target, this.element);

                return;
            }

            this.pointerIsDown = true;
            this.downEvent = event;

            var pointerIndex = this.addPointer(pointer),
                action;

            // If it is the second touch of a multi-touch gesture, keep the
            // target the same and get a new action if a target was set by the
            // first touch
            if (this.pointerIds.length > 1 && this.target._element === this.element) {
                var newAction = validateAction(forceAction || this.target.getAction(pointer, event, this, this.element), this.target);

                if (withinInteractionLimit(this.target, this.element, newAction)) {
                    action = newAction;
                }

                this.prepared.name = null;
            }
            // Otherwise, set the target if there is no action prepared
            else if (!this.prepared.name) {
                var interactable = interactables.get(curEventTarget);

                if (interactable
                    && !testIgnore(interactable, curEventTarget, eventTarget)
                    && testAllow(interactable, curEventTarget, eventTarget)
                    && (action = validateAction(forceAction || interactable.getAction(pointer, event, this, curEventTarget), interactable, eventTarget))
                    && withinInteractionLimit(interactable, curEventTarget, action)) {
                    this.target = interactable;
                    this.element = curEventTarget;
                }
            }

            var target = this.target,
                options = target && target.options;

            if (target && (forceAction || !this.prepared.name)) {
                action = action || validateAction(forceAction || target.getAction(pointer, event, this, curEventTarget), target, this.element);

                this.setEventXY(this.startCoords, this.pointers);

                if (!action) { return; }

                if (options.styleCursor) {
                    target._doc.documentElement.style.cursor = getActionCursor(action);
                }

                this.resizeAxes = action.name === 'resize'? action.axis : null;

                if (action === 'gesture' && this.pointerIds.length < 2) {
                    action = null;
                }

                this.prepared.name  = action.name;
                this.prepared.axis  = action.axis;
                this.prepared.edges = action.edges;

                this.snapStatus.snappedX = this.snapStatus.snappedY =
                    this.restrictStatus.restrictedX = this.restrictStatus.restrictedY = NaN;

                this.downTimes[pointerIndex] = new Date().getTime();
                this.downTargets[pointerIndex] = eventTarget;
                pointerExtend(this.downPointer, pointer);

                copyCoords(this.prevCoords, this.startCoords);
                this.pointerWasMoved = false;

                this.checkAndPreventDefault(event, target, this.element);
            }
            // if inertia is active try to resume action
            else if (this.inertiaStatus.active
                && curEventTarget === this.element
                && validateAction(target.getAction(pointer, event, this, this.element), target).name === this.prepared.name) {

                cancelFrame(this.inertiaStatus.i);
                this.inertiaStatus.active = false;

                this.checkAndPreventDefault(event, target, this.element);
            }
        },

        setModifications: function (coords, preEnd) {
            var target         = this.target,
                shouldMove     = true,
                shouldSnap     = checkSnap(target, this.prepared.name)     && (!target.options[this.prepared.name].snap.endOnly     || preEnd),
                shouldRestrict = checkRestrict(target, this.prepared.name) && (!target.options[this.prepared.name].restrict.endOnly || preEnd);

            if (shouldSnap    ) { this.setSnapping   (coords); } else { this.snapStatus    .locked     = false; }
            if (shouldRestrict) { this.setRestriction(coords); } else { this.restrictStatus.restricted = false; }

            if (shouldSnap && this.snapStatus.locked && !this.snapStatus.changed) {
                shouldMove = shouldRestrict && this.restrictStatus.restricted && this.restrictStatus.changed;
            }
            else if (shouldRestrict && this.restrictStatus.restricted && !this.restrictStatus.changed) {
                shouldMove = false;
            }

            return shouldMove;
        },

        setStartOffsets: function (action, interactable, element) {
            var rect = interactable.getRect(element),
                origin = getOriginXY(interactable, element),
                snap = interactable.options[this.prepared.name].snap,
                restrict = interactable.options[this.prepared.name].restrict,
                width, height;

            if (rect) {
                this.startOffset.left = this.startCoords.page.x - rect.left;
                this.startOffset.top  = this.startCoords.page.y - rect.top;

                this.startOffset.right  = rect.right  - this.startCoords.page.x;
                this.startOffset.bottom = rect.bottom - this.startCoords.page.y;

                if ('width' in rect) { width = rect.width; }
                else { width = rect.right - rect.left; }
                if ('height' in rect) { height = rect.height; }
                else { height = rect.bottom - rect.top; }
            }
            else {
                this.startOffset.left = this.startOffset.top = this.startOffset.right = this.startOffset.bottom = 0;
            }

            this.snapOffsets.splice(0);

            var snapOffset = snap && snap.offset === 'startCoords'
                                ? {
                                    x: this.startCoords.page.x - origin.x,
                                    y: this.startCoords.page.y - origin.y
                                }
                                : snap && snap.offset || { x: 0, y: 0 };

            if (rect && snap && snap.relativePoints && snap.relativePoints.length) {
                for (var i = 0; i < snap.relativePoints.length; i++) {
                    this.snapOffsets.push({
                        x: this.startOffset.left - (width  * snap.relativePoints[i].x) + snapOffset.x,
                        y: this.startOffset.top  - (height * snap.relativePoints[i].y) + snapOffset.y
                    });
                }
            }
            else {
                this.snapOffsets.push(snapOffset);
            }

            if (rect && restrict.elementRect) {
                this.restrictOffset.left = this.startOffset.left - (width  * restrict.elementRect.left);
                this.restrictOffset.top  = this.startOffset.top  - (height * restrict.elementRect.top);

                this.restrictOffset.right  = this.startOffset.right  - (width  * (1 - restrict.elementRect.right));
                this.restrictOffset.bottom = this.startOffset.bottom - (height * (1 - restrict.elementRect.bottom));
            }
            else {
                this.restrictOffset.left = this.restrictOffset.top = this.restrictOffset.right = this.restrictOffset.bottom = 0;
            }
        },

        /*\
         * Interaction.start
         [ method ]
         *
         * Start an action with the given Interactable and Element as tartgets. The
         * action must be enabled for the target Interactable and an appropriate number
         * of pointers must be held down â€“ 1 for drag/resize, 2 for gesture.
         *
         * Use it with `interactable.<action>able({ manualStart: false })` to always
         * [start actions manually](https://github.com/taye/interact.js/issues/114)
         *
         - action       (object)  The action to be performed - drag, resize, etc.
         - interactable (Interactable) The Interactable to target
         - element      (Element) The DOM Element to target
         = (object) interact
         **
         | interact(target)
         |   .draggable({
         |     // disable the default drag start by down->move
         |     manualStart: true
         |   })
         |   // start dragging after the user holds the pointer down
         |   .on('hold', function (event) {
         |     var interaction = event.interaction;
         |
         |     if (!interaction.interacting()) {
         |       interaction.start({ name: 'drag' },
         |                         event.interactable,
         |                         event.currentTarget);
         |     }
         | });
        \*/
        start: function (action, interactable, element) {
            if (this.interacting()
                || !this.pointerIsDown
                || this.pointerIds.length < (action.name === 'gesture'? 2 : 1)) {
                return;
            }

            // if this interaction had been removed after stopping
            // add it back
            if (indexOf(interactions, this) === -1) {
                interactions.push(this);
            }

            // set the startCoords if there was no prepared action
            if (!this.prepared.name) {
                this.setEventXY(this.startCoords);
            }

            this.prepared.name  = action.name;
            this.prepared.axis  = action.axis;
            this.prepared.edges = action.edges;
            this.target         = interactable;
            this.element        = element;

            this.setStartOffsets(action.name, interactable, element);
            this.setModifications(this.startCoords.page);

            this.prevEvent = this[this.prepared.name + 'Start'](this.downEvent);
        },

        pointerMove: function (pointer, event, eventTarget, curEventTarget, preEnd) {
            if (this.inertiaStatus.active) {
                var pageUp   = this.inertiaStatus.upCoords.page;
                var clientUp = this.inertiaStatus.upCoords.client;

                var inertiaPosition = {
                    pageX  : pageUp.x   + this.inertiaStatus.sx,
                    pageY  : pageUp.y   + this.inertiaStatus.sy,
                    clientX: clientUp.x + this.inertiaStatus.sx,
                    clientY: clientUp.y + this.inertiaStatus.sy
                };

                this.setEventXY(this.curCoords, [inertiaPosition]);
            }
            else {
                this.recordPointer(pointer);
                this.setEventXY(this.curCoords, this.pointers);
            }

            var duplicateMove = (this.curCoords.page.x === this.prevCoords.page.x
                                 && this.curCoords.page.y === this.prevCoords.page.y
                                 && this.curCoords.client.x === this.prevCoords.client.x
                                 && this.curCoords.client.y === this.prevCoords.client.y);

            var dx, dy,
                pointerIndex = this.mouse? 0 : indexOf(this.pointerIds, getPointerId(pointer));

            // register movement greater than pointerMoveTolerance
            if (this.pointerIsDown && !this.pointerWasMoved) {
                dx = this.curCoords.client.x - this.startCoords.client.x;
                dy = this.curCoords.client.y - this.startCoords.client.y;

                this.pointerWasMoved = hypot(dx, dy) > pointerMoveTolerance;
            }

            if (!duplicateMove && (!this.pointerIsDown || this.pointerWasMoved)) {
                if (this.pointerIsDown) {
                    clearTimeout(this.holdTimers[pointerIndex]);
                }

                this.collectEventTargets(pointer, event, eventTarget, 'move');
            }

            if (!this.pointerIsDown) { return; }

            if (duplicateMove && this.pointerWasMoved && !preEnd) {
                this.checkAndPreventDefault(event, this.target, this.element);
                return;
            }

            // set pointer coordinate, time changes and speeds
            setEventDeltas(this.pointerDelta, this.prevCoords, this.curCoords);

            if (!this.prepared.name) { return; }

            if (this.pointerWasMoved
                // ignore movement while inertia is active
                && (!this.inertiaStatus.active || (pointer instanceof InteractEvent && /inertiastart/.test(pointer.type)))) {

                // if just starting an action, calculate the pointer speed now
                if (!this.interacting()) {
                    setEventDeltas(this.pointerDelta, this.prevCoords, this.curCoords);

                    // check if a drag is in the correct axis
                    if (this.prepared.name === 'drag') {
                        var absX = Math.abs(dx),
                            absY = Math.abs(dy),
                            targetAxis = this.target.options.drag.axis,
                            axis = (absX > absY ? 'x' : absX < absY ? 'y' : 'xy');

                        // if the movement isn't in the axis of the interactable
                        if (axis !== 'xy' && targetAxis !== 'xy' && targetAxis !== axis) {
                            // cancel the prepared action
                            this.prepared.name = null;

                            // then try to get a drag from another ineractable

                            var element = eventTarget;

                            // check element interactables
                            while (isElement(element)) {
                                var elementInteractable = interactables.get(element);

                                if (elementInteractable
                                    && elementInteractable !== this.target
                                    && !elementInteractable.options.drag.manualStart
                                    && elementInteractable.getAction(this.downPointer, this.downEvent, this, element).name === 'drag'
                                    && checkAxis(axis, elementInteractable)) {

                                    this.prepared.name = 'drag';
                                    this.target = elementInteractable;
                                    this.element = element;
                                    break;
                                }

                                element = parentElement(element);
                            }

                            // if there's no drag from element interactables,
                            // check the selector interactables
                            if (!this.prepared.name) {
                                var thisInteraction = this;

                                var getDraggable = function (interactable, selector, context) {
                                    var elements = ie8MatchesSelector
                                        ? context.querySelectorAll(selector)
                                        : undefined;

                                    if (interactable === thisInteraction.target) { return; }

                                    if (inContext(interactable, eventTarget)
                                        && !interactable.options.drag.manualStart
                                        && !testIgnore(interactable, element, eventTarget)
                                        && testAllow(interactable, element, eventTarget)
                                        && matchesSelector(element, selector, elements)
                                        && interactable.getAction(thisInteraction.downPointer, thisInteraction.downEvent, thisInteraction, element).name === 'drag'
                                        && checkAxis(axis, interactable)
                                        && withinInteractionLimit(interactable, element, 'drag')) {

                                        return interactable;
                                    }
                                };

                                element = eventTarget;

                                while (isElement(element)) {
                                    var selectorInteractable = interactables.forEachSelector(getDraggable);

                                    if (selectorInteractable) {
                                        this.prepared.name = 'drag';
                                        this.target = selectorInteractable;
                                        this.element = element;
                                        break;
                                    }

                                    element = parentElement(element);
                                }
                            }
                        }
                    }
                }

                var starting = !!this.prepared.name && !this.interacting();

                if (starting
                    && (this.target.options[this.prepared.name].manualStart
                        || !withinInteractionLimit(this.target, this.element, this.prepared))) {
                    this.stop(event);
                    return;
                }

                if (this.prepared.name && this.target) {
                    if (starting) {
                        this.start(this.prepared, this.target, this.element);
                    }

                    var shouldMove = this.setModifications(this.curCoords.page, preEnd);

                    // move if snapping or restriction doesn't prevent it
                    if (shouldMove || starting) {
                        this.prevEvent = this[this.prepared.name + 'Move'](event);
                    }

                    this.checkAndPreventDefault(event, this.target, this.element);
                }
            }

            copyCoords(this.prevCoords, this.curCoords);

            if (this.dragging || this.resizing) {
                this.autoScrollMove(pointer);
            }
        },

        dragStart: function (event) {
            var dragEvent = new InteractEvent(this, event, 'drag', 'start', this.element);

            this.dragging = true;
            this.target.fire(dragEvent);

            // reset active dropzones
            this.activeDrops.dropzones = [];
            this.activeDrops.elements  = [];
            this.activeDrops.rects     = [];

            if (!this.dynamicDrop) {
                this.setActiveDrops(this.element);
            }

            var dropEvents = this.getDropEvents(event, dragEvent);

            if (dropEvents.activate) {
                this.fireActiveDrops(dropEvents.activate);
            }

            return dragEvent;
        },

        dragMove: function (event) {
            var target = this.target,
                dragEvent  = new InteractEvent(this, event, 'drag', 'move', this.element),
                draggableElement = this.element,
                drop = this.getDrop(dragEvent, event, draggableElement);

            this.dropTarget = drop.dropzone;
            this.dropElement = drop.element;

            var dropEvents = this.getDropEvents(event, dragEvent);

            target.fire(dragEvent);

            if (dropEvents.leave) { this.prevDropTarget.fire(dropEvents.leave); }
            if (dropEvents.enter) {     this.dropTarget.fire(dropEvents.enter); }
            if (dropEvents.move ) {     this.dropTarget.fire(dropEvents.move ); }

            this.prevDropTarget  = this.dropTarget;
            this.prevDropElement = this.dropElement;

            return dragEvent;
        },

        resizeStart: function (event) {
            var resizeEvent = new InteractEvent(this, event, 'resize', 'start', this.element);

            if (this.prepared.edges) {
                var startRect = this.target.getRect(this.element);

                /*
                 * When using the `resizable.square` or `resizable.preserveAspectRatio` options, resizing from one edge
                 * will affect another. E.g. with `resizable.square`, resizing to make the right edge larger will make
                 * the bottom edge larger by the same amount. We call these 'linked' edges. Any linked edges will depend
                 * on the active edges and the edge being interacted with.
                 */
                if (this.target.options.resize.square || this.target.options.resize.preserveAspectRatio) {
                    var linkedEdges = extend({}, this.prepared.edges);

                    linkedEdges.top    = linkedEdges.top    || (linkedEdges.left   && !linkedEdges.bottom);
                    linkedEdges.left   = linkedEdges.left   || (linkedEdges.top    && !linkedEdges.right );
                    linkedEdges.bottom = linkedEdges.bottom || (linkedEdges.right  && !linkedEdges.top   );
                    linkedEdges.right  = linkedEdges.right  || (linkedEdges.bottom && !linkedEdges.left  );

                    this.prepared._linkedEdges = linkedEdges;
                }
                else {
                    this.prepared._linkedEdges = null;
                }

                // if using `resizable.preserveAspectRatio` option, record aspect ratio at the start of the resize
                if (this.target.options.resize.preserveAspectRatio) {
                    this.resizeStartAspectRatio = startRect.width / startRect.height;
                }

                this.resizeRects = {
                    start     : startRect,
                    current   : extend({}, startRect),
                    restricted: extend({}, startRect),
                    previous  : extend({}, startRect),
                    delta     : {
                        left: 0, right : 0, width : 0,
                        top : 0, bottom: 0, height: 0
                    }
                };

                resizeEvent.rect = this.resizeRects.restricted;
                resizeEvent.deltaRect = this.resizeRects.delta;
            }

            this.target.fire(resizeEvent);

            this.resizing = true;

            return resizeEvent;
        },

        resizeMove: function (event) {
            var resizeEvent = new InteractEvent(this, event, 'resize', 'move', this.element);

            var edges = this.prepared.edges,
                invert = this.target.options.resize.invert,
                invertible = invert === 'reposition' || invert === 'negate';

            if (edges) {
                var dx = resizeEvent.dx,
                    dy = resizeEvent.dy,

                    start      = this.resizeRects.start,
                    current    = this.resizeRects.current,
                    restricted = this.resizeRects.restricted,
                    delta      = this.resizeRects.delta,
                    previous   = extend(this.resizeRects.previous, restricted),

                    originalEdges = edges;

                // `resize.preserveAspectRatio` takes precedence over `resize.square`
                if (this.target.options.resize.preserveAspectRatio) {
                    var resizeStartAspectRatio = this.resizeStartAspectRatio;

                    edges = this.prepared._linkedEdges;

                    if ((originalEdges.left && originalEdges.bottom)
                        || (originalEdges.right && originalEdges.top)) {
                        dy = -dx / resizeStartAspectRatio;
                    }
                    else if (originalEdges.left || originalEdges.right) { dy = dx / resizeStartAspectRatio; }
                    else if (originalEdges.top || originalEdges.bottom) { dx = dy * resizeStartAspectRatio; }
                }
                else if (this.target.options.resize.square) {
                    edges = this.prepared._linkedEdges;

                    if ((originalEdges.left && originalEdges.bottom)
                        || (originalEdges.right && originalEdges.top)) {
                        dy = -dx;
                    }
                    else if (originalEdges.left || originalEdges.right) { dy = dx; }
                    else if (originalEdges.top || originalEdges.bottom) { dx = dy; }
                }

                // update the 'current' rect without modifications
                if (edges.top   ) { current.top    += dy; }
                if (edges.bottom) { current.bottom += dy; }
                if (edges.left  ) { current.left   += dx; }
                if (edges.right ) { current.right  += dx; }

                if (invertible) {
                    // if invertible, copy the current rect
                    extend(restricted, current);

                    if (invert === 'reposition') {
                        // swap edge values if necessary to keep width/height positive
                        var swap;

                        if (restricted.top > restricted.bottom) {
                            swap = restricted.top;

                            restricted.top = restricted.bottom;
                            restricted.bottom = swap;
                        }
                        if (restricted.left > restricted.right) {
                            swap = restricted.left;

                            restricted.left = restricted.right;
                            restricted.right = swap;
                        }
                    }
                }
                else {
                    // if not invertible, restrict to minimum of 0x0 rect
                    restricted.top    = Math.min(current.top, start.bottom);
                    restricted.bottom = Math.max(current.bottom, start.top);
                    restricted.left   = Math.min(current.left, start.right);
                    restricted.right  = Math.max(current.right, start.left);
                }

                restricted.width  = restricted.right  - restricted.left;
                restricted.height = restricted.bottom - restricted.top ;

                for (var edge in restricted) {
                    delta[edge] = restricted[edge] - previous[edge];
                }

                resizeEvent.edges = this.prepared.edges;
                resizeEvent.rect = restricted;
                resizeEvent.deltaRect = delta;
            }

            this.target.fire(resizeEvent);

            return resizeEvent;
        },

        gestureStart: function (event) {
            var gestureEvent = new InteractEvent(this, event, 'gesture', 'start', this.element);

            gestureEvent.ds = 0;

            this.gesture.startDistance = this.gesture.prevDistance = gestureEvent.distance;
            this.gesture.startAngle = this.gesture.prevAngle = gestureEvent.angle;
            this.gesture.scale = 1;

            this.gesturing = true;

            this.target.fire(gestureEvent);

            return gestureEvent;
        },

        gestureMove: function (event) {
            if (!this.pointerIds.length) {
                return this.prevEvent;
            }

            var gestureEvent;

            gestureEvent = new InteractEvent(this, event, 'gesture', 'move', this.element);
            gestureEvent.ds = gestureEvent.scale - this.gesture.scale;

            this.target.fire(gestureEvent);

            this.gesture.prevAngle = gestureEvent.angle;
            this.gesture.prevDistance = gestureEvent.distance;

            if (gestureEvent.scale !== Infinity &&
                gestureEvent.scale !== null &&
                gestureEvent.scale !== undefined  &&
                !isNaN(gestureEvent.scale)) {

                this.gesture.scale = gestureEvent.scale;
            }

            return gestureEvent;
        },

        pointerHold: function (pointer, event, eventTarget) {
            this.collectEventTargets(pointer, event, eventTarget, 'hold');
        },

        pointerUp: function (pointer, event, eventTarget, curEventTarget) {
            var pointerIndex = this.mouse? 0 : indexOf(this.pointerIds, getPointerId(pointer));

            clearTimeout(this.holdTimers[pointerIndex]);

            this.collectEventTargets(pointer, event, eventTarget, 'up' );
            this.collectEventTargets(pointer, event, eventTarget, 'tap');

            this.pointerEnd(pointer, event, eventTarget, curEventTarget);

            this.removePointer(pointer);
        },

        pointerCancel: function (pointer, event, eventTarget, curEventTarget) {
            var pointerIndex = this.mouse? 0 : indexOf(this.pointerIds, getPointerId(pointer));

            clearTimeout(this.holdTimers[pointerIndex]);

            this.collectEventTargets(pointer, event, eventTarget, 'cancel');
            this.pointerEnd(pointer, event, eventTarget, curEventTarget);

            this.removePointer(pointer);
        },

        // http://www.quirksmode.org/dom/events/click.html
        // >Events leading to dblclick
        //
        // IE8 doesn't fire down event before dblclick.
        // This workaround tries to fire a tap and doubletap after dblclick
        ie8Dblclick: function (pointer, event, eventTarget) {
            if (this.prevTap
                && event.clientX === this.prevTap.clientX
                && event.clientY === this.prevTap.clientY
                && eventTarget   === this.prevTap.target) {

                this.downTargets[0] = eventTarget;
                this.downTimes[0] = new Date().getTime();
                this.collectEventTargets(pointer, event, eventTarget, 'tap');
            }
        },

        // End interact move events and stop auto-scroll unless inertia is enabled
        pointerEnd: function (pointer, event, eventTarget, curEventTarget) {
            var endEvent,
                target = this.target,
                options = target && target.options,
                inertiaOptions = options && this.prepared.name && options[this.prepared.name].inertia,
                inertiaStatus = this.inertiaStatus;

            if (this.interacting()) {

                if (inertiaStatus.active && !inertiaStatus.ending) { return; }

                var pointerSpeed,
                    now = new Date().getTime(),
                    inertiaPossible = false,
                    inertia = false,
                    smoothEnd = false,
                    endSnap = checkSnap(target, this.prepared.name) && options[this.prepared.name].snap.endOnly,
                    endRestrict = checkRestrict(target, this.prepared.name) && options[this.prepared.name].restrict.endOnly,
                    dx = 0,
                    dy = 0,
                    startEvent;

                if (this.dragging) {
                    if      (options.drag.axis === 'x' ) { pointerSpeed = Math.abs(this.pointerDelta.client.vx); }
                    else if (options.drag.axis === 'y' ) { pointerSpeed = Math.abs(this.pointerDelta.client.vy); }
                    else   /*options.drag.axis === 'xy'*/{ pointerSpeed = this.pointerDelta.client.speed; }
                }
                else {
                    pointerSpeed = this.pointerDelta.client.speed;
                }

                // check if inertia should be started
                inertiaPossible = (inertiaOptions && inertiaOptions.enabled
                                   && this.prepared.name !== 'gesture'
                                   && event !== inertiaStatus.startEvent);

                inertia = (inertiaPossible
                           && (now - this.curCoords.timeStamp) < 50
                           && pointerSpeed > inertiaOptions.minSpeed
                           && pointerSpeed > inertiaOptions.endSpeed);

                if (inertiaPossible && !inertia && (endSnap || endRestrict)) {

                    var snapRestrict = {};

                    snapRestrict.snap = snapRestrict.restrict = snapRestrict;

                    if (endSnap) {
                        this.setSnapping(this.curCoords.page, snapRestrict);
                        if (snapRestrict.locked) {
                            dx += snapRestrict.dx;
                            dy += snapRestrict.dy;
                        }
                    }

                    if (endRestrict) {
                        this.setRestriction(this.curCoords.page, snapRestrict);
                        if (snapRestrict.restricted) {
                            dx += snapRestrict.dx;
                            dy += snapRestrict.dy;
                        }
                    }

                    if (dx || dy) {
                        smoothEnd = true;
                    }
                }

                if (inertia || smoothEnd) {
                    copyCoords(inertiaStatus.upCoords, this.curCoords);

                    this.pointers[0] = inertiaStatus.startEvent = startEvent =
                        new InteractEvent(this, event, this.prepared.name, 'inertiastart', this.element);

                    inertiaStatus.t0 = now;

                    target.fire(inertiaStatus.startEvent);

                    if (inertia) {
                        inertiaStatus.vx0 = this.pointerDelta.client.vx;
                        inertiaStatus.vy0 = this.pointerDelta.client.vy;
                        inertiaStatus.v0 = pointerSpeed;

                        this.calcInertia(inertiaStatus);

                        var page = extend({}, this.curCoords.page),
                            origin = getOriginXY(target, this.element),
                            statusObject;

                        page.x = page.x + inertiaStatus.xe - origin.x;
                        page.y = page.y + inertiaStatus.ye - origin.y;

                        statusObject = {
                            useStatusXY: true,
                            x: page.x,
                            y: page.y,
                            dx: 0,
                            dy: 0,
                            snap: null
                        };

                        statusObject.snap = statusObject;

                        dx = dy = 0;

                        if (endSnap) {
                            var snap = this.setSnapping(this.curCoords.page, statusObject);

                            if (snap.locked) {
                                dx += snap.dx;
                                dy += snap.dy;
                            }
                        }

                        if (endRestrict) {
                            var restrict = this.setRestriction(this.curCoords.page, statusObject);

                            if (restrict.restricted) {
                                dx += restrict.dx;
                                dy += restrict.dy;
                            }
                        }

                        inertiaStatus.modifiedXe += dx;
                        inertiaStatus.modifiedYe += dy;

                        inertiaStatus.i = reqFrame(this.boundInertiaFrame);
                    }
                    else {
                        inertiaStatus.smoothEnd = true;
                        inertiaStatus.xe = dx;
                        inertiaStatus.ye = dy;

                        inertiaStatus.sx = inertiaStatus.sy = 0;

                        inertiaStatus.i = reqFrame(this.boundSmoothEndFrame);
                    }

                    inertiaStatus.active = true;
                    return;
                }

                if (endSnap || endRestrict) {
                    // fire a move event at the snapped coordinates
                    this.pointerMove(pointer, event, eventTarget, curEventTarget, true);
                }
            }

            if (this.dragging) {
                endEvent = new InteractEvent(this, event, 'drag', 'end', this.element);

                var draggableElement = this.element,
                    drop = this.getDrop(endEvent, event, draggableElement);

                this.dropTarget = drop.dropzone;
                this.dropElement = drop.element;

                var dropEvents = this.getDropEvents(event, endEvent);

                if (dropEvents.leave) { this.prevDropTarget.fire(dropEvents.leave); }
                if (dropEvents.enter) {     this.dropTarget.fire(dropEvents.enter); }
                if (dropEvents.drop ) {     this.dropTarget.fire(dropEvents.drop ); }
                if (dropEvents.deactivate) {
                    this.fireActiveDrops(dropEvents.deactivate);
                }

                target.fire(endEvent);
            }
            else if (this.resizing) {
                endEvent = new InteractEvent(this, event, 'resize', 'end', this.element);
                target.fire(endEvent);
            }
            else if (this.gesturing) {
                endEvent = new InteractEvent(this, event, 'gesture', 'end', this.element);
                target.fire(endEvent);
            }

            this.stop(event);
        },

        collectDrops: function (element) {
            var drops = [],
                elements = [],
                i;

            element = element || this.element;

            // collect all dropzones and their elements which qualify for a drop
            for (i = 0; i < interactables.length; i++) {
                if (!interactables[i].options.drop.enabled) { continue; }

                var current = interactables[i],
                    accept = current.options.drop.accept;

                // test the draggable element against the dropzone's accept setting
                if ((isElement(accept) && accept !== element)
                    || (isString(accept)
                        && !matchesSelector(element, accept))) {

                    continue;
                }

                // query for new elements if necessary
                var dropElements = current.selector? current._context.querySelectorAll(current.selector) : [current._element];

                for (var j = 0, len = dropElements.length; j < len; j++) {
                    var currentElement = dropElements[j];

                    if (currentElement === element) {
                        continue;
                    }

                    drops.push(current);
                    elements.push(currentElement);
                }
            }

            return {
                dropzones: drops,
                elements: elements
            };
        },

        fireActiveDrops: function (event) {
            var i,
                current,
                currentElement,
                prevElement;

            // loop through all active dropzones and trigger event
            for (i = 0; i < this.activeDrops.dropzones.length; i++) {
                current = this.activeDrops.dropzones[i];
                currentElement = this.activeDrops.elements [i];

                // prevent trigger of duplicate events on same element
                if (currentElement !== prevElement) {
                    // set current element as event target
                    event.target = currentElement;
                    current.fire(event);
                }
                prevElement = currentElement;
            }
        },

        // Collect a new set of possible drops and save them in activeDrops.
        // setActiveDrops should always be called when a drag has just started or a
        // drag event happens while dynamicDrop is true
        setActiveDrops: function (dragElement) {
            // get dropzones and their elements that could receive the draggable
            var possibleDrops = this.collectDrops(dragElement, true);

            this.activeDrops.dropzones = possibleDrops.dropzones;
            this.activeDrops.elements  = possibleDrops.elements;
            this.activeDrops.rects     = [];

            for (var i = 0; i < this.activeDrops.dropzones.length; i++) {
                this.activeDrops.rects[i] = this.activeDrops.dropzones[i].getRect(this.activeDrops.elements[i]);
            }
        },

        getDrop: function (dragEvent, event, dragElement) {
            var validDrops = [];

            if (dynamicDrop) {
                this.setActiveDrops(dragElement);
            }

            // collect all dropzones and their elements which qualify for a drop
            for (var j = 0; j < this.activeDrops.dropzones.length; j++) {
                var current        = this.activeDrops.dropzones[j],
                    currentElement = this.activeDrops.elements [j],
                    rect           = this.activeDrops.rects    [j];

                validDrops.push(current.dropCheck(dragEvent, event, this.target, dragElement, currentElement, rect)
                                ? currentElement
                                : null);
            }

            // get the most appropriate dropzone based on DOM depth and order
            var dropIndex = indexOfDeepestElement(validDrops),
                dropzone  = this.activeDrops.dropzones[dropIndex] || null,
                element   = this.activeDrops.elements [dropIndex] || null;

            return {
                dropzone: dropzone,
                element: element
            };
        },

        getDropEvents: function (pointerEvent, dragEvent) {
            var dropEvents = {
                enter     : null,
                leave     : null,
                activate  : null,
                deactivate: null,
                move      : null,
                drop      : null
            };

            if (this.dropElement !== this.prevDropElement) {
                // if there was a prevDropTarget, create a dragleave event
                if (this.prevDropTarget) {
                    dropEvents.leave = {
                        target       : this.prevDropElement,
                        dropzone     : this.prevDropTarget,
                        relatedTarget: dragEvent.target,
                        draggable    : dragEvent.interactable,
                        dragEvent    : dragEvent,
                        interaction  : this,
                        timeStamp    : dragEvent.timeStamp,
                        type         : 'dragleave'
                    };

                    dragEvent.dragLeave = this.prevDropElement;
                    dragEvent.prevDropzone = this.prevDropTarget;
                }
                // if the dropTarget is not null, create a dragenter event
                if (this.dropTarget) {
                    dropEvents.enter = {
                        target       : this.dropElement,
                        dropzone     : this.dropTarget,
                        relatedTarget: dragEvent.target,
                        draggable    : dragEvent.interactable,
                        dragEvent    : dragEvent,
                        interaction  : this,
                        timeStamp    : dragEvent.timeStamp,
                        type         : 'dragenter'
                    };

                    dragEvent.dragEnter = this.dropElement;
                    dragEvent.dropzone = this.dropTarget;
                }
            }

            if (dragEvent.type === 'dragend' && this.dropTarget) {
                dropEvents.drop = {
                    target       : this.dropElement,
                    dropzone     : this.dropTarget,
                    relatedTarget: dragEvent.target,
                    draggable    : dragEvent.interactable,
                    dragEvent    : dragEvent,
                    interaction  : this,
                    timeStamp    : dragEvent.timeStamp,
                    type         : 'drop'
                };

                dragEvent.dropzone = this.dropTarget;
            }
            if (dragEvent.type === 'dragstart') {
                dropEvents.activate = {
                    target       : null,
                    dropzone     : null,
                    relatedTarget: dragEvent.target,
                    draggable    : dragEvent.interactable,
                    dragEvent    : dragEvent,
                    interaction  : this,
                    timeStamp    : dragEvent.timeStamp,
                    type         : 'dropactivate'
                };
            }
            if (dragEvent.type === 'dragend') {
                dropEvents.deactivate = {
                    target       : null,
                    dropzone     : null,
                    relatedTarget: dragEvent.target,
                    draggable    : dragEvent.interactable,
                    dragEvent    : dragEvent,
                    interaction  : this,
                    timeStamp    : dragEvent.timeStamp,
                    type         : 'dropdeactivate'
                };
            }
            if (dragEvent.type === 'dragmove' && this.dropTarget) {
                dropEvents.move = {
                    target       : this.dropElement,
                    dropzone     : this.dropTarget,
                    relatedTarget: dragEvent.target,
                    draggable    : dragEvent.interactable,
                    dragEvent    : dragEvent,
                    interaction  : this,
                    dragmove     : dragEvent,
                    timeStamp    : dragEvent.timeStamp,
                    type         : 'dropmove'
                };
                dragEvent.dropzone = this.dropTarget;
            }

            return dropEvents;
        },

        currentAction: function () {
            return (this.dragging && 'drag') || (this.resizing && 'resize') || (this.gesturing && 'gesture') || null;
        },

        interacting: function () {
            return this.dragging || this.resizing || this.gesturing;
        },

        clearTargets: function () {
            this.target = this.element = null;

            this.dropTarget = this.dropElement = this.prevDropTarget = this.prevDropElement = null;
        },

        stop: function (event) {
            if (this.interacting()) {
                autoScroll.stop();
                this.matches = [];
                this.matchElements = [];

                var target = this.target;

                if (target.options.styleCursor) {
                    target._doc.documentElement.style.cursor = '';
                }

                // prevent Default only if were previously interacting
                if (event && isFunction(event.preventDefault)) {
                    this.checkAndPreventDefault(event, target, this.element);
                }

                if (this.dragging) {
                    this.activeDrops.dropzones = this.activeDrops.elements = this.activeDrops.rects = null;
                }
            }

            this.clearTargets();

            this.pointerIsDown = this.snapStatus.locked = this.dragging = this.resizing = this.gesturing = false;
            this.prepared.name = this.prevEvent = null;
            this.inertiaStatus.resumeDx = this.inertiaStatus.resumeDy = 0;

            // remove pointers if their ID isn't in this.pointerIds
            for (var i = 0; i < this.pointers.length; i++) {
                if (indexOf(this.pointerIds, getPointerId(this.pointers[i])) === -1) {
                    this.pointers.splice(i, 1);
                }
            }
        },

        inertiaFrame: function () {
            var inertiaStatus = this.inertiaStatus,
                options = this.target.options[this.prepared.name].inertia,
                lambda = options.resistance,
                t = new Date().getTime() / 1000 - inertiaStatus.t0;

            if (t < inertiaStatus.te) {

                var progress =  1 - (Math.exp(-lambda * t) - inertiaStatus.lambda_v0) / inertiaStatus.one_ve_v0;

                if (inertiaStatus.modifiedXe === inertiaStatus.xe && inertiaStatus.modifiedYe === inertiaStatus.ye) {
                    inertiaStatus.sx = inertiaStatus.xe * progress;
                    inertiaStatus.sy = inertiaStatus.ye * progress;
                }
                else {
                    var quadPoint = getQuadraticCurvePoint(
                            0, 0,
                            inertiaStatus.xe, inertiaStatus.ye,
                            inertiaStatus.modifiedXe, inertiaStatus.modifiedYe,
                            progress);

                    inertiaStatus.sx = quadPoint.x;
                    inertiaStatus.sy = quadPoint.y;
                }

                this.pointerMove(inertiaStatus.startEvent, inertiaStatus.startEvent);

                inertiaStatus.i = reqFrame(this.boundInertiaFrame);
            }
            else {
                inertiaStatus.ending = true;

                inertiaStatus.sx = inertiaStatus.modifiedXe;
                inertiaStatus.sy = inertiaStatus.modifiedYe;

                this.pointerMove(inertiaStatus.startEvent, inertiaStatus.startEvent);
                this.pointerEnd(inertiaStatus.startEvent, inertiaStatus.startEvent);

                inertiaStatus.active = inertiaStatus.ending = false;
            }
        },

        smoothEndFrame: function () {
            var inertiaStatus = this.inertiaStatus,
                t = new Date().getTime() - inertiaStatus.t0,
                duration = this.target.options[this.prepared.name].inertia.smoothEndDuration;

            if (t < duration) {
                inertiaStatus.sx = easeOutQuad(t, 0, inertiaStatus.xe, duration);
                inertiaStatus.sy = easeOutQuad(t, 0, inertiaStatus.ye, duration);

                this.pointerMove(inertiaStatus.startEvent, inertiaStatus.startEvent);

                inertiaStatus.i = reqFrame(this.boundSmoothEndFrame);
            }
            else {
                inertiaStatus.ending = true;

                inertiaStatus.sx = inertiaStatus.xe;
                inertiaStatus.sy = inertiaStatus.ye;

                this.pointerMove(inertiaStatus.startEvent, inertiaStatus.startEvent);
                this.pointerEnd(inertiaStatus.startEvent, inertiaStatus.startEvent);

                inertiaStatus.smoothEnd =
                  inertiaStatus.active = inertiaStatus.ending = false;
            }
        },

        addPointer: function (pointer) {
            var id = getPointerId(pointer),
                index = this.mouse? 0 : indexOf(this.pointerIds, id);

            if (index === -1) {
                index = this.pointerIds.length;
            }

            this.pointerIds[index] = id;
            this.pointers[index] = pointer;

            return index;
        },

        removePointer: function (pointer) {
            var id = getPointerId(pointer),
                index = this.mouse? 0 : indexOf(this.pointerIds, id);

            if (index === -1) { return; }

            this.pointers   .splice(index, 1);
            this.pointerIds .splice(index, 1);
            this.downTargets.splice(index, 1);
            this.downTimes  .splice(index, 1);
            this.holdTimers .splice(index, 1);
        },

        recordPointer: function (pointer) {
            var index = this.mouse? 0: indexOf(this.pointerIds, getPointerId(pointer));

            if (index === -1) { return; }

            this.pointers[index] = pointer;
        },

        collectEventTargets: function (pointer, event, eventTarget, eventType) {
            var pointerIndex = this.mouse? 0 : indexOf(this.pointerIds, getPointerId(pointer));

            // do not fire a tap event if the pointer was moved before being lifted
            if (eventType === 'tap' && (this.pointerWasMoved
                // or if the pointerup target is different to the pointerdown target
                || !(this.downTargets[pointerIndex] && this.downTargets[pointerIndex] === eventTarget))) {
                return;
            }

            var targets = [],
                elements = [],
                element = eventTarget;

            function collectSelectors (interactable, selector, context) {
                var els = ie8MatchesSelector
                        ? context.querySelectorAll(selector)
                        : undefined;

                if (interactable._iEvents[eventType]
                    && isElement(element)
                    && inContext(interactable, element)
                    && !testIgnore(interactable, element, eventTarget)
                    && testAllow(interactable, element, eventTarget)
                    && matchesSelector(element, selector, els)) {

                    targets.push(interactable);
                    elements.push(element);
                }
            }

            while (element) {
                if (interact.isSet(element) && interact(element)._iEvents[eventType]) {
                    targets.push(interact(element));
                    elements.push(element);
                }

                interactables.forEachSelector(collectSelectors);

                element = parentElement(element);
            }

            // create the tap event even if there are no listeners so that
            // doubletap can still be created and fired
            if (targets.length || eventType === 'tap') {
                this.firePointers(pointer, event, eventTarget, targets, elements, eventType);
            }
        },

        firePointers: function (pointer, event, eventTarget, targets, elements, eventType) {
            var pointerIndex = this.mouse? 0 : indexOf(this.pointerIds, getPointerId(pointer)),
                pointerEvent = {},
                i,
                // for tap events
                interval, createNewDoubleTap;

            // if it's a doubletap then the event properties would have been
            // copied from the tap event and provided as the pointer argument
            if (eventType === 'doubletap') {
                pointerEvent = pointer;
            }
            else {
                pointerExtend(pointerEvent, event);
                if (event !== pointer) {
                    pointerExtend(pointerEvent, pointer);
                }

                pointerEvent.preventDefault           = preventOriginalDefault;
                pointerEvent.stopPropagation          = InteractEvent.prototype.stopPropagation;
                pointerEvent.stopImmediatePropagation = InteractEvent.prototype.stopImmediatePropagation;
                pointerEvent.interaction              = this;

                pointerEvent.timeStamp       = new Date().getTime();
                pointerEvent.originalEvent   = event;
                pointerEvent.originalPointer = pointer;
                pointerEvent.type            = eventType;
                pointerEvent.pointerId       = getPointerId(pointer);
                pointerEvent.pointerType     = this.mouse? 'mouse' : !supportsPointerEvent? 'touch'
                                                    : isString(pointer.pointerType)
                                                        ? pointer.pointerType
                                                        : [,,'touch', 'pen', 'mouse'][pointer.pointerType];
            }

            if (eventType === 'tap') {
                pointerEvent.dt = pointerEvent.timeStamp - this.downTimes[pointerIndex];

                interval = pointerEvent.timeStamp - this.tapTime;
                createNewDoubleTap = !!(this.prevTap && this.prevTap.type !== 'doubletap'
                       && this.prevTap.target === pointerEvent.target
                       && interval < 500);

                pointerEvent.double = createNewDoubleTap;

                this.tapTime = pointerEvent.timeStamp;
            }

            for (i = 0; i < targets.length; i++) {
                pointerEvent.currentTarget = elements[i];
                pointerEvent.interactable = targets[i];
                targets[i].fire(pointerEvent);

                if (pointerEvent.immediatePropagationStopped
                    ||(pointerEvent.propagationStopped && elements[i + 1] !== pointerEvent.currentTarget)) {
                    break;
                }
            }

            if (createNewDoubleTap) {
                var doubleTap = {};

                extend(doubleTap, pointerEvent);

                doubleTap.dt   = interval;
                doubleTap.type = 'doubletap';

                this.collectEventTargets(doubleTap, event, eventTarget, 'doubletap');

                this.prevTap = doubleTap;
            }
            else if (eventType === 'tap') {
                this.prevTap = pointerEvent;
            }
        },

        validateSelector: function (pointer, event, matches, matchElements) {
            for (var i = 0, len = matches.length; i < len; i++) {
                var match = matches[i],
                    matchElement = matchElements[i],
                    action = validateAction(match.getAction(pointer, event, this, matchElement), match);

                if (action && withinInteractionLimit(match, matchElement, action)) {
                    this.target = match;
                    this.element = matchElement;

                    return action;
                }
            }
        },

        setSnapping: function (pageCoords, status) {
            var snap = this.target.options[this.prepared.name].snap,
                targets = [],
                target,
                page,
                i;

            status = status || this.snapStatus;

            if (status.useStatusXY) {
                page = { x: status.x, y: status.y };
            }
            else {
                var origin = getOriginXY(this.target, this.element);

                page = extend({}, pageCoords);

                page.x -= origin.x;
                page.y -= origin.y;
            }

            status.realX = page.x;
            status.realY = page.y;

            page.x = page.x - this.inertiaStatus.resumeDx;
            page.y = page.y - this.inertiaStatus.resumeDy;

            var len = snap.targets? snap.targets.length : 0;

            for (var relIndex = 0; relIndex < this.snapOffsets.length; relIndex++) {
                var relative = {
                    x: page.x - this.snapOffsets[relIndex].x,
                    y: page.y - this.snapOffsets[relIndex].y
                };

                for (i = 0; i < len; i++) {
                    if (isFunction(snap.targets[i])) {
                        target = snap.targets[i](relative.x, relative.y, this);
                    }
                    else {
                        target = snap.targets[i];
                    }

                    if (!target) { continue; }

                    targets.push({
                        x: isNumber(target.x) ? (target.x + this.snapOffsets[relIndex].x) : relative.x,
                        y: isNumber(target.y) ? (target.y + this.snapOffsets[relIndex].y) : relative.y,

                        range: isNumber(target.range)? target.range: snap.range
                    });
                }
            }

            var closest = {
                    target: null,
                    inRange: false,
                    distance: 0,
                    range: 0,
                    dx: 0,
                    dy: 0
                };

            for (i = 0, len = targets.length; i < len; i++) {
                target = targets[i];

                var range = target.range,
                    dx = target.x - page.x,
                    dy = target.y - page.y,
                    distance = hypot(dx, dy),
                    inRange = distance <= range;

                // Infinite targets count as being out of range
                // compared to non infinite ones that are in range
                if (range === Infinity && closest.inRange && closest.range !== Infinity) {
                    inRange = false;
                }

                if (!closest.target || (inRange
                    // is the closest target in range?
                    ? (closest.inRange && range !== Infinity
                        // the pointer is relatively deeper in this target
                        ? distance / range < closest.distance / closest.range
                        // this target has Infinite range and the closest doesn't
                        : (range === Infinity && closest.range !== Infinity)
                            // OR this target is closer that the previous closest
                            || distance < closest.distance)
                    // The other is not in range and the pointer is closer to this target
                    : (!closest.inRange && distance < closest.distance))) {

                    if (range === Infinity) {
                        inRange = true;
                    }

                    closest.target = target;
                    closest.distance = distance;
                    closest.range = range;
                    closest.inRange = inRange;
                    closest.dx = dx;
                    closest.dy = dy;

                    status.range = range;
                }
            }

            var snapChanged;

            if (closest.target) {
                snapChanged = (status.snappedX !== closest.target.x || status.snappedY !== closest.target.y);

                status.snappedX = closest.target.x;
                status.snappedY = closest.target.y;
            }
            else {
                snapChanged = true;

                status.snappedX = NaN;
                status.snappedY = NaN;
            }

            status.dx = closest.dx;
            status.dy = closest.dy;

            status.changed = (snapChanged || (closest.inRange && !status.locked));
            status.locked = closest.inRange;

            return status;
        },

        setRestriction: function (pageCoords, status) {
            var target = this.target,
                restrict = target && target.options[this.prepared.name].restrict,
                restriction = restrict && restrict.restriction,
                page;

            if (!restriction) {
                return status;
            }

            status = status || this.restrictStatus;

            page = status.useStatusXY
                    ? page = { x: status.x, y: status.y }
                    : page = extend({}, pageCoords);

            if (status.snap && status.snap.locked) {
                page.x += status.snap.dx || 0;
                page.y += status.snap.dy || 0;
            }

            page.x -= this.inertiaStatus.resumeDx;
            page.y -= this.inertiaStatus.resumeDy;

            status.dx = 0;
            status.dy = 0;
            status.restricted = false;

            var rect, restrictedX, restrictedY;

            if (isString(restriction)) {
                if (restriction === 'parent') {
                    restriction = parentElement(this.element);
                }
                else if (restriction === 'self') {
                    restriction = target.getRect(this.element);
                }
                else {
                    restriction = closest(this.element, restriction);
                }

                if (!restriction) { return status; }
            }

            if (isFunction(restriction)) {
                restriction = restriction(page.x, page.y, this.element);
            }

            if (isElement(restriction)) {
                restriction = getElementRect(restriction);
            }

            rect = restriction;

            if (!restriction) {
                restrictedX = page.x;
                restrictedY = page.y;
            }
            // object is assumed to have
            // x, y, width, height or
            // left, top, right, bottom
            else if ('x' in restriction && 'y' in restriction) {
                restrictedX = Math.max(Math.min(rect.x + rect.width  - this.restrictOffset.right , page.x), rect.x + this.restrictOffset.left);
                restrictedY = Math.max(Math.min(rect.y + rect.height - this.restrictOffset.bottom, page.y), rect.y + this.restrictOffset.top );
            }
            else {
                restrictedX = Math.max(Math.min(rect.right  - this.restrictOffset.right , page.x), rect.left + this.restrictOffset.left);
                restrictedY = Math.max(Math.min(rect.bottom - this.restrictOffset.bottom, page.y), rect.top  + this.restrictOffset.top );
            }

            status.dx = restrictedX - page.x;
            status.dy = restrictedY - page.y;

            status.changed = status.restrictedX !== restrictedX || status.restrictedY !== restrictedY;
            status.restricted = !!(status.dx || status.dy);

            status.restrictedX = restrictedX;
            status.restrictedY = restrictedY;

            return status;
        },

        checkAndPreventDefault: function (event, interactable, element) {
            if (!(interactable = interactable || this.target)) { return; }

            var options = interactable.options,
                prevent = options.preventDefault;

            if (prevent === 'auto' && element && !/^(input|select|textarea)$/i.test(event.target.nodeName)) {
                // do not preventDefault on pointerdown if the prepared action is a drag
                // and dragging can only start from a certain direction - this allows
                // a touch to pan the viewport if a drag isn't in the right direction
                if (/down|start/i.test(event.type)
                    && this.prepared.name === 'drag' && options.drag.axis !== 'xy') {

                    return;
                }

                // with manualStart, only preventDefault while interacting
                if (options[this.prepared.name] && options[this.prepared.name].manualStart
                    && !this.interacting()) {
                    return;
                }

                event.preventDefault();
                return;
            }

            if (prevent === 'always') {
                event.preventDefault();
                return;
            }
        },

        calcInertia: function (status) {
            var inertiaOptions = this.target.options[this.prepared.name].inertia,
                lambda = inertiaOptions.resistance,
                inertiaDur = -Math.log(inertiaOptions.endSpeed / status.v0) / lambda;

            status.x0 = this.prevEvent.pageX;
            status.y0 = this.prevEvent.pageY;
            status.t0 = status.startEvent.timeStamp / 1000;
            status.sx = status.sy = 0;

            status.modifiedXe = status.xe = (status.vx0 - inertiaDur) / lambda;
            status.modifiedYe = status.ye = (status.vy0 - inertiaDur) / lambda;
            status.te = inertiaDur;

            status.lambda_v0 = lambda / status.v0;
            status.one_ve_v0 = 1 - inertiaOptions.endSpeed / status.v0;
        },

        autoScrollMove: function (pointer) {
            if (!(this.interacting()
                && checkAutoScroll(this.target, this.prepared.name))) {
                return;
            }

            if (this.inertiaStatus.active) {
                autoScroll.x = autoScroll.y = 0;
                return;
            }

            var top,
                right,
                bottom,
                left,
                options = this.target.options[this.prepared.name].autoScroll,
                container = options.container || getWindow(this.element);

            if (isWindow(container)) {
                left   = pointer.clientX < autoScroll.margin;
                top    = pointer.clientY < autoScroll.margin;
                right  = pointer.clientX > container.innerWidth  - autoScroll.margin;
                bottom = pointer.clientY > container.innerHeight - autoScroll.margin;
            }
            else {
                var rect = getElementClientRect(container);

                left   = pointer.clientX < rect.left   + autoScroll.margin;
                top    = pointer.clientY < rect.top    + autoScroll.margin;
                right  = pointer.clientX > rect.right  - autoScroll.margin;
                bottom = pointer.clientY > rect.bottom - autoScroll.margin;
            }

            autoScroll.x = (right ? 1: left? -1: 0);
            autoScroll.y = (bottom? 1:  top? -1: 0);

            if (!autoScroll.isScrolling) {
                // set the autoScroll properties to those of the target
                autoScroll.margin = options.margin;
                autoScroll.speed  = options.speed;

                autoScroll.start(this);
            }
        },

        _updateEventTargets: function (target, currentTarget) {
            this._eventTarget    = target;
            this._curEventTarget = currentTarget;
        }

    };

    function getInteractionFromPointer (pointer, eventType, eventTarget) {
        var i = 0, len = interactions.length,
            mouseEvent = (/mouse/i.test(pointer.pointerType || eventType)
                          // MSPointerEvent.MSPOINTER_TYPE_MOUSE
                          || pointer.pointerType === 4),
            interaction;

        var id = getPointerId(pointer);

        // try to resume inertia with a new pointer
        if (/down|start/i.test(eventType)) {
            for (i = 0; i < len; i++) {
                interaction = interactions[i];

                var element = eventTarget;

                if (interaction.inertiaStatus.active && interaction.target.options[interaction.prepared.name].inertia.allowResume
                    && (interaction.mouse === mouseEvent)) {
                    while (element) {
                        // if the element is the interaction element
                        if (element === interaction.element) {
                            return interaction;
                        }
                        element = parentElement(element);
                    }
                }
            }
        }

        // if it's a mouse interaction
        if (mouseEvent || !(supportsTouch || supportsPointerEvent)) {

            // find a mouse interaction that's not in inertia phase
            for (i = 0; i < len; i++) {
                if (interactions[i].mouse && !interactions[i].inertiaStatus.active) {
                    return interactions[i];
                }
            }

            // find any interaction specifically for mouse.
            // if the eventType is a mousedown, and inertia is active
            // ignore the interaction
            for (i = 0; i < len; i++) {
                if (interactions[i].mouse && !(/down/.test(eventType) && interactions[i].inertiaStatus.active)) {
                    return interaction;
                }
            }

            // create a new interaction for mouse
            interaction = new Interaction();
            interaction.mouse = true;

            return interaction;
        }

        // get interaction that has this pointer
        for (i = 0; i < len; i++) {
            if (contains(interactions[i].pointerIds, id)) {
                return interactions[i];
            }
        }

        // at this stage, a pointerUp should not return an interaction
        if (/up|end|out/i.test(eventType)) {
            return null;
        }

        // get first idle interaction
        for (i = 0; i < len; i++) {
            interaction = interactions[i];

            if ((!interaction.prepared.name || (interaction.target.options.gesture.enabled))
                && !interaction.interacting()
                && !(!mouseEvent && interaction.mouse)) {

                return interaction;
            }
        }

        return new Interaction();
    }

    function doOnInteractions (method) {
        return (function (event) {
            var interaction,
                eventTarget = getActualElement(event.path
                                               ? event.path[0]
                                               : event.target),
                curEventTarget = getActualElement(event.currentTarget),
                i;

            if (supportsTouch && /touch/.test(event.type)) {
                prevTouchTime = new Date().getTime();

                for (i = 0; i < event.changedTouches.length; i++) {
                    var pointer = event.changedTouches[i];

                    interaction = getInteractionFromPointer(pointer, event.type, eventTarget);

                    if (!interaction) { continue; }

                    interaction._updateEventTargets(eventTarget, curEventTarget);

                    interaction[method](pointer, event, eventTarget, curEventTarget);
                }
            }
            else {
                if (!supportsPointerEvent && /mouse/.test(event.type)) {
                    // ignore mouse events while touch interactions are active
                    for (i = 0; i < interactions.length; i++) {
                        if (!interactions[i].mouse && interactions[i].pointerIsDown) {
                            return;
                        }
                    }

                    // try to ignore mouse events that are simulated by the browser
                    // after a touch event
                    if (new Date().getTime() - prevTouchTime < 500) {
                        return;
                    }
                }

                interaction = getInteractionFromPointer(event, event.type, eventTarget);

                if (!interaction) { return; }

                interaction._updateEventTargets(eventTarget, curEventTarget);

                interaction[method](event, event, eventTarget, curEventTarget);
            }
        });
    }

    function InteractEvent (interaction, event, action, phase, element, related) {
        var client,
            page,
            target      = interaction.target,
            snapStatus  = interaction.snapStatus,
            restrictStatus  = interaction.restrictStatus,
            pointers    = interaction.pointers,
            deltaSource = (target && target.options || defaultOptions).deltaSource,
            sourceX     = deltaSource + 'X',
            sourceY     = deltaSource + 'Y',
            options     = target? target.options: defaultOptions,
            origin      = getOriginXY(target, element),
            starting    = phase === 'start',
            ending      = phase === 'end',
            coords      = starting? interaction.startCoords : interaction.curCoords;

        element = element || interaction.element;

        page   = extend({}, coords.page);
        client = extend({}, coords.client);

        page.x -= origin.x;
        page.y -= origin.y;

        client.x -= origin.x;
        client.y -= origin.y;

        var relativePoints = options[action].snap && options[action].snap.relativePoints ;

        if (checkSnap(target, action) && !(starting && relativePoints && relativePoints.length)) {
            this.snap = {
                range  : snapStatus.range,
                locked : snapStatus.locked,
                x      : snapStatus.snappedX,
                y      : snapStatus.snappedY,
                realX  : snapStatus.realX,
                realY  : snapStatus.realY,
                dx     : snapStatus.dx,
                dy     : snapStatus.dy
            };

            if (snapStatus.locked) {
                page.x += snapStatus.dx;
                page.y += snapStatus.dy;
                client.x += snapStatus.dx;
                client.y += snapStatus.dy;
            }
        }

        if (checkRestrict(target, action) && !(starting && options[action].restrict.elementRect) && restrictStatus.restricted) {
            page.x += restrictStatus.dx;
            page.y += restrictStatus.dy;
            client.x += restrictStatus.dx;
            client.y += restrictStatus.dy;

            this.restrict = {
                dx: restrictStatus.dx,
                dy: restrictStatus.dy
            };
        }

        this.pageX     = page.x;
        this.pageY     = page.y;
        this.clientX   = client.x;
        this.clientY   = client.y;

        this.x0        = interaction.startCoords.page.x - origin.x;
        this.y0        = interaction.startCoords.page.y - origin.y;
        this.clientX0  = interaction.startCoords.client.x - origin.x;
        this.clientY0  = interaction.startCoords.client.y - origin.y;
        this.ctrlKey   = event.ctrlKey;
        this.altKey    = event.altKey;
        this.shiftKey  = event.shiftKey;
        this.metaKey   = event.metaKey;
        this.button    = event.button;
        this.buttons   = event.buttons;
        this.target    = element;
        this.t0        = interaction.downTimes[0];
        this.type      = action + (phase || '');

        this.interaction = interaction;
        this.interactable = target;

        var inertiaStatus = interaction.inertiaStatus;

        if (inertiaStatus.active) {
            this.detail = 'inertia';
        }

        if (related) {
            this.relatedTarget = related;
        }

        // end event dx, dy is difference between start and end points
        if (ending) {
            if (deltaSource === 'client') {
                this.dx = client.x - interaction.startCoords.client.x;
                this.dy = client.y - interaction.startCoords.client.y;
            }
            else {
                this.dx = page.x - interaction.startCoords.page.x;
                this.dy = page.y - interaction.startCoords.page.y;
            }
        }
        else if (starting) {
            this.dx = 0;
            this.dy = 0;
        }
        // copy properties from previousmove if starting inertia
        else if (phase === 'inertiastart') {
            this.dx = interaction.prevEvent.dx;
            this.dy = interaction.prevEvent.dy;
        }
        else {
            if (deltaSource === 'client') {
                this.dx = client.x - interaction.prevEvent.clientX;
                this.dy = client.y - interaction.prevEvent.clientY;
            }
            else {
                this.dx = page.x - interaction.prevEvent.pageX;
                this.dy = page.y - interaction.prevEvent.pageY;
            }
        }
        if (interaction.prevEvent && interaction.prevEvent.detail === 'inertia'
            && !inertiaStatus.active
            && options[action].inertia && options[action].inertia.zeroResumeDelta) {

            inertiaStatus.resumeDx += this.dx;
            inertiaStatus.resumeDy += this.dy;

            this.dx = this.dy = 0;
        }

        if (action === 'resize' && interaction.resizeAxes) {
            if (options.resize.square) {
                if (interaction.resizeAxes === 'y') {
                    this.dx = this.dy;
                }
                else {
                    this.dy = this.dx;
                }
                this.axes = 'xy';
            }
            else {
                this.axes = interaction.resizeAxes;

                if (interaction.resizeAxes === 'x') {
                    this.dy = 0;
                }
                else if (interaction.resizeAxes === 'y') {
                    this.dx = 0;
                }
            }
        }
        else if (action === 'gesture') {
            this.touches = [pointers[0], pointers[1]];

            if (starting) {
                this.distance = touchDistance(pointers, deltaSource);
                this.box      = touchBBox(pointers);
                this.scale    = 1;
                this.ds       = 0;
                this.angle    = touchAngle(pointers, undefined, deltaSource);
                this.da       = 0;
            }
            else if (ending || event instanceof InteractEvent) {
                this.distance = interaction.prevEvent.distance;
                this.box      = interaction.prevEvent.box;
                this.scale    = interaction.prevEvent.scale;
                this.ds       = this.scale - 1;
                this.angle    = interaction.prevEvent.angle;
                this.da       = this.angle - interaction.gesture.startAngle;
            }
            else {
                this.distance = touchDistance(pointers, deltaSource);
                this.box      = touchBBox(pointers);
                this.scale    = this.distance / interaction.gesture.startDistance;
                this.angle    = touchAngle(pointers, interaction.gesture.prevAngle, deltaSource);

                this.ds = this.scale - interaction.gesture.prevScale;
                this.da = this.angle - interaction.gesture.prevAngle;
            }
        }

        if (starting) {
            this.timeStamp = interaction.downTimes[0];
            this.dt        = 0;
            this.duration  = 0;
            this.speed     = 0;
            this.velocityX = 0;
            this.velocityY = 0;
        }
        else if (phase === 'inertiastart') {
            this.timeStamp = interaction.prevEvent.timeStamp;
            this.dt        = interaction.prevEvent.dt;
            this.duration  = interaction.prevEvent.duration;
            this.speed     = interaction.prevEvent.speed;
            this.velocityX = interaction.prevEvent.velocityX;
            this.velocityY = interaction.prevEvent.velocityY;
        }
        else {
            this.timeStamp = new Date().getTime();
            this.dt        = this.timeStamp - interaction.prevEvent.timeStamp;
            this.duration  = this.timeStamp - interaction.downTimes[0];

            if (event instanceof InteractEvent) {
                var dx = this[sourceX] - interaction.prevEvent[sourceX],
                    dy = this[sourceY] - interaction.prevEvent[sourceY],
                    dt = this.dt / 1000;

                this.speed = hypot(dx, dy) / dt;
                this.velocityX = dx / dt;
                this.velocityY = dy / dt;
            }
            // if normal move or end event, use previous user event coords
            else {
                // speed and velocity in pixels per second
                this.speed = interaction.pointerDelta[deltaSource].speed;
                this.velocityX = interaction.pointerDelta[deltaSource].vx;
                this.velocityY = interaction.pointerDelta[deltaSource].vy;
            }
        }

        if ((ending || phase === 'inertiastart')
            && interaction.prevEvent.speed > 600 && this.timeStamp - interaction.prevEvent.timeStamp < 150) {

            var angle = 180 * Math.atan2(interaction.prevEvent.velocityY, interaction.prevEvent.velocityX) / Math.PI,
                overlap = 22.5;

            if (angle < 0) {
                angle += 360;
            }

            var left = 135 - overlap <= angle && angle < 225 + overlap,
                up   = 225 - overlap <= angle && angle < 315 + overlap,

                right = !left && (315 - overlap <= angle || angle <  45 + overlap),
                down  = !up   &&   45 - overlap <= angle && angle < 135 + overlap;

            this.swipe = {
                up   : up,
                down : down,
                left : left,
                right: right,
                angle: angle,
                speed: interaction.prevEvent.speed,
                velocity: {
                    x: interaction.prevEvent.velocityX,
                    y: interaction.prevEvent.velocityY
                }
            };
        }
    }

    InteractEvent.prototype = {
        preventDefault: blank,
        stopImmediatePropagation: function () {
            this.immediatePropagationStopped = this.propagationStopped = true;
        },
        stopPropagation: function () {
            this.propagationStopped = true;
        }
    };

    function preventOriginalDefault () {
        this.originalEvent.preventDefault();
    }

    function getActionCursor (action) {
        var cursor = '';

        if (action.name === 'drag') {
            cursor =  actionCursors.drag;
        }
        if (action.name === 'resize') {
            if (action.axis) {
                cursor =  actionCursors[action.name + action.axis];
            }
            else if (action.edges) {
                var cursorKey = 'resize',
                    edgeNames = ['top', 'bottom', 'left', 'right'];

                for (var i = 0; i < 4; i++) {
                    if (action.edges[edgeNames[i]]) {
                        cursorKey += edgeNames[i];
                    }
                }

                cursor = actionCursors[cursorKey];
            }
        }

        return cursor;
    }

    function checkResizeEdge (name, value, page, element, interactableElement, rect, margin) {
        // false, '', undefined, null
        if (!value) { return false; }

        // true value, use pointer coords and element rect
        if (value === true) {
            // if dimensions are negative, "switch" edges
            var width = isNumber(rect.width)? rect.width : rect.right - rect.left,
                height = isNumber(rect.height)? rect.height : rect.bottom - rect.top;

            if (width < 0) {
                if      (name === 'left' ) { name = 'right'; }
                else if (name === 'right') { name = 'left' ; }
            }
            if (height < 0) {
                if      (name === 'top'   ) { name = 'bottom'; }
                else if (name === 'bottom') { name = 'top'   ; }
            }

            if (name === 'left'  ) { return page.x < ((width  >= 0? rect.left: rect.right ) + margin); }
            if (name === 'top'   ) { return page.y < ((height >= 0? rect.top : rect.bottom) + margin); }

            if (name === 'right' ) { return page.x > ((width  >= 0? rect.right : rect.left) - margin); }
            if (name === 'bottom') { return page.y > ((height >= 0? rect.bottom: rect.top ) - margin); }
        }

        // the remaining checks require an element
        if (!isElement(element)) { return false; }

        return isElement(value)
                    // the value is an element to use as a resize handle
                    ? value === element
                    // otherwise check if element matches value as selector
                    : matchesUpTo(element, value, interactableElement);
    }

    function defaultActionChecker (pointer, interaction, element) {
        var rect = this.getRect(element),
            shouldResize = false,
            action = null,
            resizeAxes = null,
            resizeEdges,
            page = extend({}, interaction.curCoords.page),
            options = this.options;

        if (!rect) { return null; }

        if (actionIsEnabled.resize && options.resize.enabled) {
            var resizeOptions = options.resize;

            resizeEdges = {
                left: false, right: false, top: false, bottom: false
            };

            // if using resize.edges
            if (isObject(resizeOptions.edges)) {
                for (var edge in resizeEdges) {
                    resizeEdges[edge] = checkResizeEdge(edge,
                                                        resizeOptions.edges[edge],
                                                        page,
                                                        interaction._eventTarget,
                                                        element,
                                                        rect,
                                                        resizeOptions.margin || margin);
                }

                resizeEdges.left = resizeEdges.left && !resizeEdges.right;
                resizeEdges.top  = resizeEdges.top  && !resizeEdges.bottom;

                shouldResize = resizeEdges.left || resizeEdges.right || resizeEdges.top || resizeEdges.bottom;
            }
            else {
                var right  = options.resize.axis !== 'y' && page.x > (rect.right  - margin),
                    bottom = options.resize.axis !== 'x' && page.y > (rect.bottom - margin);

                shouldResize = right || bottom;
                resizeAxes = (right? 'x' : '') + (bottom? 'y' : '');
            }
        }

        action = shouldResize
            ? 'resize'
            : actionIsEnabled.drag && options.drag.enabled
                ? 'drag'
                : null;

        if (actionIsEnabled.gesture
            && interaction.pointerIds.length >=2
            && !(interaction.dragging || interaction.resizing)) {
            action = 'gesture';
        }

        if (action) {
            return {
                name: action,
                axis: resizeAxes,
                edges: resizeEdges
            };
        }

        return null;
    }

    // Check if action is enabled globally and the current target supports it
    // If so, return the validated action. Otherwise, return null
    function validateAction (action, interactable) {
        if (!isObject(action)) { return null; }

        var actionName = action.name,
            options = interactable.options;

        if ((  (actionName  === 'resize'   && options.resize.enabled )
            || (actionName      === 'drag'     && options.drag.enabled  )
            || (actionName      === 'gesture'  && options.gesture.enabled))
            && actionIsEnabled[actionName]) {

            if (actionName === 'resize' || actionName === 'resizeyx') {
                actionName = 'resizexy';
            }

            return action;
        }
        return null;
    }

    var listeners = {},
        interactionListeners = [
            'dragStart', 'dragMove', 'resizeStart', 'resizeMove', 'gestureStart', 'gestureMove',
            'pointerOver', 'pointerOut', 'pointerHover', 'selectorDown',
            'pointerDown', 'pointerMove', 'pointerUp', 'pointerCancel', 'pointerEnd',
            'addPointer', 'removePointer', 'recordPointer', 'autoScrollMove'
        ];

    for (var i = 0, len = interactionListeners.length; i < len; i++) {
        var name = interactionListeners[i];

        listeners[name] = doOnInteractions(name);
    }

    // bound to the interactable context when a DOM event
    // listener is added to a selector interactable
    function delegateListener (event, useCapture) {
        var fakeEvent = {},
            delegated = delegatedEvents[event.type],
            eventTarget = getActualElement(event.path
                                           ? event.path[0]
                                           : event.target),
            element = eventTarget;

        useCapture = useCapture? true: false;

        // duplicate the event so that currentTarget can be changed
        for (var prop in event) {
            fakeEvent[prop] = event[prop];
        }

        fakeEvent.originalEvent = event;
        fakeEvent.preventDefault = preventOriginalDefault;

        // climb up document tree looking for selector matches
        while (isElement(element)) {
            for (var i = 0; i < delegated.selectors.length; i++) {
                var selector = delegated.selectors[i],
                    context = delegated.contexts[i];

                if (matchesSelector(element, selector)
                    && nodeContains(context, eventTarget)
                    && nodeContains(context, element)) {

                    var listeners = delegated.listeners[i];

                    fakeEvent.currentTarget = element;

                    for (var j = 0; j < listeners.length; j++) {
                        if (listeners[j][1] === useCapture) {
                            listeners[j][0](fakeEvent);
                        }
                    }
                }
            }

            element = parentElement(element);
        }
    }

    function delegateUseCapture (event) {
        return delegateListener.call(this, event, true);
    }

    interactables.indexOfElement = function indexOfElement (element, context) {
        context = context || document;

        for (var i = 0; i < this.length; i++) {
            var interactable = this[i];

            if ((interactable.selector === element
                && (interactable._context === context))
                || (!interactable.selector && interactable._element === element)) {

                return i;
            }
        }
        return -1;
    };

    interactables.get = function interactableGet (element, options) {
        return this[this.indexOfElement(element, options && options.context)];
    };

    interactables.forEachSelector = function (callback) {
        for (var i = 0; i < this.length; i++) {
            var interactable = this[i];

            if (!interactable.selector) {
                continue;
            }

            var ret = callback(interactable, interactable.selector, interactable._context, i, this);

            if (ret !== undefined) {
                return ret;
            }
        }
    };

    /*\
     * interact
     [ method ]
     *
     * The methods of this variable can be used to set elements as
     * interactables and also to change various default settings.
     *
     * Calling it as a function and passing an element or a valid CSS selector
     * string returns an Interactable object which has various methods to
     * configure it.
     *
     - element (Element | string) The HTML or SVG Element to interact with or CSS selector
     = (object) An @Interactable
     *
     > Usage
     | interact(document.getElementById('draggable')).draggable(true);
     |
     | var rectables = interact('rect');
     | rectables
     |     .gesturable(true)
     |     .on('gesturemove', function (event) {
     |         // something cool...
     |     })
     |     .autoScroll(true);
    \*/
    function interact (element, options) {
        return interactables.get(element, options) || new Interactable(element, options);
    }

    /*\
     * Interactable
     [ property ]
     **
     * Object type returned by @interact
    \*/
    function Interactable (element, options) {
        this._element = element;
        this._iEvents = this._iEvents || {};

        var _window;

        if (trySelector(element)) {
            this.selector = element;

            var context = options && options.context;

            _window = context? getWindow(context) : window;

            if (context && (_window.Node
                    ? context instanceof _window.Node
                    : (isElement(context) || context === _window.document))) {

                this._context = context;
            }
        }
        else {
            _window = getWindow(element);

            if (isElement(element, _window)) {

                if (PointerEvent) {
                    events.add(this._element, pEventTypes.down, listeners.pointerDown );
                    events.add(this._element, pEventTypes.move, listeners.pointerHover);
                }
                else {
                    events.add(this._element, 'mousedown' , listeners.pointerDown );
                    events.add(this._element, 'mousemove' , listeners.pointerHover);
                    events.add(this._element, 'touchstart', listeners.pointerDown );
                    events.add(this._element, 'touchmove' , listeners.pointerHover);
                }
            }
        }

        this._doc = _window.document;

        if (!contains(documents, this._doc)) {
            listenToDocument(this._doc);
        }

        interactables.push(this);

        this.set(options);
    }

    Interactable.prototype = {
        setOnEvents: function (action, phases) {
            if (action === 'drop') {
                if (isFunction(phases.ondrop)          ) { this.ondrop           = phases.ondrop          ; }
                if (isFunction(phases.ondropactivate)  ) { this.ondropactivate   = phases.ondropactivate  ; }
                if (isFunction(phases.ondropdeactivate)) { this.ondropdeactivate = phases.ondropdeactivate; }
                if (isFunction(phases.ondragenter)     ) { this.ondragenter      = phases.ondragenter     ; }
                if (isFunction(phases.ondragleave)     ) { this.ondragleave      = phases.ondragleave     ; }
                if (isFunction(phases.ondropmove)      ) { this.ondropmove       = phases.ondropmove      ; }
            }
            else {
                action = 'on' + action;

                if (isFunction(phases.onstart)       ) { this[action + 'start'         ] = phases.onstart         ; }
                if (isFunction(phases.onmove)        ) { this[action + 'move'          ] = phases.onmove          ; }
                if (isFunction(phases.onend)         ) { this[action + 'end'           ] = phases.onend           ; }
                if (isFunction(phases.oninertiastart)) { this[action + 'inertiastart'  ] = phases.oninertiastart  ; }
            }

            return this;
        },

        /*\
         * Interactable.draggable
         [ method ]
         *
         * Gets or sets whether drag actions can be performed on the
         * Interactable
         *
         = (boolean) Indicates if this can be the target of drag events
         | var isDraggable = interact('ul li').draggable();
         * or
         - options (boolean | object) #optional true/false or An object with event listeners to be fired on drag events (object makes the Interactable draggable)
         = (object) This Interactable
         | interact(element).draggable({
         |     onstart: function (event) {},
         |     onmove : function (event) {},
         |     onend  : function (event) {},
         |
         |     // the axis in which the first movement must be
         |     // for the drag sequence to start
         |     // 'xy' by default - any direction
         |     axis: 'x' || 'y' || 'xy',
         |
         |     // max number of drags that can happen concurrently
         |     // with elements of this Interactable. Infinity by default
         |     max: Infinity,
         |
         |     // max number of drags that can target the same element+Interactable
         |     // 1 by default
         |     maxPerElement: 2
         | });
        \*/
        draggable: function (options) {
            if (isObject(options)) {
                this.options.drag.enabled = options.enabled === false? false: true;
                this.setPerAction('drag', options);
                this.setOnEvents('drag', options);

                if (/^x$|^y$|^xy$/.test(options.axis)) {
                    this.options.drag.axis = options.axis;
                }
                else if (options.axis === null) {
                    delete this.options.drag.axis;
                }

                return this;
            }

            if (isBool(options)) {
                this.options.drag.enabled = options;

                return this;
            }

            return this.options.drag;
        },

        setPerAction: function (action, options) {
            // for all the default per-action options
            for (var option in options) {
                // if this option exists for this action
                if (option in defaultOptions[action]) {
                    // if the option in the options arg is an object value
                    if (isObject(options[option])) {
                        // duplicate the object
                        this.options[action][option] = extend(this.options[action][option] || {}, options[option]);

                        if (isObject(defaultOptions.perAction[option]) && 'enabled' in defaultOptions.perAction[option]) {
                            this.options[action][option].enabled = options[option].enabled === false? false : true;
                        }
                    }
                    else if (isBool(options[option]) && isObject(defaultOptions.perAction[option])) {
                        this.options[action][option].enabled = options[option];
                    }
                    else if (options[option] !== undefined) {
                        // or if it's not undefined, do a plain assignment
                        this.options[action][option] = options[option];
                    }
                }
            }
        },

        /*\
         * Interactable.dropzone
         [ method ]
         *
         * Returns or sets whether elements can be dropped onto this
         * Interactable to trigger drop events
         *
         * Dropzones can receive the following events:
         *  - `dropactivate` and `dropdeactivate` when an acceptable drag starts and ends
         *  - `dragenter` and `dragleave` when a draggable enters and leaves the dropzone
         *  - `dragmove` when a draggable that has entered the dropzone is moved
         *  - `drop` when a draggable is dropped into this dropzone
         *
         *  Use the `accept` option to allow only elements that match the given CSS selector or element.
         *
         *  Use the `overlap` option to set how drops are checked for. The allowed values are:
         *   - `'pointer'`, the pointer must be over the dropzone (default)
         *   - `'center'`, the draggable element's center must be over the dropzone
         *   - a number from 0-1 which is the `(intersection area) / (draggable area)`.
         *       e.g. `0.5` for drop to happen when half of the area of the
         *       draggable is over the dropzone
         *
         - options (boolean | object | null) #optional The new value to be set.
         | interact('.drop').dropzone({
         |   accept: '.can-drop' || document.getElementById('single-drop'),
         |   overlap: 'pointer' || 'center' || zeroToOne
         | }
         = (boolean | object) The current setting or this Interactable
        \*/
        dropzone: function (options) {
            if (isObject(options)) {
                this.options.drop.enabled = options.enabled === false? false: true;
                this.setOnEvents('drop', options);

                if (/^(pointer|center)$/.test(options.overlap)) {
                    this.options.drop.overlap = options.overlap;
                }
                else if (isNumber(options.overlap)) {
                    this.options.drop.overlap = Math.max(Math.min(1, options.overlap), 0);
                }
                if ('accept' in options) {
                  this.options.drop.accept = options.accept;
                }
                if ('checker' in options) {
                  this.options.drop.checker = options.checker;
                }

                return this;
            }

            if (isBool(options)) {
                this.options.drop.enabled = options;

                return this;
            }

            return this.options.drop;
        },

        dropCheck: function (dragEvent, event, draggable, draggableElement, dropElement, rect) {
            var dropped = false;

            // if the dropzone has no rect (eg. display: none)
            // call the custom dropChecker or just return false
            if (!(rect = rect || this.getRect(dropElement))) {
                return (this.options.drop.checker
                    ? this.options.drop.checker(dragEvent, event, dropped, this, dropElement, draggable, draggableElement)
                    : false);
            }

            var dropOverlap = this.options.drop.overlap;

            if (dropOverlap === 'pointer') {
                var page = getPageXY(dragEvent),
                    origin = getOriginXY(draggable, draggableElement),
                    horizontal,
                    vertical;

                page.x += origin.x;
                page.y += origin.y;

                horizontal = (page.x > rect.left) && (page.x < rect.right);
                vertical   = (page.y > rect.top ) && (page.y < rect.bottom);

                dropped = horizontal && vertical;
            }

            var dragRect = draggable.getRect(draggableElement);

            if (dropOverlap === 'center') {
                var cx = dragRect.left + dragRect.width  / 2,
                    cy = dragRect.top  + dragRect.height / 2;

                dropped = cx >= rect.left && cx <= rect.right && cy >= rect.top && cy <= rect.bottom;
            }

            if (isNumber(dropOverlap)) {
                var overlapArea  = (Math.max(0, Math.min(rect.right , dragRect.right ) - Math.max(rect.left, dragRect.left))
                                  * Math.max(0, Math.min(rect.bottom, dragRect.bottom) - Math.max(rect.top , dragRect.top ))),
                    overlapRatio = overlapArea / (dragRect.width * dragRect.height);

                dropped = overlapRatio >= dropOverlap;
            }

            if (this.options.drop.checker) {
                dropped = this.options.drop.checker(dragEvent, event, dropped, this, dropElement, draggable, draggableElement);
            }

            return dropped;
        },

        /*\
         * Interactable.dropChecker
         [ method ]
         *
         * DEPRECATED. Use interactable.dropzone({ checker: function... }) instead.
         *
         * Gets or sets the function used to check if a dragged element is
         * over this Interactable.
         *
         - checker (function) #optional The function that will be called when checking for a drop
         = (Function | Interactable) The checker function or this Interactable
         *
         * The checker function takes the following arguments:
         *
         - dragEvent (InteractEvent) The related dragmove or dragend event
         - event (TouchEvent | PointerEvent | MouseEvent) The user move/up/end Event related to the dragEvent
         - dropped (boolean) The value from the default drop checker
         - dropzone (Interactable) The dropzone interactable
         - dropElement (Element) The dropzone element
         - draggable (Interactable) The Interactable being dragged
         - draggableElement (Element) The actual element that's being dragged
         *
         > Usage:
         | interact(target)
         | .dropChecker(function(dragEvent,         // related dragmove or dragend event
         |                       event,             // TouchEvent/PointerEvent/MouseEvent
         |                       dropped,           // bool result of the default checker
         |                       dropzone,          // dropzone Interactable
         |                       dropElement,       // dropzone elemnt
         |                       draggable,         // draggable Interactable
         |                       draggableElement) {// draggable element
         |
         |   return dropped && event.target.hasAttribute('allow-drop');
         | }
        \*/
        dropChecker: function (checker) {
            if (isFunction(checker)) {
                this.options.drop.checker = checker;

                return this;
            }
            if (checker === null) {
                delete this.options.getRect;

                return this;
            }

            return this.options.drop.checker;
        },

        /*\
         * Interactable.accept
         [ method ]
         *
         * Deprecated. add an `accept` property to the options object passed to
         * @Interactable.dropzone instead.
         *
         * Gets or sets the Element or CSS selector match that this
         * Interactable accepts if it is a dropzone.
         *
         - newValue (Element | string | null) #optional
         * If it is an Element, then only that element can be dropped into this dropzone.
         * If it is a string, the element being dragged must match it as a selector.
         * If it is null, the accept options is cleared - it accepts any element.
         *
         = (string | Element | null | Interactable) The current accept option if given `undefined` or this Interactable
        \*/
        accept: function (newValue) {
            if (isElement(newValue)) {
                this.options.drop.accept = newValue;

                return this;
            }

            // test if it is a valid CSS selector
            if (trySelector(newValue)) {
                this.options.drop.accept = newValue;

                return this;
            }

            if (newValue === null) {
                delete this.options.drop.accept;

                return this;
            }

            return this.options.drop.accept;
        },

        /*\
         * Interactable.resizable
         [ method ]
         *
         * Gets or sets whether resize actions can be performed on the
         * Interactable
         *
         = (boolean) Indicates if this can be the target of resize elements
         | var isResizeable = interact('input[type=text]').resizable();
         * or
         - options (boolean | object) #optional true/false or An object with event listeners to be fired on resize events (object makes the Interactable resizable)
         = (object) This Interactable
         | interact(element).resizable({
         |     onstart: function (event) {},
         |     onmove : function (event) {},
         |     onend  : function (event) {},
         |
         |     edges: {
         |       top   : true,       // Use pointer coords to check for resize.
         |       left  : false,      // Disable resizing from left edge.
         |       bottom: '.resize-s',// Resize if pointer target matches selector
         |       right : handleEl    // Resize if pointer target is the given Element
         |     },
         |
         |     // Width and height can be adjusted independently. When `true`, width and
         |     // height are adjusted at a 1:1 ratio.
         |     square: false,
         |
         |     // Width and height can be adjusted independently. When `true`, width and
         |     // height maintain the aspect ratio they had when resizing started.
         |     preserveAspectRatio: false,
         |
         |     // a value of 'none' will limit the resize rect to a minimum of 0x0
         |     // 'negate' will allow the rect to have negative width/height
         |     // 'reposition' will keep the width/height positive by swapping
         |     // the top and bottom edges and/or swapping the left and right edges
         |     invert: 'none' || 'negate' || 'reposition'
         |
         |     // limit multiple resizes.
         |     // See the explanation in the @Interactable.draggable example
         |     max: Infinity,
         |     maxPerElement: 1,
         | });
        \*/
        resizable: function (options) {
            if (isObject(options)) {
                this.options.resize.enabled = options.enabled === false? false: true;
                this.setPerAction('resize', options);
                this.setOnEvents('resize', options);

                if (/^x$|^y$|^xy$/.test(options.axis)) {
                    this.options.resize.axis = options.axis;
                }
                else if (options.axis === null) {
                    this.options.resize.axis = defaultOptions.resize.axis;
                }

                if (isBool(options.preserveAspectRatio)) {
                    this.options.resize.preserveAspectRatio = options.preserveAspectRatio;
                }
                else if (isBool(options.square)) {
                    this.options.resize.square = options.square;
                }

                return this;
            }
            if (isBool(options)) {
                this.options.resize.enabled = options;

                return this;
            }
            return this.options.resize;
        },

        /*\
         * Interactable.squareResize
         [ method ]
         *
         * Deprecated. Add a `square: true || false` property to @Interactable.resizable instead
         *
         * Gets or sets whether resizing is forced 1:1 aspect
         *
         = (boolean) Current setting
         *
         * or
         *
         - newValue (boolean) #optional
         = (object) this Interactable
        \*/
        squareResize: function (newValue) {
            if (isBool(newValue)) {
                this.options.resize.square = newValue;

                return this;
            }

            if (newValue === null) {
                delete this.options.resize.square;

                return this;
            }

            return this.options.resize.square;
        },

        /*\
         * Interactable.gesturable
         [ method ]
         *
         * Gets or sets whether multitouch gestures can be performed on the
         * Interactable's element
         *
         = (boolean) Indicates if this can be the target of gesture events
         | var isGestureable = interact(element).gesturable();
         * or
         - options (boolean | object) #optional true/false or An object with event listeners to be fired on gesture events (makes the Interactable gesturable)
         = (object) this Interactable
         | interact(element).gesturable({
         |     onstart: function (event) {},
         |     onmove : function (event) {},
         |     onend  : function (event) {},
         |
         |     // limit multiple gestures.
         |     // See the explanation in @Interactable.draggable example
         |     max: Infinity,
         |     maxPerElement: 1,
         | });
        \*/
        gesturable: function (options) {
            if (isObject(options)) {
                this.options.gesture.enabled = options.enabled === false? false: true;
                this.setPerAction('gesture', options);
                this.setOnEvents('gesture', options);

                return this;
            }

            if (isBool(options)) {
                this.options.gesture.enabled = options;

                return this;
            }

            return this.options.gesture;
        },

        /*\
         * Interactable.autoScroll
         [ method ]
         **
         * Deprecated. Add an `autoscroll` property to the options object
         * passed to @Interactable.draggable or @Interactable.resizable instead.
         *
         * Returns or sets whether dragging and resizing near the edges of the
         * window/container trigger autoScroll for this Interactable
         *
         = (object) Object with autoScroll properties
         *
         * or
         *
         - options (object | boolean) #optional
         * options can be:
         * - an object with margin, distance and interval properties,
         * - true or false to enable or disable autoScroll or
         = (Interactable) this Interactable
        \*/
        autoScroll: function (options) {
            if (isObject(options)) {
                options = extend({ actions: ['drag', 'resize']}, options);
            }
            else if (isBool(options)) {
                options = { actions: ['drag', 'resize'], enabled: options };
            }

            return this.setOptions('autoScroll', options);
        },

        /*\
         * Interactable.snap
         [ method ]
         **
         * Deprecated. Add a `snap` property to the options object passed
         * to @Interactable.draggable or @Interactable.resizable instead.
         *
         * Returns or sets if and how action coordinates are snapped. By
         * default, snapping is relative to the pointer coordinates. You can
         * change this by setting the
         * [`elementOrigin`](https://github.com/taye/interact.js/pull/72).
         **
         = (boolean | object) `false` if snap is disabled; object with snap properties if snap is enabled
         **
         * or
         **
         - options (object | boolean | null) #optional
         = (Interactable) this Interactable
         > Usage
         | interact(document.querySelector('#thing')).snap({
         |     targets: [
         |         // snap to this specific point
         |         {
         |             x: 100,
         |             y: 100,
         |             range: 25
         |         },
         |         // give this function the x and y page coords and snap to the object returned
         |         function (x, y) {
         |             return {
         |                 x: x,
         |                 y: (75 + 50 * Math.sin(x * 0.04)),
         |                 range: 40
         |             };
         |         },
         |         // create a function that snaps to a grid
         |         interact.createSnapGrid({
         |             x: 50,
         |             y: 50,
         |             range: 10,              // optional
         |             offset: { x: 5, y: 10 } // optional
         |         })
         |     ],
         |     // do not snap during normal movement.
         |     // Instead, trigger only one snapped move event
         |     // immediately before the end event.
         |     endOnly: true,
         |
         |     relativePoints: [
         |         { x: 0, y: 0 },  // snap relative to the top left of the element
         |         { x: 1, y: 1 },  // and also to the bottom right
         |     ],  
         |
         |     // offset the snap target coordinates
         |     // can be an object with x/y or 'startCoords'
         |     offset: { x: 50, y: 50 }
         |   }
         | });
        \*/
        snap: function (options) {
            var ret = this.setOptions('snap', options);

            if (ret === this) { return this; }

            return ret.drag;
        },

        setOptions: function (option, options) {
            var actions = options && isArray(options.actions)
                    ? options.actions
                    : ['drag'];

            var i;

            if (isObject(options) || isBool(options)) {
                for (i = 0; i < actions.length; i++) {
                    var action = /resize/.test(actions[i])? 'resize' : actions[i];

                    if (!isObject(this.options[action])) { continue; }

                    var thisOption = this.options[action][option];

                    if (isObject(options)) {
                        extend(thisOption, options);
                        thisOption.enabled = options.enabled === false? false: true;

                        if (option === 'snap') {
                            if (thisOption.mode === 'grid') {
                                thisOption.targets = [
                                    interact.createSnapGrid(extend({
                                        offset: thisOption.gridOffset || { x: 0, y: 0 }
                                    }, thisOption.grid || {}))
                                ];
                            }
                            else if (thisOption.mode === 'anchor') {
                                thisOption.targets = thisOption.anchors;
                            }
                            else if (thisOption.mode === 'path') {
                                thisOption.targets = thisOption.paths;
                            }

                            if ('elementOrigin' in options) {
                                thisOption.relativePoints = [options.elementOrigin];
                            }
                        }
                    }
                    else if (isBool(options)) {
                        thisOption.enabled = options;
                    }
                }

                return this;
            }

            var ret = {},
                allActions = ['drag', 'resize', 'gesture'];

            for (i = 0; i < allActions.length; i++) {
                if (option in defaultOptions[allActions[i]]) {
                    ret[allActions[i]] = this.options[allActions[i]][option];
                }
            }

            return ret;
        },


        /*\
         * Interactable.inertia
         [ method ]
         **
         * Deprecated. Add an `inertia` property to the options object passed
         * to @Interactable.draggable or @Interactable.resizable instead.
         *
         * Returns or sets if and how events continue to run after the pointer is released
         **
         = (boolean | object) `false` if inertia is disabled; `object` with inertia properties if inertia is enabled
         **
         * or
         **
         - options (object | boolean | null) #optional
         = (Interactable) this Interactable
         > Usage
         | // enable and use default settings
         | interact(element).inertia(true);
         |
         | // enable and use custom settings
         | interact(element).inertia({
         |     // value greater than 0
         |     // high values slow the object down more quickly
         |     resistance     : 16,
         |
         |     // the minimum launch speed (pixels per second) that results in inertia start
         |     minSpeed       : 200,
         |
         |     // inertia will stop when the object slows down to this speed
         |     endSpeed       : 20,
         |
         |     // boolean; should actions be resumed when the pointer goes down during inertia
         |     allowResume    : true,
         |
         |     // boolean; should the jump when resuming from inertia be ignored in event.dx/dy
         |     zeroResumeDelta: false,
         |
         |     // if snap/restrict are set to be endOnly and inertia is enabled, releasing
         |     // the pointer without triggering inertia will animate from the release
         |     // point to the snaped/restricted point in the given amount of time (ms)
         |     smoothEndDuration: 300,
         |
         |     // an array of action types that can have inertia (no gesture)
         |     actions        : ['drag', 'resize']
         | });
         |
         | // reset custom settings and use all defaults
         | interact(element).inertia(null);
        \*/
        inertia: function (options) {
            var ret = this.setOptions('inertia', options);

            if (ret === this) { return this; }

            return ret.drag;
        },

        getAction: function (pointer, event, interaction, element) {
            var action = this.defaultActionChecker(pointer, interaction, element);

            if (this.options.actionChecker) {
                return this.options.actionChecker(pointer, event, action, this, element, interaction);
            }

            return action;
        },

        defaultActionChecker: defaultActionChecker,

        /*\
         * Interactable.actionChecker
         [ method ]
         *
         * Gets or sets the function used to check action to be performed on
         * pointerDown
         *
         - checker (function | null) #optional A function which takes a pointer event, defaultAction string, interactable, element and interaction as parameters and returns an object with name property 'drag' 'resize' or 'gesture' and optionally an `edges` object with boolean 'top', 'left', 'bottom' and right props.
         = (Function | Interactable) The checker function or this Interactable
         *
         | interact('.resize-drag')
         |   .resizable(true)
         |   .draggable(true)
         |   .actionChecker(function (pointer, event, action, interactable, element, interaction) {
         |
         |   if (interact.matchesSelector(event.target, '.drag-handle') {
         |     // force drag with handle target
         |     action.name = drag;
         |   }
         |   else {
         |     // resize from the top and right edges
         |     action.name  = 'resize';
         |     action.edges = { top: true, right: true };
         |   }
         |
         |   return action;
         | });
        \*/
        actionChecker: function (checker) {
            if (isFunction(checker)) {
                this.options.actionChecker = checker;

                return this;
            }

            if (checker === null) {
                delete this.options.actionChecker;

                return this;
            }

            return this.options.actionChecker;
        },

        /*\
         * Interactable.getRect
         [ method ]
         *
         * The default function to get an Interactables bounding rect. Can be
         * overridden using @Interactable.rectChecker.
         *
         - element (Element) #optional The element to measure.
         = (object) The object's bounding rectangle.
         o {
         o     top   : 0,
         o     left  : 0,
         o     bottom: 0,
         o     right : 0,
         o     width : 0,
         o     height: 0
         o }
        \*/
        getRect: function rectCheck (element) {
            element = element || this._element;

            if (this.selector && !(isElement(element))) {
                element = this._context.querySelector(this.selector);
            }

            return getElementRect(element);
        },

        /*\
         * Interactable.rectChecker
         [ method ]
         *
         * Returns or sets the function used to calculate the interactable's
         * element's rectangle
         *
         - checker (function) #optional A function which returns this Interactable's bounding rectangle. See @Interactable.getRect
         = (function | object) The checker function or this Interactable
        \*/
        rectChecker: function (checker) {
            if (isFunction(checker)) {
                this.getRect = checker;

                return this;
            }

            if (checker === null) {
                delete this.options.getRect;

                return this;
            }

            return this.getRect;
        },

        /*\
         * Interactable.styleCursor
         [ method ]
         *
         * Returns or sets whether the action that would be performed when the
         * mouse on the element are checked on `mousemove` so that the cursor
         * may be styled appropriately
         *
         - newValue (boolean) #optional
         = (boolean | Interactable) The current setting or this Interactable
        \*/
        styleCursor: function (newValue) {
            if (isBool(newValue)) {
                this.options.styleCursor = newValue;

                return this;
            }

            if (newValue === null) {
                delete this.options.styleCursor;

                return this;
            }

            return this.options.styleCursor;
        },

        /*\
         * Interactable.preventDefault
         [ method ]
         *
         * Returns or sets whether to prevent the browser's default behaviour
         * in response to pointer events. Can be set to:
         *  - `'always'` to always prevent
         *  - `'never'` to never prevent
         *  - `'auto'` to let interact.js try to determine what would be best
         *
         - newValue (string) #optional `true`, `false` or `'auto'`
         = (string | Interactable) The current setting or this Interactable
        \*/
        preventDefault: function (newValue) {
            if (/^(always|never|auto)$/.test(newValue)) {
                this.options.preventDefault = newValue;
                return this;
            }

            if (isBool(newValue)) {
                this.options.preventDefault = newValue? 'always' : 'never';
                return this;
            }

            return this.options.preventDefault;
        },

        /*\
         * Interactable.origin
         [ method ]
         *
         * Gets or sets the origin of the Interactable's element.  The x and y
         * of the origin will be subtracted from action event coordinates.
         *
         - origin (object | string) #optional An object eg. { x: 0, y: 0 } or string 'parent', 'self' or any CSS selector
         * OR
         - origin (Element) #optional An HTML or SVG Element whose rect will be used
         **
         = (object) The current origin or this Interactable
        \*/
        origin: function (newValue) {
            if (trySelector(newValue)) {
                this.options.origin = newValue;
                return this;
            }
            else if (isObject(newValue)) {
                this.options.origin = newValue;
                return this;
            }

            return this.options.origin;
        },

        /*\
         * Interactable.deltaSource
         [ method ]
         *
         * Returns or sets the mouse coordinate types used to calculate the
         * movement of the pointer.
         *
         - newValue (string) #optional Use 'client' if you will be scrolling while interacting; Use 'page' if you want autoScroll to work
         = (string | object) The current deltaSource or this Interactable
        \*/
        deltaSource: function (newValue) {
            if (newValue === 'page' || newValue === 'client') {
                this.options.deltaSource = newValue;

                return this;
            }

            return this.options.deltaSource;
        },

        /*\
         * Interactable.restrict
         [ method ]
         **
         * Deprecated. Add a `restrict` property to the options object passed to
         * @Interactable.draggable, @Interactable.resizable or @Interactable.gesturable instead.
         *
         * Returns or sets the rectangles within which actions on this
         * interactable (after snap calculations) are restricted. By default,
         * restricting is relative to the pointer coordinates. You can change
         * this by setting the
         * [`elementRect`](https://github.com/taye/interact.js/pull/72).
         **
         - options (object) #optional an object with keys drag, resize, and/or gesture whose values are rects, Elements, CSS selectors, or 'parent' or 'self'
         = (object) The current restrictions object or this Interactable
         **
         | interact(element).restrict({
         |     // the rect will be `interact.getElementRect(element.parentNode)`
         |     drag: element.parentNode,
         |
         |     // x and y are relative to the the interactable's origin
         |     resize: { x: 100, y: 100, width: 200, height: 200 }
         | })
         |
         | interact('.draggable').restrict({
         |     // the rect will be the selected element's parent
         |     drag: 'parent',
         |
         |     // do not restrict during normal movement.
         |     // Instead, trigger only one restricted move event
         |     // immediately before the end event.
         |     endOnly: true,
         |
         |     // https://github.com/taye/interact.js/pull/72#issue-41813493
         |     elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
         | });
        \*/
        restrict: function (options) {
            if (!isObject(options)) {
                return this.setOptions('restrict', options);
            }

            var actions = ['drag', 'resize', 'gesture'],
                ret;

            for (var i = 0; i < actions.length; i++) {
                var action = actions[i];

                if (action in options) {
                    var perAction = extend({
                            actions: [action],
                            restriction: options[action]
                        }, options);

                    ret = this.setOptions('restrict', perAction);
                }
            }

            return ret;
        },

        /*\
         * Interactable.context
         [ method ]
         *
         * Gets the selector context Node of the Interactable. The default is `window.document`.
         *
         = (Node) The context Node of this Interactable
         **
        \*/
        context: function () {
            return this._context;
        },

        _context: document,

        /*\
         * Interactable.ignoreFrom
         [ method ]
         *
         * If the target of the `mousedown`, `pointerdown` or `touchstart`
         * event or any of it's parents match the given CSS selector or
         * Element, no drag/resize/gesture is started.
         *
         - newValue (string | Element | null) #optional a CSS selector string, an Element or `null` to not ignore any elements
         = (string | Element | object) The current ignoreFrom value or this Interactable
         **
         | interact(element, { ignoreFrom: document.getElementById('no-action') });
         | // or
         | interact(element).ignoreFrom('input, textarea, a');
        \*/
        ignoreFrom: function (newValue) {
            if (trySelector(newValue)) {            // CSS selector to match event.target
                this.options.ignoreFrom = newValue;
                return this;
            }

            if (isElement(newValue)) {              // specific element
                this.options.ignoreFrom = newValue;
                return this;
            }

            return this.options.ignoreFrom;
        },

        /*\
         * Interactable.allowFrom
         [ method ]
         *
         * A drag/resize/gesture is started only If the target of the
         * `mousedown`, `pointerdown` or `touchstart` event or any of it's
         * parents match the given CSS selector or Element.
         *
         - newValue (string | Element | null) #optional a CSS selector string, an Element or `null` to allow from any element
         = (string | Element | object) The current allowFrom value or this Interactable
         **
         | interact(element, { allowFrom: document.getElementById('drag-handle') });
         | // or
         | interact(element).allowFrom('.handle');
        \*/
        allowFrom: function (newValue) {
            if (trySelector(newValue)) {            // CSS selector to match event.target
                this.options.allowFrom = newValue;
                return this;
            }

            if (isElement(newValue)) {              // specific element
                this.options.allowFrom = newValue;
                return this;
            }

            return this.options.allowFrom;
        },

        /*\
         * Interactable.element
         [ method ]
         *
         * If this is not a selector Interactable, it returns the element this
         * interactable represents
         *
         = (Element) HTML / SVG Element
        \*/
        element: function () {
            return this._element;
        },

        /*\
         * Interactable.fire
         [ method ]
         *
         * Calls listeners for the given InteractEvent type bound globally
         * and directly to this Interactable
         *
         - iEvent (InteractEvent) The InteractEvent object to be fired on this Interactable
         = (Interactable) this Interactable
        \*/
        fire: function (iEvent) {
            if (!(iEvent && iEvent.type) || !contains(eventTypes, iEvent.type)) {
                return this;
            }

            var listeners,
                i,
                len,
                onEvent = 'on' + iEvent.type,
                funcName = '';

            // Interactable#on() listeners
            if (iEvent.type in this._iEvents) {
                listeners = this._iEvents[iEvent.type];

                for (i = 0, len = listeners.length; i < len && !iEvent.immediatePropagationStopped; i++) {
                    funcName = listeners[i].name;
                    listeners[i](iEvent);
                }
            }

            // interactable.onevent listener
            if (isFunction(this[onEvent])) {
                funcName = this[onEvent].name;
                this[onEvent](iEvent);
            }

            // interact.on() listeners
            if (iEvent.type in globalEvents && (listeners = globalEvents[iEvent.type]))  {

                for (i = 0, len = listeners.length; i < len && !iEvent.immediatePropagationStopped; i++) {
                    funcName = listeners[i].name;
                    listeners[i](iEvent);
                }
            }

            return this;
        },

        /*\
         * Interactable.on
         [ method ]
         *
         * Binds a listener for an InteractEvent or DOM event.
         *
         - eventType  (string | array | object) The types of events to listen for
         - listener   (function) The function to be called on the given event(s)
         - useCapture (boolean) #optional useCapture flag for addEventListener
         = (object) This Interactable
        \*/
        on: function (eventType, listener, useCapture) {
            var i;

            if (isString(eventType) && eventType.search(' ') !== -1) {
                eventType = eventType.trim().split(/ +/);
            }

            if (isArray(eventType)) {
                for (i = 0; i < eventType.length; i++) {
                    this.on(eventType[i], listener, useCapture);
                }

                return this;
            }

            if (isObject(eventType)) {
                for (var prop in eventType) {
                    this.on(prop, eventType[prop], listener);
                }

                return this;
            }

            if (eventType === 'wheel') {
                eventType = wheelEvent;
            }

            // convert to boolean
            useCapture = useCapture? true: false;

            if (contains(eventTypes, eventType)) {
                // if this type of event was never bound to this Interactable
                if (!(eventType in this._iEvents)) {
                    this._iEvents[eventType] = [listener];
                }
                else {
                    this._iEvents[eventType].push(listener);
                }
            }
            // delegated event for selector
            else if (this.selector) {
                if (!delegatedEvents[eventType]) {
                    delegatedEvents[eventType] = {
                        selectors: [],
                        contexts : [],
                        listeners: []
                    };

                    // add delegate listener functions
                    for (i = 0; i < documents.length; i++) {
                        events.add(documents[i], eventType, delegateListener);
                        events.add(documents[i], eventType, delegateUseCapture, true);
                    }
                }

                var delegated = delegatedEvents[eventType],
                    index;

                for (index = delegated.selectors.length - 1; index >= 0; index--) {
                    if (delegated.selectors[index] === this.selector
                        && delegated.contexts[index] === this._context) {
                        break;
                    }
                }

                if (index === -1) {
                    index = delegated.selectors.length;

                    delegated.selectors.push(this.selector);
                    delegated.contexts .push(this._context);
                    delegated.listeners.push([]);
                }

                // keep listener and useCapture flag
                delegated.listeners[index].push([listener, useCapture]);
            }
            else {
                events.add(this._element, eventType, listener, useCapture);
            }

            return this;
        },

        /*\
         * Interactable.off
         [ method ]
         *
         * Removes an InteractEvent or DOM event listener
         *
         - eventType  (string | array | object) The types of events that were listened for
         - listener   (function) The listener function to be removed
         - useCapture (boolean) #optional useCapture flag for removeEventListener
         = (object) This Interactable
        \*/
        off: function (eventType, listener, useCapture) {
            var i;

            if (isString(eventType) && eventType.search(' ') !== -1) {
                eventType = eventType.trim().split(/ +/);
            }

            if (isArray(eventType)) {
                for (i = 0; i < eventType.length; i++) {
                    this.off(eventType[i], listener, useCapture);
                }

                return this;
            }

            if (isObject(eventType)) {
                for (var prop in eventType) {
                    this.off(prop, eventType[prop], listener);
                }

                return this;
            }

            var eventList,
                index = -1;

            // convert to boolean
            useCapture = useCapture? true: false;

            if (eventType === 'wheel') {
                eventType = wheelEvent;
            }

            // if it is an action event type
            if (contains(eventTypes, eventType)) {
                eventList = this._iEvents[eventType];

                if (eventList && (index = indexOf(eventList, listener)) !== -1) {
                    this._iEvents[eventType].splice(index, 1);
                }
            }
            // delegated event
            else if (this.selector) {
                var delegated = delegatedEvents[eventType],
                    matchFound = false;

                if (!delegated) { return this; }

                // count from last index of delegated to 0
                for (index = delegated.selectors.length - 1; index >= 0; index--) {
                    // look for matching selector and context Node
                    if (delegated.selectors[index] === this.selector
                        && delegated.contexts[index] === this._context) {

                        var listeners = delegated.listeners[index];

                        // each item of the listeners array is an array: [function, useCaptureFlag]
                        for (i = listeners.length - 1; i >= 0; i--) {
                            var fn = listeners[i][0],
                                useCap = listeners[i][1];

                            // check if the listener functions and useCapture flags match
                            if (fn === listener && useCap === useCapture) {
                                // remove the listener from the array of listeners
                                listeners.splice(i, 1);

                                // if all listeners for this interactable have been removed
                                // remove the interactable from the delegated arrays
                                if (!listeners.length) {
                                    delegated.selectors.splice(index, 1);
                                    delegated.contexts .splice(index, 1);
                                    delegated.listeners.splice(index, 1);

                                    // remove delegate function from context
                                    events.remove(this._context, eventType, delegateListener);
                                    events.remove(this._context, eventType, delegateUseCapture, true);

                                    // remove the arrays if they are empty
                                    if (!delegated.selectors.length) {
                                        delegatedEvents[eventType] = null;
                                    }
                                }

                                // only remove one listener
                                matchFound = true;
                                break;
                            }
                        }

                        if (matchFound) { break; }
                    }
                }
            }
            // remove listener from this Interatable's element
            else {
                events.remove(this._element, eventType, listener, useCapture);
            }

            return this;
        },

        /*\
         * Interactable.set
         [ method ]
         *
         * Reset the options of this Interactable
         - options (object) The new settings to apply
         = (object) This Interactable
        \*/
        set: function (options) {
            if (!isObject(options)) {
                options = {};
            }

            this.options = extend({}, defaultOptions.base);

            var i,
                actions = ['drag', 'drop', 'resize', 'gesture'],
                methods = ['draggable', 'dropzone', 'resizable', 'gesturable'],
                perActions = extend(extend({}, defaultOptions.perAction), options[action] || {});

            for (i = 0; i < actions.length; i++) {
                var action = actions[i];

                this.options[action] = extend({}, defaultOptions[action]);

                this.setPerAction(action, perActions);

                this[methods[i]](options[action]);
            }

            var settings = [
                    'accept', 'actionChecker', 'allowFrom', 'deltaSource',
                    'dropChecker', 'ignoreFrom', 'origin', 'preventDefault',
                    'rectChecker', 'styleCursor'
                ];

            for (i = 0, len = settings.length; i < len; i++) {
                var setting = settings[i];

                this.options[setting] = defaultOptions.base[setting];

                if (setting in options) {
                    this[setting](options[setting]);
                }
            }

            return this;
        },

        /*\
         * Interactable.unset
         [ method ]
         *
         * Remove this interactable from the list of interactables and remove
         * it's drag, drop, resize and gesture capabilities
         *
         = (object) @interact
        \*/
        unset: function () {
            events.remove(this._element, 'all');

            if (!isString(this.selector)) {
                events.remove(this, 'all');
                if (this.options.styleCursor) {
                    this._element.style.cursor = '';
                }
            }
            else {
                // remove delegated events
                for (var type in delegatedEvents) {
                    var delegated = delegatedEvents[type];

                    for (var i = 0; i < delegated.selectors.length; i++) {
                        if (delegated.selectors[i] === this.selector
                            && delegated.contexts[i] === this._context) {

                            delegated.selectors.splice(i, 1);
                            delegated.contexts .splice(i, 1);
                            delegated.listeners.splice(i, 1);

                            // remove the arrays if they are empty
                            if (!delegated.selectors.length) {
                                delegatedEvents[type] = null;
                            }
                        }

                        events.remove(this._context, type, delegateListener);
                        events.remove(this._context, type, delegateUseCapture, true);

                        break;
                    }
                }
            }

            this.dropzone(false);

            interactables.splice(indexOf(interactables, this), 1);

            return interact;
        }
    };

    function warnOnce (method, message) {
        var warned = false;

        return function () {
            if (!warned) {
                window.console.warn(message);
                warned = true;
            }

            return method.apply(this, arguments);
        };
    }

    Interactable.prototype.snap = warnOnce(Interactable.prototype.snap,
         'Interactable#snap is deprecated. See the new documentation for snapping at http://interactjs.io/docs/snapping');
    Interactable.prototype.restrict = warnOnce(Interactable.prototype.restrict,
         'Interactable#restrict is deprecated. See the new documentation for resticting at http://interactjs.io/docs/restriction');
    Interactable.prototype.inertia = warnOnce(Interactable.prototype.inertia,
         'Interactable#inertia is deprecated. See the new documentation for inertia at http://interactjs.io/docs/inertia');
    Interactable.prototype.autoScroll = warnOnce(Interactable.prototype.autoScroll,
         'Interactable#autoScroll is deprecated. See the new documentation for autoScroll at http://interactjs.io/docs/#autoscroll');
    Interactable.prototype.squareResize = warnOnce(Interactable.prototype.squareResize,
         'Interactable#squareResize is deprecated. See http://interactjs.io/docs/#resize-square');

    Interactable.prototype.accept = warnOnce(Interactable.prototype.accept,
         'Interactable#accept is deprecated. use Interactable#dropzone({ accept: target }) instead');
    Interactable.prototype.dropChecker = warnOnce(Interactable.prototype.dropChecker,
         'Interactable#dropChecker is deprecated. use Interactable#dropzone({ dropChecker: checkerFunction }) instead');
    Interactable.prototype.context = warnOnce(Interactable.prototype.context,
         'Interactable#context as a method is deprecated. It will soon be a DOM Node instead');

    /*\
     * interact.isSet
     [ method ]
     *
     * Check if an element has been set
     - element (Element) The Element being searched for
     = (boolean) Indicates if the element or CSS selector was previously passed to interact
    \*/
    interact.isSet = function(element, options) {
        return interactables.indexOfElement(element, options && options.context) !== -1;
    };

    /*\
     * interact.on
     [ method ]
     *
     * Adds a global listener for an InteractEvent or adds a DOM event to
     * `document`
     *
     - type       (string | array | object) The types of events to listen for
     - listener   (function) The function to be called on the given event(s)
     - useCapture (boolean) #optional useCapture flag for addEventListener
     = (object) interact
    \*/
    interact.on = function (type, listener, useCapture) {
        if (isString(type) && type.search(' ') !== -1) {
            type = type.trim().split(/ +/);
        }

        if (isArray(type)) {
            for (var i = 0; i < type.length; i++) {
                interact.on(type[i], listener, useCapture);
            }

            return interact;
        }

        if (isObject(type)) {
            for (var prop in type) {
                interact.on(prop, type[prop], listener);
            }

            return interact;
        }

        // if it is an InteractEvent type, add listener to globalEvents
        if (contains(eventTypes, type)) {
            // if this type of event was never bound
            if (!globalEvents[type]) {
                globalEvents[type] = [listener];
            }
            else {
                globalEvents[type].push(listener);
            }
        }
        // If non InteractEvent type, addEventListener to document
        else {
            events.add(document, type, listener, useCapture);
        }

        return interact;
    };

    /*\
     * interact.off
     [ method ]
     *
     * Removes a global InteractEvent listener or DOM event from `document`
     *
     - type       (string | array | object) The types of events that were listened for
     - listener   (function) The listener function to be removed
     - useCapture (boolean) #optional useCapture flag for removeEventListener
     = (object) interact
     \*/
    interact.off = function (type, listener, useCapture) {
        if (isString(type) && type.search(' ') !== -1) {
            type = type.trim().split(/ +/);
        }

        if (isArray(type)) {
            for (var i = 0; i < type.length; i++) {
                interact.off(type[i], listener, useCapture);
            }

            return interact;
        }

        if (isObject(type)) {
            for (var prop in type) {
                interact.off(prop, type[prop], listener);
            }

            return interact;
        }

        if (!contains(eventTypes, type)) {
            events.remove(document, type, listener, useCapture);
        }
        else {
            var index;

            if (type in globalEvents
                && (index = indexOf(globalEvents[type], listener)) !== -1) {
                globalEvents[type].splice(index, 1);
            }
        }

        return interact;
    };

    /*\
     * interact.enableDragging
     [ method ]
     *
     * Deprecated.
     *
     * Returns or sets whether dragging is enabled for any Interactables
     *
     - newValue (boolean) #optional `true` to allow the action; `false` to disable action for all Interactables
     = (boolean | object) The current setting or interact
    \*/
    interact.enableDragging = warnOnce(function (newValue) {
        if (newValue !== null && newValue !== undefined) {
            actionIsEnabled.drag = newValue;

            return interact;
        }
        return actionIsEnabled.drag;
    }, 'interact.enableDragging is deprecated and will soon be removed.');

    /*\
     * interact.enableResizing
     [ method ]
     *
     * Deprecated.
     *
     * Returns or sets whether resizing is enabled for any Interactables
     *
     - newValue (boolean) #optional `true` to allow the action; `false` to disable action for all Interactables
     = (boolean | object) The current setting or interact
    \*/
    interact.enableResizing = warnOnce(function (newValue) {
        if (newValue !== null && newValue !== undefined) {
            actionIsEnabled.resize = newValue;

            return interact;
        }
        return actionIsEnabled.resize;
    }, 'interact.enableResizing is deprecated and will soon be removed.');

    /*\
     * interact.enableGesturing
     [ method ]
     *
     * Deprecated.
     *
     * Returns or sets whether gesturing is enabled for any Interactables
     *
     - newValue (boolean) #optional `true` to allow the action; `false` to disable action for all Interactables
     = (boolean | object) The current setting or interact
    \*/
    interact.enableGesturing = warnOnce(function (newValue) {
        if (newValue !== null && newValue !== undefined) {
            actionIsEnabled.gesture = newValue;

            return interact;
        }
        return actionIsEnabled.gesture;
    }, 'interact.enableGesturing is deprecated and will soon be removed.');

    interact.eventTypes = eventTypes;

    /*\
     * interact.debug
     [ method ]
     *
     * Returns debugging data
     = (object) An object with properties that outline the current state and expose internal functions and variables
    \*/
    interact.debug = function () {
        var interaction = interactions[0] || new Interaction();

        return {
            interactions          : interactions,
            target                : interaction.target,
            dragging              : interaction.dragging,
            resizing              : interaction.resizing,
            gesturing             : interaction.gesturing,
            prepared              : interaction.prepared,
            matches               : interaction.matches,
            matchElements         : interaction.matchElements,

            prevCoords            : interaction.prevCoords,
            startCoords           : interaction.startCoords,

            pointerIds            : interaction.pointerIds,
            pointers              : interaction.pointers,
            addPointer            : listeners.addPointer,
            removePointer         : listeners.removePointer,
            recordPointer        : listeners.recordPointer,

            snap                  : interaction.snapStatus,
            restrict              : interaction.restrictStatus,
            inertia               : interaction.inertiaStatus,

            downTime              : interaction.downTimes[0],
            downEvent             : interaction.downEvent,
            downPointer           : interaction.downPointer,
            prevEvent             : interaction.prevEvent,

            Interactable          : Interactable,
            interactables         : interactables,
            pointerIsDown         : interaction.pointerIsDown,
            defaultOptions        : defaultOptions,
            defaultActionChecker  : defaultActionChecker,

            actionCursors         : actionCursors,
            dragMove              : listeners.dragMove,
            resizeMove            : listeners.resizeMove,
            gestureMove           : listeners.gestureMove,
            pointerUp             : listeners.pointerUp,
            pointerDown           : listeners.pointerDown,
            pointerMove           : listeners.pointerMove,
            pointerHover          : listeners.pointerHover,

            eventTypes            : eventTypes,

            events                : events,
            globalEvents          : globalEvents,
            delegatedEvents       : delegatedEvents,

            prefixedPropREs       : prefixedPropREs
        };
    };

    // expose the functions used to calculate multi-touch properties
    interact.getPointerAverage = pointerAverage;
    interact.getTouchBBox     = touchBBox;
    interact.getTouchDistance = touchDistance;
    interact.getTouchAngle    = touchAngle;

    interact.getElementRect         = getElementRect;
    interact.getElementClientRect   = getElementClientRect;
    interact.matchesSelector        = matchesSelector;
    interact.closest                = closest;

    /*\
     * interact.margin
     [ method ]
     *
     * Deprecated. Use `interact(target).resizable({ margin: number });` instead.
     * Returns or sets the margin for autocheck resizing used in
     * @Interactable.getAction. That is the distance from the bottom and right
     * edges of an element clicking in which will start resizing
     *
     - newValue (number) #optional
     = (number | interact) The current margin value or interact
    \*/
    interact.margin = warnOnce(function (newvalue) {
        if (isNumber(newvalue)) {
            margin = newvalue;

            return interact;
        }
        return margin;
    },
    'interact.margin is deprecated. Use interact(target).resizable({ margin: number }); instead.') ;

    /*\
     * interact.supportsTouch
     [ method ]
     *
     = (boolean) Whether or not the browser supports touch input
    \*/
    interact.supportsTouch = function () {
        return supportsTouch;
    };

    /*\
     * interact.supportsPointerEvent
     [ method ]
     *
     = (boolean) Whether or not the browser supports PointerEvents
    \*/
    interact.supportsPointerEvent = function () {
        return supportsPointerEvent;
    };

    /*\
     * interact.stop
     [ method ]
     *
     * Cancels all interactions (end events are not fired)
     *
     - event (Event) An event on which to call preventDefault()
     = (object) interact
    \*/
    interact.stop = function (event) {
        for (var i = interactions.length - 1; i >= 0; i--) {
            interactions[i].stop(event);
        }

        return interact;
    };

    /*\
     * interact.dynamicDrop
     [ method ]
     *
     * Returns or sets whether the dimensions of dropzone elements are
     * calculated on every dragmove or only on dragstart for the default
     * dropChecker
     *
     - newValue (boolean) #optional True to check on each move. False to check only before start
     = (boolean | interact) The current setting or interact
    \*/
    interact.dynamicDrop = function (newValue) {
        if (isBool(newValue)) {
            //if (dragging && dynamicDrop !== newValue && !newValue) {
                //calcRects(dropzones);
            //}

            dynamicDrop = newValue;

            return interact;
        }
        return dynamicDrop;
    };

    /*\
     * interact.pointerMoveTolerance
     [ method ]
     * Returns or sets the distance the pointer must be moved before an action
     * sequence occurs. This also affects tolerance for tap events.
     *
     - newValue (number) #optional The movement from the start position must be greater than this value
     = (number | Interactable) The current setting or interact
    \*/
    interact.pointerMoveTolerance = function (newValue) {
        if (isNumber(newValue)) {
            pointerMoveTolerance = newValue;

            return this;
        }

        return pointerMoveTolerance;
    };

    /*\
     * interact.maxInteractions
     [ method ]
     **
     * Returns or sets the maximum number of concurrent interactions allowed.
     * By default only 1 interaction is allowed at a time (for backwards
     * compatibility). To allow multiple interactions on the same Interactables
     * and elements, you need to enable it in the draggable, resizable and
     * gesturable `'max'` and `'maxPerElement'` options.
     **
     - newValue (number) #optional Any number. newValue <= 0 means no interactions.
    \*/
    interact.maxInteractions = function (newValue) {
        if (isNumber(newValue)) {
            maxInteractions = newValue;

            return this;
        }

        return maxInteractions;
    };

    interact.createSnapGrid = function (grid) {
        return function (x, y) {
            var offsetX = 0,
                offsetY = 0;

            if (isObject(grid.offset)) {
                offsetX = grid.offset.x;
                offsetY = grid.offset.y;
            }

            var gridx = Math.round((x - offsetX) / grid.x),
                gridy = Math.round((y - offsetY) / grid.y),

                newX = gridx * grid.x + offsetX,
                newY = gridy * grid.y + offsetY;

            return {
                x: newX,
                y: newY,
                range: grid.range
            };
        };
    };

    function endAllInteractions (event) {
        for (var i = 0; i < interactions.length; i++) {
            interactions[i].pointerEnd(event, event);
        }
    }

    function listenToDocument (doc) {
        if (contains(documents, doc)) { return; }

        var win = doc.defaultView || doc.parentWindow;

        // add delegate event listener
        for (var eventType in delegatedEvents) {
            events.add(doc, eventType, delegateListener);
            events.add(doc, eventType, delegateUseCapture, true);
        }

        if (PointerEvent) {
            if (PointerEvent === win.MSPointerEvent) {
                pEventTypes = {
                    up: 'MSPointerUp', down: 'MSPointerDown', over: 'mouseover',
                    out: 'mouseout', move: 'MSPointerMove', cancel: 'MSPointerCancel' };
            }
            else {
                pEventTypes = {
                    up: 'pointerup', down: 'pointerdown', over: 'pointerover',
                    out: 'pointerout', move: 'pointermove', cancel: 'pointercancel' };
            }

            events.add(doc, pEventTypes.down  , listeners.selectorDown );
            events.add(doc, pEventTypes.move  , listeners.pointerMove  );
            events.add(doc, pEventTypes.over  , listeners.pointerOver  );
            events.add(doc, pEventTypes.out   , listeners.pointerOut   );
            events.add(doc, pEventTypes.up    , listeners.pointerUp    );
            events.add(doc, pEventTypes.cancel, listeners.pointerCancel);

            // autoscroll
            events.add(doc, pEventTypes.move, listeners.autoScrollMove);
        }
        else {
            events.add(doc, 'mousedown', listeners.selectorDown);
            events.add(doc, 'mousemove', listeners.pointerMove );
            events.add(doc, 'mouseup'  , listeners.pointerUp   );
            events.add(doc, 'mouseover', listeners.pointerOver );
            events.add(doc, 'mouseout' , listeners.pointerOut  );

            events.add(doc, 'touchstart' , listeners.selectorDown );
            events.add(doc, 'touchmove'  , listeners.pointerMove  );
            events.add(doc, 'touchend'   , listeners.pointerUp    );
            events.add(doc, 'touchcancel', listeners.pointerCancel);

            // autoscroll
            events.add(doc, 'mousemove', listeners.autoScrollMove);
            events.add(doc, 'touchmove', listeners.autoScrollMove);
        }

        events.add(win, 'blur', endAllInteractions);

        try {
            if (win.frameElement) {
                var parentDoc = win.frameElement.ownerDocument,
                    parentWindow = parentDoc.defaultView;

                events.add(parentDoc   , 'mouseup'      , listeners.pointerEnd);
                events.add(parentDoc   , 'touchend'     , listeners.pointerEnd);
                events.add(parentDoc   , 'touchcancel'  , listeners.pointerEnd);
                events.add(parentDoc   , 'pointerup'    , listeners.pointerEnd);
                events.add(parentDoc   , 'MSPointerUp'  , listeners.pointerEnd);
                events.add(parentWindow, 'blur'         , endAllInteractions );
            }
        }
        catch (error) {
            interact.windowParentError = error;
        }

        // prevent native HTML5 drag on interact.js target elements
        events.add(doc, 'dragstart', function (event) {
            for (var i = 0; i < interactions.length; i++) {
                var interaction = interactions[i];

                if (interaction.element
                    && (interaction.element === event.target
                        || nodeContains(interaction.element, event.target))) {

                    interaction.checkAndPreventDefault(event, interaction.target, interaction.element);
                    return;
                }
            }
        });

        if (events.useAttachEvent) {
            // For IE's lack of Event#preventDefault
            events.add(doc, 'selectstart', function (event) {
                var interaction = interactions[0];

                if (interaction.currentAction()) {
                    interaction.checkAndPreventDefault(event);
                }
            });

            // For IE's bad dblclick event sequence
            events.add(doc, 'dblclick', doOnInteractions('ie8Dblclick'));
        }

        documents.push(doc);
    }

    listenToDocument(document);

    function indexOf (array, target) {
        for (var i = 0, len = array.length; i < len; i++) {
            if (array[i] === target) {
                return i;
            }
        }

        return -1;
    }

    function contains (array, target) {
        return indexOf(array, target) !== -1;
    }

    function matchesSelector (element, selector, nodeList) {
        if (ie8MatchesSelector) {
            return ie8MatchesSelector(element, selector, nodeList);
        }

        // remove /deep/ from selectors if shadowDOM polyfill is used
        if (window !== realWindow) {
            selector = selector.replace(/\/deep\//g, ' ');
        }

        return element[prefixedMatchesSelector](selector);
    }

    function matchesUpTo (element, selector, limit) {
        while (isElement(element)) {
            if (matchesSelector(element, selector)) {
                return true;
            }

            element = parentElement(element);

            if (element === limit) {
                return matchesSelector(element, selector);
            }
        }

        return false;
    }

    // For IE8's lack of an Element#matchesSelector
    // taken from http://tanalin.com/en/blog/2012/12/matches-selector-ie8/ and modified
    if (!(prefixedMatchesSelector in Element.prototype) || !isFunction(Element.prototype[prefixedMatchesSelector])) {
        ie8MatchesSelector = function (element, selector, elems) {
            elems = elems || element.parentNode.querySelectorAll(selector);

            for (var i = 0, len = elems.length; i < len; i++) {
                if (elems[i] === element) {
                    return true;
                }
            }

            return false;
        };
    }

    // requestAnimationFrame polyfill
    (function() {
        var lastTime = 0,
            vendors = ['ms', 'moz', 'webkit', 'o'];

        for(var x = 0; x < vendors.length && !realWindow.requestAnimationFrame; ++x) {
            reqFrame = realWindow[vendors[x]+'RequestAnimationFrame'];
            cancelFrame = realWindow[vendors[x]+'CancelAnimationFrame'] || realWindow[vendors[x]+'CancelRequestAnimationFrame'];
        }

        if (!reqFrame) {
            reqFrame = function(callback) {
                var currTime = new Date().getTime(),
                    timeToCall = Math.max(0, 16 - (currTime - lastTime)),
                    id = setTimeout(function() { callback(currTime + timeToCall); },
                  timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };
        }

        if (!cancelFrame) {
            cancelFrame = function(id) {
                clearTimeout(id);
            };
        }
    }());

    /* global exports: true, module, define */

    // http://documentcloud.github.io/underscore/docs/underscore.html#section-11
    if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
            exports = module.exports = interact;
        }
        exports.interact = interact;
    }
    // AMD
    else if (typeof define === 'function' && define.amd) {
        define('interact', function() {
            return interact;
        });
    }
    else {
        realWindow.interact = interact;
    }

} (typeof window === 'undefined'? undefined : window));

},{}],41:[function(require,module,exports){
'use strict';
// jQuery extensions

module.exports = function () {
    // params
    // toggleClass - required
    // triggerSelector - optional. the selector for the element that triggers the event handler. defaults to the child elements of the list.
    // eventName - optional. defaults to 'click'
    $.fn.toggledList = function (options) {
        if (!options.toggleClass) { return this; }
        var list = this;
        return list.on(options.eventName || 'click', options.triggerSelector || list.children(), function (e) {
            e.preventDefault();
            var classTarget = options.triggerSelector ? $(this).parent() : $(this);
            classTarget.toggleClass(options.toggleClass);
            // execute callback if exists
            if (options.callback) {options.callback();}
        });
    };

    $.fn.syncHeight = function () {
        var arr = $.makeArray(this);
        arr.sort(function (a, b) {
            return $(a).height() - $(b).height();
        });
        return this.height($(arr[arr.length - 1]).height());
    };

    $.fn.center = function(loaded, eventNameSpace) {
        var elements = this;
        var body_width = parseInt($(window).width());
        var body_height = parseInt($(window).height());

        elements.each(function() {
            var $el = $(this);
            var block_width = parseInt($el.width());
            var block_height = parseInt($el.height());
            var stopCentering = false;

            var left_position = parseInt((body_width / 2) - (block_width / 2)  + $(window).scrollLeft());
            if (body_width < block_width) {
                left_position = 0
            }
            var top_position = parseInt((body_height / 2) - (block_height / 2) + $(window).scrollTop());
            if (body_height < block_height) {
                stopCentering = true;
            }

            if(!loaded) {
                $el.css({ 'position': 'absolute' });
                $el.css({ 'left': left_position, 'top': top_position });
                $el.center(true);

                var resizeEvent = eventNameSpace ? 'resize.' + eventNameSpace : 'resize';
                var scrollEvent = eventNameSpace ? 'scroll.' + eventNameSpace : 'scroll';

                if (eventNameSpace) {
                    $(window).off(resizeEvent);
                    $(window).off(scrollEvent);
                }

                $(window).on(resizeEvent, function() {
                    $el.center(true);
                });

                $(window).on(scrollEvent, function() {
                    $el.center(true);
                });

            } else {
                if (!stopCentering) {
                    $el.stop();
                    $el.css({'position': 'absolute'});
                    $el.animate({'left': left_position, 'top': top_position}, 200, 'linear');
                }
            }
        });
    }
};

},{}],42:[function(require,module,exports){
'use strict';

var dialog = require('./dialog'),
    page = require('./page'),
    validator = require('./validator'),
    floatLabel = require('./float-labels');

var login = {
    /**
     * @private
     * @function
     * @description init events for the loginPage
     */
    init: function () {
        //o-auth binding for which icon is clicked
        $('.oAuthIcon').off('click').on('click', function (e) {
            $('.OAuthProvider').val(this.id);
        });
    

        //toggle the value of the rememberme checkbox
        $('#dwfrm_login_rememberme').bind('change', function () {
            if ($('#dwfrm_login_rememberme').attr('checked')) {
                $('#rememberme').val('true');
            } else {
                $('#rememberme').val('false');
            }
        });
        
        $('#password-reset').on('click', function (e) {
            e.preventDefault();

            dialog.open({
                url: $(e.target).attr('href'),
                options: {
                    open: function () {
                        validator.init();
                        var $requestPasswordForm = $('[name$="_requestpassword"]');
                        var $submit = $requestPasswordForm.find('[name$="_requestpassword_send"]');

                        $($submit).on('click', function (e) {
                            if (!$requestPasswordForm.valid()) {
                                return;
                            }
                            e.preventDefault();
                            var data = $requestPasswordForm.serialize();
                            // add form action to data
                            data += '&' + $submit.attr('name') + '=';
                            // make sure the server knows this is an ajax request
                            if (data.indexOf('ajax') === -1) {
                                data += '&format=ajax';
                            }
                            $.ajax({
                                type: 'POST',
                                url: $requestPasswordForm.attr('action'),
                                data: data,
                                success: function (response) {
                                    if (typeof response === 'object' &&
                                            !response.success &&
                                            response.error === 'CSRF Token Mismatch') {
                                        page.redirect(Urls.csrffailed);
                                    } else if (typeof response === 'string') {
                                        dialog.$container.html(response);
                                        $('.close-button').on('click', function () {
                                            dialog.close();
                                        });
                                    }
                                },
                                failure: function () {
                                    dialog.$container.html('<h1>' + Resources.SERVER_ERROR + '</h1>');
                                }
                            });
                        });
                    }
                }
            });
        });
        
        var $twitterError = $('.twitter-oauth-error').detach();
        $('.social-login').after($twitterError);
        $twitterError.show();
    }
};

module.exports = login;

},{"./dialog":34,"./float-labels":36,"./page":44,"./validator":83}],43:[function(require,module,exports){
'use strict';

var util = require('./util'),
    bonusProductsView = require('./bonus-products-view');

var miniCartDelay = 5000;

var timer = {
    id: null,
    clear: function () {
        if (this.id) {
            window.clearTimeout(this.id);
            delete this.id;
        }
    },
    start: function (duration, callback) {
        this.id = setTimeout(callback, duration);
    }
};

var minicart = {
    init: function () {
        this.$el = $('#mini-cart');
        this.$content = this.$el.find('.mini-cart-content');
        this.$cartLink = this.$el.find('.mini-cart-link');
        this.$viewBagLink = this.$el.find('.mini-cart-link-cart');

        this.whileScrolling = function() {
            timer.clear();
        }

        this.scrollComplete = function() {
            timer.clear();
            timer.start(miniCartDelay, this.close.bind(this));
        }

        $('.mini-cart-products').mCustomScrollbar({
            callbacks:{
                whileScrolling:this.whileScrolling.bind(this),
                onScroll:this.scrollComplete.bind(this)
            }
        });

        $('.mini-cart-product').eq(0).find('.mini-cart-toggle').addClass('fa-caret-down');
        $('.mini-cart-product').not(':first').addClass('collapsed')
            .find('.mini-cart-toggle').addClass('fa-caret-right');

        $('.mini-cart-toggle').on('click', function () {
            $(this).toggleClass('fa-caret-down fa-caret-right');
            $(this).closest('.mini-cart-product').toggleClass('collapsed');
        });

        this.$cartLink.on('mouseenter touchstart', function () {
            if (this.$content.not(':visible')) {
                this.slide();
            }
        }.bind(this));

        this.$cartLink.on('click', function(e) {
            if ($(this).hasClass('mini-cart-empty')) {
                e.preventDefault();
                location.href = $(this).attr('rel');
            }
        });

        this.$viewBagLink.on('click', function() {
            app.triggerUISCartCheck('cart');
        });

        this.$content.find('.mini-cart-close').on('click', function(e) {
            this.close();
        }.bind(this));

        this.$content.on('mouseover', function () {
            timer.clear();
        }.bind(this));

        this.$content.on('mouseleave', function() {
            timer.clear();
            timer.start(miniCartDelay, this.close.bind(this));
        }.bind(this));
    },
    /**
     * @function
     * @description Shows the given content in the mini cart
     * @param {String} A HTML string with the content which will be shown
     */
    show: function (html) {
        this.$el.html(html);
        util.scrollBrowser(0);
        this.init();
        this.slide();
        bonusProductsView.loadBonusOption();
    },
    /**
     * @function
     * @description Slides down and show the contents of the mini cart
     */
    slide: function () {
        timer.clear();
        // show the item
        this.$content.slideDown('slow');
        // after a time out automatically close it
        timer.start(miniCartDelay, this.close.bind(this));
    },
    /**
     * @function
     * @description Closes the mini cart with given delay
     * @param {Number} delay The delay in milliseconds
     */
    close: function (delay) {
        timer.clear();
        this.$content.slideUp(delay);
    }
};

module.exports = minicart;

},{"./bonus-products-view":28,"./util":82}],44:[function(require,module,exports){
'use strict';

var util = require('./util');

var page = {
    title: '',
    type: '',
    params: util.getQueryStringParams(window.location.search.substr(1)),
    redirect: function (newURL) {
        setTimeout(function () {
            window.location.href = newURL;
        }, 0);
    },
    refresh: function () {
        setTimeout(function () {
            window.location.assign(window.location.href);
        }, 500);
    }
};

module.exports = page;

},{"./util":82}],45:[function(require,module,exports){
'use strict';

var giftcert = require('../giftcert'),
    tooltip = require('../tooltip'),
    util = require('../util'),
    dialog = require('../dialog'),
    page = require('../page'),
    login = require('../login'),
    validator = require('../validator'),
    floatlabels = require('../float-labels'),
    TPromise = require('promise'),
    _ = require('lodash');

/**
 * @function
 * @description Initializes the events on the address form (apply, cancel, delete)
 * @param {Element} form The form which will be initialized
 */
function initializeAddressForm(validate) {
    var $form = $('#edit-address-form');
    var validate = (typeof validate === 'boolean') ? validate : false;

    $form.find('input[name="format"]').remove();
    tooltip.init();

    var $img = $('.tooltip-image-normal');
	var $hoverImg = $('.tooltip-image-hover');
    $form.find('.form-field-tooltip').each(function () {
    	var $tooltip = $(this).find('.tooltip');
    	if(!$tooltip.find('.tooltip-image').length){
	    	var $children = $tooltip.children().detach();
	    	$tooltip.empty();
	    	$tooltip.append($img);
	    	$tooltip.append($hoverImg);
	    	$tooltip.append($children);
    	}
    	$tooltip.on('click', function (e) {
        	e.preventDefault();
        });
    });

    //$("<input/>").attr({type:"hidden", name:"format", value:"ajax"}).appendTo(form);

    $form.on('click', '.apply-button', function (e) {
        e.preventDefault();
        if (!$form.valid()) {
            return false;
        }
        var url = util.appendParamToURL($form.attr('action'), 'format', 'ajax');
        var applyName = $form.find('.apply-button').attr('name');
        var options = {
            url: url,
            data: $form.serialize() + '&' + $(this).attr('name') + '=x',
            type: 'POST',
            dateType: "html"
        };

        $.ajax(options).done(function (data) {
            if (data == "success") {
                dialog.close();
                page.refresh();
            } else {
            	$('#dialog-container').html(data);
            	initializeAddressForm(true);
            }
        });

    })
    .on('click', '.cancel-button, .close-button', function (e) {
        e.preventDefault();
        dialog.close();
    })
    .on('click', '.delete-button', function (e) {
        e.preventDefault();
        if (window.confirm(String.format(Resources.CONFIRM_DELETE, Resources.TITLE_ADDRESS))) {
            var url = util.appendParamsToUrl(Urls.deleteAddress, {
                AddressID: $form.find('#addressid').val(),
                format: 'ajax'
            });
            $.ajax({
                url: url,
                method: 'POST',
                dataType: 'json'
            }).done(function (data) {
                if (data.status.toLowerCase() === 'ok') {
                    dialog.close();
                    page.refresh();
                } else if (data.message.length > 0) {
                    window.alert(data.message);
                    return false;
                } else {
                    dialog.close();
                    page.refresh();
                }
            });
        }
    })
    .on('change', '.input-text.phone', validator.formatter.phone);
    $('.input-text.phone').trigger('change');

    var $stateEmptyOptionEl = $form.find('.state-field-container select option:first-child');
    var stateEmptyOptionHtml = $('<div>').append($stateEmptyOptionEl.clone())
        .html();
    $form.on('change', 'select.country', function() {
        util.changeStateField($(this).val(), $form, stateEmptyOptionHtml);
    });
    $form.find('select.country').trigger('change');

    validator.init();
    floatlabels.init();
    util.initZipService($form);

    $('.ui-dialog-titlebar-close').blur();

    if (validate) {
    	$form.valid();
    }
}
/**
 * @private
 * @function
 * @description Toggles the list of Orders
 */
function toggleFullOrder () {
    $('.order-items')
        .find('li.hidden:first')
        .prev('li')
        .append('<a class="toggle">View All</a>')
        .children('.toggle')
        .click(function () {
            $(this).parent().siblings('li.hidden').show();
            $(this).remove();
        });
}
/**
 * @private
 * @function
 * @description Binds the events on the address form (edit, create, delete)
 */
function initAddressEvents() {
    var addresses = $('#addresses');
    if (addresses.length === 0) {
    	return;
    }

    addresses.on('click', '.address-edit, .address-create', function (e) {
    	var $form = $('#edit-address-form');
    	$form.find("input, textarea, select").val("");
        e.preventDefault();
        var width = (window.innerWidth < 708) ? (window.innerWidth - 40).toString() : '668';
        dialog.open({
            url: this.getAttribute('popup-href'),
            options: {
            	'width': width,
                open: initializeAddressForm,
                dialogClass: "addressbook-modal"
            }
        });

    }).on('click', '.delete', function (e) {
        e.preventDefault();
        if (window.confirm(String.format(Resources.CONFIRM_DELETE, Resources.TITLE_ADDRESS))) {
            $.ajax({
                url: util.appendParamToURL($(this).attr('href'), 'format', 'ajax'),
                dataType: 'json'
            }).done(function (data) {
                if (data.status.toLowerCase() === 'ok') {
                    page.redirect(Urls.addressesList);
                } else if (data.message.length > 0) {
                    window.alert(data.message);
                } else {
                    page.refresh();
                }
            });
        }
    });
}
/**
 * @private
 * @function
 * @description Binds the events of the payment methods list (delete card)
 */
function initPaymentEvents() {
    $('.add-card').on('click', function (e) {
        e.preventDefault();
        var width = 668;
        if(window.innerWidth < 768){
        	width = window.innerWidth - 57;
        }
        dialog.open({
            url: $(e.target).attr('href'),
            options: {
                open: initializePaymentForm,
                close: function(){
                	$('#current-card-type-img').remove();
                	$('#CreditCardForm').find('#dwfrm_paymentinstruments_creditcards_newcreditcard_expirationdate').parent().find('div.error').remove();
                },
                dialogClass: "paymentinstruments-modal",
                'width': width
            }
        });
    });

    var paymentList = $('.payment-list');
    if (paymentList.length === 0) { return; }

    util.setDeleteConfirmation(paymentList, String.format(Resources.CONFIRM_DELETE, Resources.TITLE_CREDITCARD));

    $('form[name="payment-remove"]').on('submit', function (e) {
        e.preventDefault();
        // override form submission in order to prevent refresh issues
        var button = $(this).find('.delete');
        $('<input/>').attr({
            type: 'hidden',
            name: button.attr('name'),
            value: button.attr('value') || 'delete card'
        }).appendTo($(this));
        var data = $(this).serialize();
        $.ajax({
            type: 'POST',
            url: $(this).attr('action'),
            data: data
        })
        .done(function () {
            page.redirect(Urls.paymentsList);
        });
    });
}
//function RemovePaymentImg() {}
function initializePaymentForm() {
	var $form = $('#CreditCardForm');
	var $expdate = $('#dwfrm_paymentinstruments_creditcards_newcreditcard_expirationdate');
	var $hiddenmonth = $('#dwfrm_paymentinstruments_creditcards_newcreditcard_month');
	var $hiddenyear = $('#dwfrm_paymentinstruments_creditcards_newcreditcard_year');
	$form.on('click', '#applyBtn', function (e) {
    	e.preventDefault();
    	if (!$form.valid()) {
            return false;
        }
        var ccInput = $form.find('.form-row:nth-child(3) input');
    	ccInput.val(ccInput.val().replace(/\s/g, ''));
        var url = util.appendParamToURL($form.attr('action'), 'format', 'ajax');
        var applyName = $form.find('#applyBtn').attr('name');

        // take data from single expiration field and populate hidden fields for validation and payment instrument creation
        $hiddenmonth.val($expdate.val().split(' / ')[0].replace('0', ''));
        $hiddenyear.val('20' + $expdate.val().split(' / ')[1]);

        var options = {
            url: url,
            data: $form.serialize() + '&' + $(this).attr('name') + '=x',
            type: 'POST',
            dateType: "html"
        };

        $.ajax(options).done(function (data) {
            if (data == "success") {
                dialog.close();
                page.refresh();
            } else {
            	//page.redirect(Urls.csrffailed);
            	if (data.error == "CREDITCARD_INVALID_EXPIRATION_DATE") {
            		showFormError($('.form-row:nth-child(6)'));
            		showFormError($('.form-row:nth-child(7)'));
            	}
            	if (data.error == "CREDITCARD_INVALID_CARD_NUMBER") {
            		showFormError($('.form-row:nth-child(3)'));
            	}
            }
        });
    }).on('click', '.cancel-button', function (e) {
        e.preventDefault();
        dialog.close();
    });


	$('.form-row input').blur(function(){
		$(this).valid();
	});

    function selectHiddenCreditCardYear($selectFieldYear, year) {
    	if(year > 2026) {
    		$selectFieldYear.val(2014);
    	}
    	else {
    		$selectFieldYear.val(year);
    	}
    }

    function selectHiddenCreditCardMonth($selectFieldMonth, month) {
    	if(month > 12) {
    		$selectFieldMonth.val(1);
    	}
    	else {
    		$selectFieldMonth.val(month);
    	}
    }

    function getMonth($textBoxExpirationDate) {
    	var month = 1;

    	if($textBoxExpirationDate && $textBoxExpirationDate.val().length > 1) {
    		month = parseInt($textBoxExpirationDate.val().substring(0, 2));
    	}

    	return month;
    }

    function getYear($textBoxExpirationDate) {
    	var year = 2014;

    	if($textBoxExpirationDate && $textBoxExpirationDate.val().length == 7)
    		year = parseInt("20" + $textBoxExpirationDate.val().substring(5, 7));

    	return year;
    }

    function selectHiddenCreditCardOption ($selectField, creditCardType) {
    	$selectField.val(creditCardType);
    }

    function getCreditCardType(creditCardNumber) {
    	// Default credit card type to Visa.
    	var creditCardType = "";

    	// Ensure credit card number has a minimum of three digits.
    	// Default to Visa again just in case it was never set.
    	if(creditCardNumber.length > 3) {

    		if (/^(5[1-5]|2[2-7][0-9])/.test(creditCardNumber))
    			creditCardType = "Master";
    		else if (/^4/.test(creditCardNumber))
    			creditCardType = "Visa";
    		else if (/^3[47]/.test(creditCardNumber))
    			creditCardType = "Amex";
    		else if (/^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)/.test(creditCardNumber))
    			creditCardType = "Discover";
    		else
    			creditCardType = "Visa"
    	} else {
    		creditCardType = "";
    	}

    	// Return the credit card type.
    	return creditCardType;
    }

    function getCreditCardNumber($textBox) {
    	return $textBox.val();
    }

    function allowOnlyIntegersOn($textBox) {
    	$textBox.keydown(function (e) {
    		// Return true if key stroke is a number.
    		// Otherwise, return false.
            var isNumber = (e.shiftKey || (e.keyCode >= 48 && e.keyCode <=57) || (e.keyCode >= 96 && e.keyCode <=105));

    		// Return true if key stroke is a backspace, delete, tab, escape, and/or enter
    		// Otherwise, return false.
    		var allowedKey1 = $.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1;

    		// Return true if key stroke is Ctrl+A or Command+A
    		// Otherwise, return false.
    		var allowedKey2 = (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true));

    		// Return true if key stroke is home, end, left, right, down, or up.
    		// Otherwise, return false.
    		var allowedKey3 = (e.keyCode >= 35 && e.keyCode <= 40);

            // Do not do anything if the current key stroke is one of the
    		// allowed keys.
            if (allowedKey1 || allowedKey2 || allowedKey3)
    			return;

    		// Do not allow key press if the user input is not a number.
            if (!isNumber)
    			e.preventDefault();
        });
    }

    // credit card form type auto-detect and expiration date format
    var creditCardNumber = "";
	var $textBox = $(".form-row:nth-child(3) .input-text");
	var $selectField = $('#dwfrm_paymentinstruments_creditcards_newcreditcard_type');
	var $textBoxExpirationDate = $("#dwfrm_paymentinstruments_creditcards_newcreditcard_expirationdate");
	var $selectFieldMonth = $("#dwfrm_paymentinstruments_creditcards_newcreditcard_month");
	var $selectFieldYear = $("#dwfrm_paymentinstruments_creditcards_newcreditcard_year");

	// Only allow integers on the credit card number
	// text box field.
	allowOnlyIntegersOn($textBox);

	var $currentCardType = $('#current-card-type').detach();
	$('.form-row:nth-child(3)').append($currentCardType);
	$currentCardType.append("<img id='current-card-type-img'/>");
	var $cardImg = $('#current-card-type-img');

	// Key Up Event for the Credit Card Number Text Box Field
	$textBox.on('keyup blur', function (e) {
		var creditCardNumber = getCreditCardNumber($textBox);
		var creditCardType = getCreditCardType(creditCardNumber);
		selectHiddenCreditCardOption($selectField, creditCardType);

		var selectedTypeURL = $cardImg.attr("src");
		var selectedTypeAlt = $cardImg.attr("alt");

		if(creditCardType == "Visa"){
			selectedTypeURL = visaURL;
			selectedTypeAlt = creditCardType;
		}else if(creditCardType == "Master"){
			selectedTypeURL = mastercardURL;
			selectedTypeAlt = "MasterCard";
		}else if(creditCardType == "Amex"){
			selectedTypeURL = americanexpressURL;
			selectedTypeAlt = "American Express";
		}else if(creditCardType == "Discover"){
			selectedTypeURL = discoverURL;
			selectedTypeAlt = "Discover";
		}
		if($(this).val() && creditCardType != '') {
			$cardImg.attr("src", selectedTypeURL, "alt", selectedTypeAlt);
		} else {
			$cardImg.attr("src", '', "alt", '');
		}
	});

	$textBox.mask("0000  0000  0000  0000", { watchInputs: true });


	// Only allow integers on the credit card number
	// text box field.
	allowOnlyIntegersOn($textBoxExpirationDate);


	// Key Up Event for the Credit Card's Expiration Date
	$textBoxExpirationDate.on('keyup blur', function (e) {
            // Get year from input field
        var yearData =  $textBoxExpirationDate.val().substr(4, 3);
            // Get Month from input field
        var monthData = $textBoxExpirationDate.val().substr(0, 2);
            // Get current year
        var currentYear =  new Date().getFullYear();
            // Get current month
        var currentMonth = new Date().getMonth();
            // Get allowed year range
        var allowYear = currentYear + 9;
            // Create year
        yearData = '20'+parseInt(yearData);
            // Assign selected month and year to hidden month/year fields
        selectHiddenCreditCardMonth($selectFieldMonth, monthData);
        selectHiddenCreditCardYear($selectFieldYear, yearData);

            // Make sure user has entered in date
        if (yearData.length == 4 && parseInt(monthData) > 0 && parseInt(monthData) < 13) {
                // Make sure credit card date isn't expired

        	if ( (yearData == currentYear && monthData >= currentMonth) || (yearData <= allowYear && yearData > currentYear) ) {
                $textBoxExpirationDate.addClass('valid').next('.error').text('');
            } else {
                $textBoxExpirationDate.removeClass('valid').next('.error').removeClass('valid').text(Resources.INVALID_EXPIRATION);
            }
        } else {
            $textBoxExpirationDate.removeClass('valid').next('.error').removeClass('valid').text(Resources.MISSING_EXPIRATION);
        }

	});

	// Mask the Credit Card's Expiration Date
	$textBoxExpirationDate.mask("00 / 00", { watchInputs: true });

	$('.form-row:has(select)').hide();

	floatlabels.init();
	validator.init();
}

function preferredStoreTemplate(store) {
    var newLine = '\n';

    return [
        '<li>',
        '    <div class="store">',
        '        <div class="store-information">',
        '            <div class="store-name">' + store.name + '</div>',
        '            <div class="store-address">',
        '                <div>' + store.address1 + '</div>',
        '                <div>' + store.city + ((store.stateCode) ? ', ' + store.stateCode : ''),
        '                     ' + store.postalCode,
        '                </div>',
        '                <div>' + store.countryCode + '</div>',
                         ((store.phone) ? '<div class="store-phone">' + store.phone + '</div>' : ''),
        '            </div>',
        '        </div>',
        '    </div>',
        '</li>'
    ].join(newLine);
}

function storeTemplate(store, preferredStoreID) {
    var newLine = '\n';

    // Remove all HTML after two <br> elements from store hours
    var storeHoursOnly = store.storeHours.split(/<br\s*\/*>\s*<br\s*\/*>/)[0];

    var storeHoursParts = storeHoursOnly.split(/<br\s*\/*>/);
    var storeHoursStacked = storeHoursParts.join('<br/>');
    var storeHoursLong = storeHoursParts.join(', \u00A0');

    return [
        '<li class="store-tile store-tile-id-' + store.storeId + (store.storeId === preferredStoreID ? ' selected' : '') + '"' +
            ' data-store-id="' + store.storeId + '">',
            ((store.storeId === preferredStoreID) ? '<span class="preferred-shop-msg">' + 'your preferred shop' + '</span>' : ''),
        '    <button class="select-store-radio" data-store-id="' + store.storeId + '"' +'>',
        '    </button>',
        '    <div class="store-primary-info">',
        '        <p class="store-name">',
        '            ' + store.name + '<br/>',
        '        </p>',
        '        <p class="store-address">',
        '            ' + store.address1 + '<br/>',
        '            ' + store.city + ', ' + store.stateCode + ' ' + store.postalCode,
        '        </p>',
        '    </div>',
        '    <div class="store-secondary-info">',
        '        <p class="store-hours-stacked">' + storeHoursStacked + '</p>',
        '        <p class="store-hours-long">' + storeHoursLong + '</p>',
        '    </div>',
        '    <a class="store-map-toggle">' + 'MAP' + '</a>',
        '    <div class="store-map-container">',
        '       <div class="store-map"></div>',
        '    </div>',
        '</li>'
    ].join(newLine);
}

function validateZipCode(zipCode) {
    var regexes = {
            canada: /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJKLMNPRSTVWXYZ]( )?\d[ABCEGHJKLMNPRSTVWXYZ]\d$/i,
            usa: /^\d{5}(-\d{4})?$/
        };
    var valid = false;
    if (!zipCode) { return false; }

    _.each(regexes, function(re) {
        var regexp = new RegExp(re);
        valid = regexp.test(zipCode);
    });

    return valid;
}

var nearestStore = {
    DISPLAY_STORES_COUNT: 3,
    $cache: {},

    init: function() {
        var $container = $('#search-stores-container');
        this.$cache = {
            container: $container,
            storeList: $container.find('.store-list'),
            storeCounter: $container.find('.store-counter'),
            zipInput: $container.find('.zip-input'),
            distanceInput: $container.find('.distance-input'),
            distanceLabel: $container.find('.distance-input-label'),
            preferredStores: $('.js-preferred-store-list')
        };

        this.initEvents();
        this.updateDistanceLabel();
    },

    openDialog: function() {
        var self = this;

        TPromise.resolve(
            $.ajax({
                url: Urls.accountSearchStores,
                dataType : 'json'
            })
        ).then(function(response) {
            self.updateDialog(response);
            var dialogWidth = (window.innerWidth < 708) ? (window.innerWidth).toString() : '668';

            dialog.open({
                target: $('#search-stores-container'),
                options: {
                    buttons: [{
                        text: Resources.UPDATE_MY_STORE,
                        click: function () {
                            self.setStore();
                        }
                    }],
                    dialogClass: 'account-search-stores-dialog',
                    width: dialogWidth
                }
            });
        });
    },

    updateDialog: function (data) {
        var self = this;

        // Update store list
        var stores = data.kateStores.slice(0, this.DISPLAY_STORES_COUNT);
        var storeListHTML = _.map(stores, function(store) {
            return storeTemplate(store, data.preferredStoreID);
        });
        this.$cache.storeList.empty()
            .html(storeListHTML);

        // Bind full stores data to DOM elements
        _.each(stores, function(store) {
            self.$cache.storeList.find('.store-tile-id-' + store.storeId)
                .data('sourceObj', store);
        });


        // Update stores counter
        var storeCount = stores.length;
        this.$cache.storeCounter.text(storeCount);

        // Update zip code value if needed
        if (data.defaultZip) {
            this.$cache.zipInput.val(data.defaultZip);
        }
    },

    initEvents: function() {
        var self = this;
        var $container = this.$cache.container;

        $('.js-account-setup-preferred-store').on('click', function() {
            self.openDialog();
        });

        $container.on('click', '.select-store-radio', function(e) {
            e.preventDefault();

            var $storeTile = $(this).closest('.store-tile');
            if (!$storeTile.hasClass('selected')) {
                self.$cache.storeList.find('.store-tile.selected').removeClass('selected');
                $storeTile.addClass('selected');
            }
        });

        $container.on('click', '.store-map-toggle', function(e) {
            e.preventDefault();

            var $this = $(this);
            var $storeTile = $this.closest('.store-tile');
            var $mapContainer = $storeTile.find('.store-map');

            $mapContainer.toggle();
            $this.toggleClass('visible');
            $storeTile.find('.store-map-container')
                .toggleClass('visible');

            if ($mapContainer.children().length === 0) {
                var map = new google.maps.Map($mapContainer[0], {
                    zoom: 8
                });

                var geocoder = new google.maps.Geocoder();
                var address = $storeTile.find('.store-address')[0].innerText;
                geocoder.geocode({'address': address}, function(results, status) {
                    if (status === 'OK') {
                        map.setCenter(results[0].geometry.location);
                        var marker = new google.maps.Marker({
                            map: map,
                            position: results[0].geometry.location
                        });
                    } else {
                        console.error('Geocode was not successful for the following reason: ' + status);
                    }
                });
            }
        });

        $container.on('submit', '#showStoresForm', function(e) {
            e.preventDefault();
            self.updateStores();
        });

        this.$cache.distanceInput.on('change', function() {
            self.updateDistanceLabel();
            self.updateStores();
        });
    },

    updateStores: function() {
        var self = this;

        var zipCode = this.$cache.zipInput.val();
        var maxDistance = this.$cache.distanceInput.val();
        if (!validateZipCode(zipCode)) {
            return;
        }

        var url = util.appendParamsToUrl(Urls.accountSearchStores, {
            zip: zipCode,
            distance: maxDistance
        });

        TPromise.resolve($.ajax({
            dataType: 'json',
            url: url
        })).then(function(response) {
            self.updateDialog(response);
        });
    },

    updateDistanceLabel: function() {
        var value = this.$cache.distanceInput.find('option:selected').attr('value');
        this.$cache.distanceLabel.text('Radius: ' + value + ' miles');
    },

    setStore: function() {
        var self = this;

        var $selectedStore = this.$cache.storeList.find('.store-tile.selected');
        if ($selectedStore.length) {
            var storeId = $selectedStore.data('store-id');
            var url = util.appendParamsToUrl(Urls.setNearestStore, {
                storeId: storeId
            });

            TPromise.resolve(
                $.ajax({
                    url: url,
                    dataType : 'json'
                })
            ).then(function(response) {
                if (response.success) {
                    self.updatePreferredStore($selectedStore.data('sourceObj'));
                    $('.unselected-nearest-store-header').html(Resources.NEAREST_STORE_SELECTED_HEADER).removeClass('unselected-nearest-store-header');
                    $('.unselected-nearest-store-button').html(Resources.NEAREST_STORE_EDIT).removeClass('unselected-nearest-store-button');
                    dialog.close();
                }
            })
        }
    },

    updatePreferredStore: function(store) {
        var storeHtml = preferredStoreTemplate(store);
        this.$cache.preferredStores.html(storeHtml);
    }
};

function initPersonalEvents() {
	$('#account-personaldata .edit-link').on("click", function(e){
		e.preventDefault();
		dialog.open({
			url: this.getAttribute('popup-href'),
			callback: function() {
				initializeInfoForm();
				initializePasswordForm();
			},
			options: {
				'width' : window.innerWidth < 768 ? window.innerWidth - 40 : 668,
				'height' : 'auto',
				'dialogClass': "personaldata-modal"
			}
		});
	});
}

//functions for order history
function initOrderHistory(){
	$('.order-details-linkback').click(function(e){
		e.preventDefault();
		window.history.go(-1);
	});
}

//ACCOUNT EDIT INFO - PERSONAL INFO FORM LOADED VIA AJAX
function initializeInfoForm() {
	var form = $("#personalEditInfo");
	var dateFields = ["#dwfrm_profile_customer_birthMonth", "#dwfrm_profile_customer_birthDay", "#dwfrm_profile_customer_birthYear"];

	// Clear form of errors and focus
	app.util.formBlur(form);
	$('#dwfrm_profile_customer_newemail').attr('value', customerEmailAddress);
	$('#dwfrm_profile_customer_newemailconfirm').attr('value', customerEmailAddress);
	floatlabels.init();

	form.validate({
		groups: {
			date: "dwfrm_profile_customer_birthMonth dwfrm_profile_customer_birthDay dwfrm_profile_customer_birthYear"
		},
		rules: {
			"dwfrm_profile_customer_birthMonth": {
				multidate: dateFields
			},
			"dwfrm_profile_customer_birthDay": {
				multidate: dateFields
			},
			"dwfrm_profile_customer_birthYear": {
				multidate: dateFields
			}
		},
		messages: {
			"dwfrm_profile_customer_firstname": {
				required: app.resources.MISSING_FIRST_NAME
			},
			"dwfrm_profile_customer_lastname": {
				required: app.resources.MISSING_LAST_NAME
			},
			"dwfrm_profile_customer_email": {
				required: app.resources.MISSING_EMAIL
			},
			"dwfrm_profile_customer_emailconfirm": {
				required: app.resources.MISSING_EMAILCONFIRM
			},
			"dwfrm_profile_login_password": {
				required: app.resources.MISSING_PASSWORD
			},
			"dwfrm_profile_login_passwordconfirm": {
				required: app.resources.MISSING_PASSWORDCONFIRM
			},
			"dwfrm_profile_customer_zip": {
				required: app.resources.MISSING_POSTAL
			},
			"dwfrm_profile_customer_birthMonth": {
				multidate: app.resources.BIRTHDATE_INVALID
			},
			"dwfrm_profile_customer_birthDay": {
				multidate: app.resources.BIRTHDATE_INVALID
			},
			"dwfrm_profile_customer_birthYear": {
				multidate: app.resources.BIRTHDATE_INVALID
			}
		},
		errorClass : 'error',
		errorElement : 'span',
		ignore: ":hidden:not(.replaced)",
		onkeyup : false,
		onfocusout : function (element) {
			if(!this.checkable(element)) {
				this.element(element);
			}
		},
		highlight : function(element, errorClass, validClass) {
			if (element.type === 'radio') {
				this.findByName(element.name).addClass(errorClass).removeClass(validClass);
			} else {
				$(element).addClass(errorClass).removeClass(validClass);
				if(element.type === 'select-one'){
					var $element = $(element);
					if($element.attr('id') && $element.hasClass('replaced')){
						var selectBox = $('#' + $element.attr('id') + 'SelectBoxItContainer');
						if(selectBox){
							selectBox.addClass(errorClass).removeClass(validClass);
						}
					}
				}
			}
			if ($(element).attr('id') === "dwfrm_profile_customer_birthMonth"
					|| $(element).attr('id') === "dwfrm_profile_customer_birthDay"
					|| $(element).attr('id') === "dwfrm_profile_customer_birthYear") {
				$(dateFields[0]).removeClass(errorClass);
				$(dateFields[1]).removeClass(errorClass);
				$(dateFields[2]).removeClass(errorClass);
				$("#errors").empty();
			}
		},
		unhighlight : function(element, errorClass, validClass) {
			if (element.type === 'radio') {
				this.findByName(element.name).removeClass(errorClass).addClass(validClass);
			} else {
				$(element).removeClass(errorClass).addClass(validClass);
				if(element.type === 'select-one'){
					var $element = $(element);
					if($element.attr('id') && $element.hasClass('replaced')){
						var selectBox = $('#' + $element.attr('id') + 'SelectBoxItContainer');
						if(selectBox){
							selectBox.removeClass(errorClass).addClass(validClass);
						}
					}
				}
			}
			if ($(element).attr('id') === "dwfrm_profile_customer_birthMonth"
					|| $(element).attr('id') === "dwfrm_profile_customer_birthDay"
					|| $(element).attr('id') === "dwfrm_profile_customer_birthYear") {
				$(dateFields[0]).removeClass(errorClass);
				$(dateFields[1]).removeClass(errorClass);
				$(dateFields[2]).removeClass(errorClass);
				$("#errors").empty();
			}
		},
		showErrors: function (errorMap, errorList) {
			this.defaultShowErrors();

			var birthdateError = "";
			if (errorMap.hasOwnProperty("dwfrm_profile_customer_birthMonth")) {
				birthdateError = errorMap["dwfrm_profile_customer_birthMonth"];
			} else if (errorMap.hasOwnProperty("dwfrm_profile_customer_birthDay")) {
				birthdateError = errorMap["dwfrm_profile_customer_birthDay"];
			} else if (errorMap.hasOwnProperty("dwfrm_profile_customer_birthYear")) {
				birthdateError = errorMap["dwfrm_profile_customer_birthYear"];
			}

			if (birthdateError != "") {
				$("#errors").html('<span class="error" generated="true" for="date">' + birthdateError + '</span>');
				$(dateFields[0]).addClass("error");
				$(dateFields[1]).addClass("error");
				$(dateFields[2]).addClass("error");
			}
		}
	});

	validator.initForm(form);

	form.on("click", ".apply-button", function(e) {
		// Stop the form from submitting (which causes the pipeline to redirect elsewhere)
		e.preventDefault();

		if($('#dwfrm_profile_customer_newemail').val() != "" && $('#dwfrm_profile_customer_newemailconfirm').val() == ""){
			$('#dwfrm_profile_customer_newemailconfirm').val(customerEmailAddress);
			$('#dwfrm_profile_login_currentpassword__newemail').val($('#dwfrm_profile_login_currentpassword__newpassword').val());
		}

		if (!(($(dateFields[0]).val() == "" && $(dateFields[1]).val() == "" && $(dateFields[2]).val() == "") ||
				($(dateFields[0]).val() != "" && $(dateFields[1]).val() != "" && $(dateFields[2]).val() != ""))) {
			// User has put in only a partial birthdate and we should error
			$("#errors").html('<span class="error" generated="true" for="date">' + app.resources.BIRTHDATE_INVALID + '</span>');
			$(dateFields[0]).addClass("error");
			$(dateFields[1]).addClass("error");
			$(dateFields[2]).addClass("error");
			return false;
		}

		validator.initForm(form);
		if (!form.valid()) {
			return;
		}
		app.util.formsubmit(form, jQuery(this), "html", function(response) {
			// success
			if($.trim(response.toString()) == 'success') page.refresh();
			// Failure
			else {
				$('#personaldata-edit-info').empty().html(response);
				initializeInfoForm();
			}
		});
	});
};

//ACCOUNT EDIT INFO - PERSONAL INFO FORM LOADED VIA AJAX
function initializePasswordForm() {
	var form = $("#personalEditPassword");
	// Clear form of errors and focus
	app.util.formBlur(form);
	floatlabels.init();

	validator.initForm("#personalEditPassword", {
        rules: {
            "dwfrm_profile_login_newpassword": {
            	rangelength: [7, 20]
            },
            "dwfrm_profile_login_newpasswordconfirm": {
            	rangelength: [7, 20],
            	equalTo: "#dwfrm_profile_login_newpassword"
            }
        },
        messages: {
            "dwfrm_profile_login_newpassword": {
                required: Resources.MISSING_PASSWORD,
                rangelength: Resources.VALIDATE_RANGELENGTH,
                equalTo: Resources.VALIDATE_INVALID_PASSMATCH
            }
        },
        errorClass : 'error',
        errorElement : 'span',
        ignore: ":hidden:not(.replaced)",
        onkeyup : false,
        onfocusout : function (element) {
            if(!this.checkable(element)) {
                this.element(element);
            }
        }
    });

	form.on("click", ".apply-button", function(e) {
		// Stop the form from submitting (which causes the pipeline to redirect elsewhere)
		e.preventDefault();
		util.formsubmit(form, jQuery(this), "html", function(response) {
			// success
			if($.trim(response.toString()) == 'success') page.refresh();
			// Failure
			else {
				$('#personaldata-edit-password').empty().html(response);
				initializePasswordForm();
			}
		});
	})
	.on('click', '.cancel-button', function(e){
		e.preventDefault();
		dialog.close();
	});
}

function showFormError($row){
	var $input  = $row.find('input');
	var span = "<span class='error invalid-form-icon'></span>";
	$input.addClass('error');
	$input.after(span);
	$input.blur(function(){
		$row.find('.invalid-form-icon').remove();
	});
}

/**
 * @private
 * @function
 * @description Binds the events of the order, address and payment pages
 */
function initializeEvents() {
    toggleFullOrder();
    initAddressEvents();
    initPaymentEvents();
    initPersonalEvents();
    initOrderHistory();
    login.init();
}

var account = {
    init: function () {
        initializeEvents();
        giftcert.init();
        nearestStore.init();
    },
    initCartLogin: function () {
        login.init();
    }
};

module.exports = account;

},{"../dialog":34,"../float-labels":36,"../giftcert":38,"../login":42,"../page":44,"../tooltip":81,"../util":82,"../validator":83,"lodash":5,"promise":6}],46:[function(require,module,exports){
'use strict';

var account = require('./account'),
    bonusProductsView = require('../bonus-products-view'),
    quickview = require('../quickview'),
    selectBoxIt = require('../selectboxit'),
    cartStoreInventory = require('../storeinventory/cart'),
    util = require('../util'),
    $cache = {},
    SFL_PAGE_SIZE = 5;

/**
 * @private
 * @function
 * @description Binds events to the cart page (edit item's details, bonus item's actions, coupon code entry)
 */
function initializeEvents() {
    $('#cart-table').on('click', '.item-edit-details a', function (e) {
        e.preventDefault();
        var isGC = $(e.target).hasClass('giftCard') ? 'giftCard' : '';
        //Very specific case for making inputs outside of dialog available
        $.widget( "ui.dialog", $.ui.dialog, {
            _allowInteraction: function( event ) {
                return !!$( event.target ).is( "input" ) || this._super( event );
            }
        });
        quickview.show({
            url: e.target.href,
            source: 'cart',
            customClass: 'ui-dialog_update-item ' + isGC,
            callback: function () {
                var price = $('.e-gift-card .product-price').text().trim();
                $('.e-gift-card .swatches li').each(function () {
                   var currentPrice = $(this).find('a').data('combined');
                   if(currentPrice == price) {
                       $('.e-gift-card .swatches li').removeClass('selected');
                       $(this).addClass('selected');
                   }
                });
                $('.e-gift-card').on('click', '.swatches.Color li', function () {
                    $('.product-options-gift-card #gcAmountselect .selected a').trigger('click');
                });
             }
        });
    })
    .on('click', '.bonus-item-actions a, .item-details .bonusproducts a', function (e) {
        e.preventDefault();
        bonusProductsView.show(this.href);
    });

    //render White Glove Block
    var $targetBlock = $('.white-glove-block .tooltip > .tooltip-content');
    var targetContent = $targetBlock.find('.tooltip-content').html();
    $targetBlock.empty();
    $targetBlock.html(targetContent);

    // override enter key for coupon code entry
    $('form input[name$="_couponCode"]').on('keydown', function (e) {
        if (e.which === 13 && $(this).val().length === 0) { return false; }
    });

    //to prevent multiple submissions of the form when removing a product from the cart
    var removeItemEvent = false;
    $('button[name$="deleteProduct"]').on('click', function (e) {
    	var productID = $(this).data('pid');
    	
        if (removeItemEvent) {
            e.preventDefault();
        } else {
            removeItemEvent = true;
        }
        if (dataLayer) {
            var ecommerce = null;
            for (var i = 0; i < dataLayer.length; i++) {
                if ('ecommerce' in dataLayer[i]) {
                    ecommerce = dataLayer[i].ecommerce;
                    break;
                }
            }
            if (ecommerce != undefined && 'checkout' in ecommerce && 'products' in ecommerce.checkout) {
                var p;
                for (var i = 0; i < ecommerce.checkout.products.length; i++) {
                    p = ecommerce.checkout.products[i];
                    if (p.id == productID){

                        dataLayer.push(app.datalayer.getEvent("event","ecomRemove", "ecommerce", " ", "remove", [p]));
                        break;
                    }
                }
            }
        }
    });
    /*Script for unusial position of control button on Shopping Cart page*/
    if ($('.item-edit-details').length && $('.item-user-actions').length) {
        $('.cart-row').each( function (){
            var current = $(this).find('.item-edit-details');
            var place = $(this).find('.item-user-actions');
            var actionbox = $(this).find('.action-box');
            var mobileheader = $(this).find('.mobile-header');
            current.prependTo(place);
            place.clone().prependTo(actionbox);
            $(this).find('.sku').clone().prependTo(mobileheader);
            $(this).find('.name').clone().prependTo(mobileheader);
        });
    }
    /**/
    $('.item-details button').on('click', function (e){
         var xOffset = 24;
         var yOffset = 24;
         var elemnt = $(this);
         $(this).fadeOut('fast');
         var bgTop = 0;
         var frames = 5;
         var frameSize = 32;
         var frameRate = 100;
         for(i=1;i<frames;i++) {
             bgTop -= frameSize;
             var f = function (i) {
                setTimeout(function () {
                        poof.css('background-position','0 -' + i*frameSize + 'px');
                }, i*frameRate);
            }

            f(i);
         }

        setTimeout(function () {
            elemnt.closest('.cart-row').hide();
            elemnt.closest('.cart-row').next('.final-sale-row').hide();
        }, frames * frameRate);
    });

    // Save for later lazy loading
    $cache.sfl = {
        footerEl: $('#footer-wrapper #footer')[0],
        tableEl: $('.js-sfl-table'),
        loaderEl: $('.savedforlater-wrapper .sfl-loader'),
        responseContainer: $('<div>'),
        isRequestPending: false
    };
    

    function loadAllSflItems() {
        var totalQty = Number($cache.sfl.tableEl.attr('data-sfl-total-qty')),
            showItemsQty = Number($cache.sfl.tableEl.attr('data-sfl-show-items-qty')),
            requestUrl = $cache.sfl.tableEl.attr('data-sfl-load-url');

        if (totalQty > showItemsQty) {
            var startIdx = showItemsQty;
            var endIdx = startIdx + SFL_PAGE_SIZE - 1;
            if (endIdx >= totalQty || $('body').width() < 768) {
                endIdx = totalQty - 1;
            }

            $cache.sfl.isRequestPending = true;
            $cache.sfl.loaderEl.addClass('sfl-loader-visible');
            loadSflItems({
                startIdx: startIdx,
                endIdx: endIdx,
                requestUrl: requestUrl,
                showItemsQty: showItemsQty
            });
            $('#sfl-mobile-loader').css('display', 'none');
        }
    }

    $(window).on('scroll.sflLazyLoad', function() {
            var isFooterVisible = $cache.sfl.footerEl && util.elementInViewport($cache.sfl.footerEl);

            if (isFooterVisible && !$cache.sfl.isRequestPending && $cache.sfl.tableEl.length > 0 && $('body').width() > 767) {
                loadAllSflItems();
            }
    });
    $('body').on('click', '#sfl-mobile-loader', function () {
        loadAllSflItems();
    });

    // Fixed cart summary
    $cache.fixedTotals = {
        totalsEl: $('#cart-items-form .cart-footer'),
        header: $('.pt_cart > .top-banner'),
        placeholder: $('#cart-items-form .cart-footer-placeholder'),
        isFixed: false,
        isInitialized: false
    };

    function initCartTotals() {
        if ($cache.fixedTotals.totalsEl.length === 0) return;

        var windowWidth = $(window).width();

        if (windowWidth > 960) {
            makeTotalsStatic();
            calcTotalsPosition();
            removeTotalsEvenListeners();
            addTotalsEvenListeners();
            $cache.fixedTotals.isInitialized = true;
        } else {
            if ($cache.fixedTotals.isInitialized) {
                makeTotalsStatic();
                removeTotalsEvenListeners();
                $cache.fixedTotals.isInitialized = false;
            }
        }
    }

    function makeTotalsStatic() {
        $cache.fixedTotals.isFixed = false;
        $cache.fixedTotals.placeholder.removeClass('cart-footer-placeholder-visible');
        $cache.fixedTotals.totalsEl
            .css({
                left: '',
                top: '',
                width: ''
            })
            .removeClass('cart-totals-fixed');
    }

    function makeTotalsFixed() {
        $cache.fixedTotals.isFixed = true;
        $cache.fixedTotals.placeholder.addClass('cart-footer-placeholder-visible');
        $cache.fixedTotals.totalsEl
            .css({
                width: $cache.fixedTotals.width,
                left: $cache.fixedTotals.offsetLeft,
                top: $cache.fixedTotals.header.height() + 20
            })
            .addClass('cart-totals-fixed');
    }

    function calcTotalsPosition() {
        $cache.fixedTotals.width =  $cache.fixedTotals.totalsEl.width();
        $cache.fixedTotals.height = $cache.fixedTotals.totalsEl.height();
        $cache.fixedTotals.offsetLeft = $cache.fixedTotals.totalsEl.offset().left;
        $cache.fixedTotals.scrollTrigger = $cache.fixedTotals.height + $cache.fixedTotals.totalsEl.offset().top;
        $cache.fixedTotals.placeholder.height($cache.fixedTotals.height)
            .width($cache.fixedTotals.width);
    }

    function addTotalsEvenListeners() {
        $(window).on('scroll.cart.fixedTotals', handleFixedTotals);
    }

    function removeTotalsEvenListeners() {
        $(window).off('scroll.cart.fixedTotals');
    }

    function handleFixedTotals() {
        if ($(window).scrollTop() > $cache.fixedTotals.scrollTrigger) {
            if (!$cache.fixedTotals.isFixed) {
                makeTotalsFixed();
            }
        } else if ($cache.fixedTotals.isFixed) {
            makeTotalsStatic();
        }
    }
    function stickyBlock() {
        if (window.innerWidth > 960) {
            $('.cart-footer').stick_in_parent().on("sticky_kit:bottom", function() {
                $(this).addClass('bottom');
            }).on("sticky_kit:unbottom", function() {
                $(this).removeClass('bottom');
            })
        }
    }
    $(window).load(function(){
        stickyBlock();
    });

    function loadSflItems(options) {
        $.ajax({
            type : 'GET',
            url : options.requestUrl,
            data : {
                sfl_start: options.startIdx,
                sfl_end: options.endIdx
            },
            dataType : 'html',
            success : function(response) {
                $cache.sfl.responseContainer.html(response);
                var responseTableEl = $cache.sfl.responseContainer.find('.js-sfl-table');
                var responseShowItemsQty = Number(responseTableEl.attr('data-sfl-show-items-qty'));

                $cache.sfl.tableEl.attr('data-sfl-show-items-qty', options.showItemsQty + responseShowItemsQty);
                var newSflItems = responseTableEl.children('tbody').children();
                newSflItems
                    .addClass('sfl-item-hidden')
                    .appendTo($cache.sfl.tableEl.children('tbody'));

                $cache.sfl.loaderEl.removeClass('sfl-loader-visible');
                $cache.sfl.isRequestPending = false;

                window.setTimeout(function() {
                    newSflItems.removeClass('sfl-item-hidden');
                }, 0);
            }
        });
    }

    $('.tip').on('mouseenter', function(){
        var $this = $(this);
        if(!$cache.tip) {
            $cache.tip = $('#tooltip');
        }
        var cnt = $($this.data('content'));
        var width = $this.data('width');
        var ctop = $this.offset().top;
        var cleft = $this.offset().left;
        var align = $this.data('align');
        if(!align){
            align = '';
        }

        // Populate tip with content
        $cache.tip.find('.body').html(cnt.html())
        // Adjust width
        if (width) {
            $cache.tip.css('width',width);
        }

        // Adjust position
        if (align.indexOf('right') >= 0) {
            // right align
            if (align.indexOf('innerright') < 0) {
                // for side right, add width of element and 5 pixels for spacing
                cleft = cleft + $this.outerWidth() + 5;
            }
        }
        else {
            // left align
            // subtract width of tip box
            cleft = cleft - $cache.tip.outerWidth();
            if (align.indexOf('innerleft') >= 0) {
                // for inner left, subtract width of element
                cleft = cleft + $this.outerWidth();
            }
            else {
                // default to left outer align
                // for outer left, subtract extra 5 pixels for spacing
                cleft = cleft - 5;
            }
        }
        if (align.indexOf('bottom') >= 0) {
            // bottom align
            if (align.indexOf('innerbottom') < 0) {
                // for outer bottom (aka bottom), add element height and extra 5 pixels for spacing
                ctop = ctop + $this.outerHeight() +5;
            }
        }
        else {
            // for backwards compatiblity, default to 20 pixels up from top of element
            ctop = ctop - 20;
        }

        // Position tip
        $cache.tip.css({'left': cleft, 'top': ctop})
        $cache.tip.stop(clearQueue, jumpToEnd).show();
        var mouseOnTrigger = true;

    }).on('mouseleave', function(){
        tooltipClosing();
        var mouseOnTrigger = false;
    });
    
    if ($('.js-cart-coupon-code').find('.error').length > 0) {
        $('.js-cart-coupon-code').addClass('expanded');

        $('.js-cart-coupon-code input').on('focus.cart.coupon', function() {
            addCouponFieldEvents();
        });
    }

    $('body').on('click', '.js-cart-coupon-toggle', function() {
        $('.js-cart-coupon-code').addClass('expanded');
        addCouponFieldEvents();
    });

    function addCouponFieldEvents() {
        $('body').on('click.cart.coupon', function(e) {
            var $target = $(e.target);
            var isTargetInCouponContainer = $target.closest('.js-cart-coupon-code').length > 0;
            if (!isTargetInCouponContainer) {
                $('.js-cart-coupon-code').removeClass('expanded');
                $('body').off('click.cart.coupon');
                $('.js-cart-coupon-code input').off('focus.cart.coupon');
            }
        });
    }

    /**
     * @listener
     * @description Listens to the select event on the cart product quantity field and updates the cart when triggered
     */
    $('select[name$="_quantity"]').on('change', function () {
        $('button[name$="updateCart"]').trigger('click');
    });
}

exports.init = function () {
    initializeEvents();
    selectBoxIt.selectBoxIt($('.cart-quantity'));
    if (SitePreferences.STORE_PICKUP) {
        cartStoreInventory.init();
    }
    account.initCartLogin();
};

},{"../bonus-products-view":28,"../quickview":69,"../selectboxit":73,"../storeinventory/cart":76,"../util":82,"./account":45}],47:[function(require,module,exports){
'use strict';

var util = require('../../util'),
    validator = require('../../validator'),
    shipping = require('./shipping');
var isCheckingTI = 0;

function checkIfSameAsSavedAddress()
{
	if (isCheckingTI) {
		window.clearTimeout(isCheckingTI);
	}
	
	isCheckingTI = window.setTimeout(doCheckIfSameAsSavedAddress, 500);
}

function doCheckIfSameAsSavedAddress() {
    var $form = $('.shipping-form form.address');
	var $addressList = $('select[name$="_addressList"]', $form);
	
	if ($addressList.length == 0) {
		return false;
	}
	
	var $placeHolderElement = null;
	var hasIdenticalAddress = false;
	
	$('option', $addressList).each(function () {
		var $option = $(this);
		var address = $option.data('address');
		
		if (!address) {
			$placeHolderElement = $option;
		} else if (isIdentical(address, $form)) {
			selectAddress($addressList, $option);
			hasIdenticalAddress = true;
			return false;
		}
	});
	
	if (!hasIdenticalAddress && $placeHolderElement) {
		selectAddress($addressList, $placeHolderElement);
	}
}

function selectAddress($addressList, $option)
{
	$addressList.on('change', supressEvents);
	$option.prop('selected', true);
	$addressList.val($option.attr('value'));
	$addressList.off('change', supressEvents);
}

function supressEvents(event)
{
	event.preventDefault();
	event.stopPropagation();
	
	return false;
}

function isIdentical(address, $form) {
    var identical = true;
    var $field = null;
    for (var field in address) {
        if (field === 'ID' || field === 'UUID' || field === 'key' || field === 'type') {
            continue;
        }
        if (address[field] === null) {
        	address[field] = '';
        }
        var $field = $form.find('[name$="' + field.replace('Code', '') + '"]');
        if ($field.length > 0) {
            identical = identical && $field.val() == address[field];
        }
        if (field === 'postalCode') {
        	$field = $form.find('input.postal');
        	if ($field.length > 0) {
                identical = identical && ($field.val() == address[field] || $field.val() == address['zip']);
        	}
        }
        if (field === 'countryCode') {
        	$field = $form.find('[name$="country"]');
        	if ($field.length > 0) {
                identical = identical && $field.val() == address.countryCode.toUpperCase();
        	}
            $field = $form.find('[name$="state"]');
        	if ($field.length > 0) {
                identical = identical && $field.val() == address.stateCode;
        	}
            $field = $form.find('[name$="zip"]');
        	if ($field.length > 0) {
                identical = identical && ($field.val() == address.postalCode || $field.val() == address.zip);
        	}
        }
        if (field === 'phone') {
        	$field = $('.input-text.phone');
        	if ($field.length > 0) {
            	identical = identical && $field.val() == address.phone;
        	}
        }
        if (!identical) {
        	return false;
        }
    }
    
    return true;
}

function addAddressListener()
{
	var $form = $('.shipping-form form.address');
	var $addressList = $('select[name$="_addressList"]', $form);
	var inputs = [
			$form.find('[name$="country"]'),
			$form.find('[name$="state"]'),
			$form.find('[name$="zip"]'),
			$form.find('input.postal'),
			$form.find('[name$="address1"]'),
			$form.find('[name$="address2"]'),
			$form.find('[name$="city"]'),
			$form.find('[name$="sameshipping"]'),
			$form.find('[name$="firstName"]'),
			$form.find('[name$="lastName"]'),
			$('.input-text.phone')
			];
	for (var i = 0; i < inputs.length; i++) {
		if (inputs[i].length > 0) {
			inputs[i].on('change', checkIfSameAsSavedAddress);
		}
	}
	$form.find('[name$="sameshipping"]').on('change', function () {
		if ($(this).prop('checked')) {
			$addressList.prop('disabled', true).addClass('disabled');
		} else {
			$addressList.prop('disabled', false).removeClass('disabled');
		}
		
	});
	if ($form.find('[name$="sameshipping"]').prop('checked')) {
		$addressList.prop('disabled', true).addClass('disabled');
	} else {
		$addressList.prop('disabled', false).removeClass('disabled');
	}
}

/**
 * @function
 * @description Selects the first address from the list of addresses
 */
exports.init = function () {
    var $form = $('.address');

    // Select address from list
    $('select[name$="_addressList"]', $form).on('change', function () {
        $form.on('change', '.input-text.phone', validator.formatter.phone);

        var selected = $(this).children(':selected').first();
        var selectedAddress = $(selected).data('address');
        var $billingAddressFields = $('#billing-address-fields');
        $(this).addClass('selected');

        if (!selectedAddress) {
        	$billingAddressFields.show();
        	return;
        }
        var $stateEmptyOptionEl = $form.find('.state-field-container select option:first-child');
        var stateEmptyOptionHtml = $('<div>').append($stateEmptyOptionEl.clone())
            .html();
        util.changeStateField(selectedAddress.countryCode, $form, stateEmptyOptionHtml);
        util.fillAddressFields(selectedAddress, $form);
        shipping.updateShippingMethodList();
        util.selectUnfloat();
        if($form.find("select[id$='_state']").val() && $form.find("select[id$='_state']").val().length > 0) {
            $form.find("select[id$='_state']").change();
        }
        $('[name$="shippingAddress_save"], [name$="billing_save"]').removeAttr('disabled');
        $('.input-text.phone').trigger('change');
    });
    
    checkIfSameAsSavedAddress();
    addAddressListener();
};

},{"../../util":82,"../../validator":83,"./shipping":53}],48:[function(require,module,exports){
'use strict';

var ajax = require('../../ajax'),
	dialog = require('../../dialog'),
    formPrepare = require('./formPrepare'),
    giftcard = require('../../giftcard'),
    util = require('../../util'),
    progress = require('../../progress'),
	page = require('../../page'),
    validator = require('../../validator'),
	shipping = require('./shipping');

var $checkoutForm = $('.checkout-billing');
var $avsContainer = $("#avsDiv");

/****************************************************************************************************************/
/*										POPULATE STATE TEXT BOX IF SAME AS SHIPPING							    */
/****************************************************************************************************************/

function populateStateTextBox() {
	if($('#dwfrm_billing_sameshipping').is(':checked')) {
	    populateBillingWithShipping(); 
	}
}

/****************************************************************************************************************/
/*										ON PAGE LOAD ERROR HANDLING FOR CREDIT CARD							    */
/****************************************************************************************************************/

function HandleCreditCardValidationOnPageLoad() {

	// Credit Card Number Elements
	var $creditCardNumberContainer = $('.credit-card-number');
	var $creditCardField = $creditCardNumberContainer.find('input');

	// CVN Elements
	var $cvnContainer = $('.cvn');
	var $cvnField = $cvnContainer.find('input');

	// Expiration Date Elements
	var $expirationDateField = $("#dwfrm_billing_paymentMethods_creditCard_expirationdate");
	var $selectFieldMonth = $("#dwfrm_billing_paymentMethods_creditCard_month");
	var $selectFieldYear = $("#dwfrm_billing_paymentMethods_creditCard_year");
	var month = getMonth($expirationDateField);
	var year = getYear($expirationDateField);

	// Handle Fields: Credit Card and CVN on Page Load
	handleFieldValidationOnPageLoad($creditCardNumberContainer, $creditCardField);
	handleFieldValidationOnPageLoad($cvnContainer, $cvnField);

	// Set Expiration Date
	setExpirationDateOnPageLoad($selectFieldMonth, month, $selectFieldYear, year);

	// Clear Expiration Date if Expired
	clearExpirationDateIfExpired();
} 

function clearExpirationDateIfExpired() {
	if($('.sgx-expiration-date').find('.month').hasClass('error') || $('.sgx-expiration-date').find('.year').hasClass('error')) {
		$('.expiration-date').find('input').val('');
		$('.expiration-date').find('input').blur();
	}
}

function setExpirationDateOnPageLoad($selectFieldMonth, month, $selectFieldYear, year) {
	selectHiddenCreditCardMonth($selectFieldMonth, month);
	selectHiddenCreditCardYear($selectFieldYear, year);
}

function handleFieldValidationOnPageLoad($container, $field, spanErrorId) {
	setFieldEventOnBlur($field, spanErrorId);
	addErrorsOnFieldIfNotValid($container, $field);
}

function addErrorsOnFieldIfNotValid($container, $field) {
	if(containerHasError($container)) {
		addErrorClassToField($field);
		addErrorSpanAfterField($field);
	}
}

function setFieldEventOnBlur($field) {
	$field.blur(function() {
		removeSpanIfValid($field.next('span'));
	});
}

function removeSpanIfValid($span) {
	if(spanIsValid($span)) {
		removeSpan($span);
	}
}

function removeSpan($span) {
	$span.next('span').remove();
}

function spanIsValid($span) {
	return $span.hasClass('valid');
}

function containerHasError($container) {
	return $container.hasClass('error');
}

function addErrorClassToField($field) {
	$field.addClass('error');
}

function addErrorSpanAfterField($field) {
	$("<span></span>").insertAfter($field).addClass('error');
}

/****************************************************************************************************************/
/*										SAME AS SHIPPING CHECKBOX FUNCTIONALITY									*/
/****************************************************************************************************************/

/**
 * @function
 * @description This is the event handler when a user checks or unchecks the same as shipping checkbox. 
 *              When a user checks (enables) this check box - the billing address fields will be populated 
 *              with the shipping address data. 
 *              Otherwise, when the check box is not checked (disabled) the previous address data will be restored. 
 * @param Takes no parameters. 
 */

if ($('#dwfrm_billing_sameshipping:checked').length) {
    $('#billing-address-fields').hide();
}

$('#dwfrm_billing_sameshipping').change(function() {
    // Populate the billing address form with data based on the current state
    // of the same as shipping check box.
    if(this.checked) {

        // Store any input that was entered by the user into hidden fields.
    	// This data will be used to repopulate the billing address fields if a
    	// user unchecks the same as shipping text box.
        saveCurrentBillingAddress();

        // Populate the billing address form with shipping address data.
	    populateBillingWithShipping();
	    $('#billing-address-fields').hide();
    }
    else {
    	populateBillingWithPreviousData();
    	$('#billing-address-fields').show();
    }

    // Always validate the form after the same as shipping check box has been checked.
    formPrepare.validateForm();
    if ($('#my-bag-toggle-button').hasClass('fa-minus')) {
        $('#my-bag-toggle-button').trigger('click');
    }
});

/**
 * @function
 * @description Grabs the hidden fields which contain the previously entered shipping address data from the 
 *              shipping page. This is then used to populate the billing address form address fields since 
 *              the user just checked the same as shipping check box.
 * @param Takes no parameters.
 */
function saveCurrentBillingAddress() {
	
	$('#billing-first-name').val($('#dwfrm_billing_billingAddress_addressFields_firstName').val());
	$('#billing-last-name').val($('#dwfrm_billing_billingAddress_addressFields_lastName').val());
	$('#billing-address1').val($('#dwfrm_billing_billingAddress_addressFields_address1').val());
	$('#billing-address2').val($('#dwfrm_billing_billingAddress_addressFields_address2').val());
	$('#billing-city').val($('#dwfrm_billing_billingAddress_addressFields_city').val());
	$('#billing-zip-code').val($('#dwfrm_billing_billingAddress_addressFields_zip').val());
	$('#billing-state').val($('#dwfrm_billing_billingAddress_addressFields_states_state').val().trim());
	$('#billing-country').val($('#dwfrm_billing_billingAddress_addressFields_country').val());
	$('#billing-phone').val($('#dwfrm_billing_billingAddress_addressFields_phone').val());
	
	setIsSavedBillingState();
} 

/**
 * @function
 * @description Grabs the hidden fields which contain the previously entered shipping address data from the 
 *              shipping page. This is then used to populate the billing address form address fields since 
 *              the user just checked the same as shipping check box.
 * @param Takes no parameters.
 */
function populateBillingWithPreviousData() {
	if (isSavedBillingState()) {
		$('#dwfrm_billing_billingAddress_addressFields_firstName').val($('#billing-first-name').val());
		$('#dwfrm_billing_billingAddress_addressFields_lastName').val($('#billing-last-name').val());
		$('#dwfrm_billing_billingAddress_addressFields_address1').val($('#billing-address1').val());
		$('#dwfrm_billing_billingAddress_addressFields_address2').val($('#billing-address2').val());
		$('#dwfrm_billing_billingAddress_addressFields_city').val($('#billing-city').val());
		$('#dwfrm_billing_billingAddress_addressFields_zip').val($('#billing-zip-code').val());
		$('#dwfrm_billing_billingAddress_addressFields_states_state').val($('#billing-state').val().trim().toUpperCase());
		$('#dwfrm_billing_billingAddress_addressFields_country').val($('#billing-country').val().trim().toUpperCase());
		$('#dwfrm_billing_billingAddress_addressFields_phone').val($('#billing-phone').val());
	}
} 

/**
 * @function 
 * @description Determines whether the hidden billing data cache fields have been updated with data
 * 				besides for empty strings.
 * @param Take no parameters
 */
function isSavedBillingState() {
	return $('#billing-has-saved-data').val().length > 0;
}

/**
 * @function 
 * @description Sets the billing-has-saved-data field to a truthy value if the hidden billing data cache 
 * 				fields contain information other than an empty string. Otherwise it sets the field to a 
 * 				falsey value.
 * @param Take no parameters
 */
function setIsSavedBillingState() {
	var isSavedState = false;
	isSavedState |= $('#billing-first-name').val().length > 0;
	isSavedState |= $('#billing-last-name').val().length > 0;
	isSavedState |= $('#billing-address1').val().length > 0;
	isSavedState |= $('#billing-address2').val().length > 0;
	isSavedState |= $('#billing-city').val().length > 0;
	isSavedState |= $('#billing-zip-code').val().length > 0;
	isSavedState |= $('#billing-state').val().length > 0;
	isSavedState |= $('#billing-country').val().length > 0;
	isSavedState |= $('#billing-phone').val().length > 0;
	
	if (isSavedState) {
		$('#billing-has-saved-data').val('true');
	} else {
		$('#billing-has-saved-data').val('');
	}
}

/**
 * @function
 * @description Grabs the hidden fields which contain the previously entered shipping address data from the 
 *              shipping page. This is then used to populate the billing address form address fields since 
 *              the user just checked the same as shipping check box.
 * @param Takes no parameters.
 */
function populateBillingWithShipping() {
	var zipCodeValue = $('#shipping-zip-code').text();

	if(zipCodeValue !== undefined) {
		$('#dwfrm_billing_billingAddress_addressFields_zip').val(zipCodeValue.trim()).blur();
	}
	$('#dwfrm_billing_billingAddress_addressFields_firstName').val($('#shipping-first-name').text()).blur();
	$('#dwfrm_billing_billingAddress_addressFields_lastName').val($('#shipping-last-name').text()).blur();
	$('#dwfrm_billing_billingAddress_addressFields_address1').val($('#shipping-address1').text()).blur();
	$('#dwfrm_billing_billingAddress_addressFields_address2').val($('#shipping-address2').text()).blur();
	$('#dwfrm_billing_billingAddress_addressFields_city').val($('#shipping-city').text()).blur();
	$('#dwfrm_billing_billingAddress_addressFields_states_state').val($('#shipping-state').text().trim().toUpperCase()).blur();
	$('#dwfrm_billing_billingAddress_addressFields_country').val($('#shipping-country').text().trim().toUpperCase()).blur();
	$('#dwfrm_billing_billingAddress_addressFields_phone').val($('#shipping-phone').text()).blur();
	var shippingEmail = $('#shipping-email').text();
	if (shippingEmail.trim()) {
		$('#dwfrm_billing_billingAddress_email_emailAddress').val(shippingEmail).blur();
	}
} 

/****************************************************************************************************************/
/*										CREDIT CARD METHODS														*/
/****************************************************************************************************************/

/**
 * @function
 * @description Selects the appropriate year based on the user input within the expiration date field
 * @param jQuery Select Field Object for the Expiration Year
 */
function selectHiddenCreditCardYear($selectFieldYear, year) { 
	if(year > 2026) {
		$selectFieldYear.val(2014);
	}
	else {
		$selectFieldYear.val(year);
	}
}

/**
 * @function
 * @description Selects the appropriate month based on the user input within the expiration date field
 * @param jQuery Select Field Object for the Expiration Month
 */
function selectHiddenCreditCardMonth($selectFieldMonth, month) { 
	if(month > 12) {
		$selectFieldMonth.val(1);
	}
	else {
		$selectFieldMonth.val(month);
	}
}

/**
 * @function
 * @description Gets the month from user input
 * @param jQuery Text Box Expiration Date Object
 */
function getMonth($textBoxExpirationDate) {
	if (!$textBoxExpirationDate.length) { return; }

	var month = 1;

	if($textBoxExpirationDate && $textBoxExpirationDate.val().length > 1) {
		month = parseInt($textBoxExpirationDate.val().substring(0, 2));
	}

	return month;
}

/**
 * @function
 * @description Gets the year from user input
 * @param jQuery Text Box Expiration Date Object
 */
function getYear($textBoxExpirationDate) {
    if (!$textBoxExpirationDate.length) { return; }

    var year = 2014;

	if($textBoxExpirationDate && $textBoxExpirationDate.val().length == 7)
		year = parseInt("20" + $textBoxExpirationDate.val().substring(5, 7));

	return year;
}

/**
 * @function
 * @description Selects the credit card type with respect to the credit card parameter being passed in
 * @param jQuery Select Field Object and the Credit Card Type (Visa, Mastercard, AMEX, and/or Discover)
 */
function selectHiddenCreditCardOption ($selectField, creditCardType) {
	$selectField.val(creditCardType);
}

/**
 * @function
 * @description Only allow integers in the credit card number
 * @param jQuery Text Box Object 
 */
function getCreditCardType(creditCardNumber) {
    var creditCardNumber = creditCardNumber.replace(/\s+/g, '');

    // Default credit card type to Visa.
    var creditCardType = '';

    // Ensure credit card number has a minimum of three digits.
    // Default to Visa again just in case it was never set.
    if(creditCardNumber.length > 3) {
        if (/^5[1-5]|^2(?:2(?:2[1-9]|[3-9]\d)|[3-6]\d\d|7(?:[01]\d|20))\d{12}$/.test(creditCardNumber))
            creditCardType = "Master";
        else if (/^4/.test(creditCardNumber))
            creditCardType = "Visa";
        else if (/^3[47]/.test(creditCardNumber))
            creditCardType = "Amex";
        else if (/^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)/.test(creditCardNumber))
            creditCardType = "Discover";
    }

	// Return the credit card type.
	return creditCardType;
}

/**
 * @function
 * @description Returns the credit card number the user has just entered in the credit card field
 * @param jQuery Text Box Object 
 */
function getCreditCardNumber($textBox) {
	return $textBox.val();
}
function setMaskCreditCardNumber($textBox) {
    $textBox.val(function (index, value) {
        return value.replace(/\W/gi, '').replace(/(.{4})/g, '$1 ');
    });
}

/**
 * @function
 * @description Only allows integers for the credit card field
 * @param jQuery Text Box Object 
 */
function allowOnlyIntegersOn($textBox) {
	$textBox.keydown(function (e) {
		// Return true if key stroke is a number.
		// Otherwise, return false.
		var isNumber = (e.shiftKey || (e.keyCode >= 48 && e.keyCode <=57) || (e.keyCode >= 96 && e.keyCode <=105));

		// Return true if key stroke is a backspace, delete, tab, escape, and/or enter
		// Otherwise, return false.
		var allowedKey1 = $.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1;

		// Return true if key stroke is Ctrl+A or Command+A
		// Otherwise, return false.
		var allowedKey2 = (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true));

		// Return true if key stroke is home, end, left, right, down, or up.
		// Otherwise, return false.
		var allowedKey3 = (e.keyCode >= 35 && e.keyCode <= 40);

        // Do not do anything if the current key stroke is one of the
		// allowed keys.
        if (allowedKey1 || allowedKey2 || allowedKey3)
			return;

		// Do not allow key press if the user input is not a number.
        if (!isNumber)
			e.preventDefault();
    });
}

function allowOnlyIntegersCVN($cvn) {
	$cvn.keydown(function (e) {
		var charCode = (e.which) ? e.which : event.keyCode;
		return !(charCode > 31 && (charCode < 48 || charCode > 57));
	});
	$cvn.on('input', function () {
		if ($(this).val().length > 4) {
			$(this).val($(this).val().slice(0,4));
		}
	});
}

/****************************************************************************************************************/

/**
 * @function
 * @description Fills the Credit Card form with the passed data-parameter and clears the former cvn input
 * @param {Object} data The Credit Card data (holder, type, masked number, expiration month/year)
 */
function setCCFields(data) {
    var $creditCard = $('[data-method="CREDIT_CARD"]');
    var $month = $creditCard.find('[name$="_month"]');
    var $year = $creditCard.find('[name$="_year"]');

    $creditCard.find('input[name$="creditCard_owner"]').val(data.holder).trigger('change');
    $creditCard.find('select[name$="_type"]').val(data.type).trigger('change');
    $('.payment-method-image-credit-card').find('.active').removeClass('active');
    $('.payment-method-image-credit-card').find('div').each(function(){
    	if($(this).hasClass(data.type.toLowerCase())){
    		$(this).addClass('active');
    	}
    });
    $creditCard.find('input[name*="_creditCard_number"]').val(data.maskedNumber);
    $("#dwfrm_billing_paymentMethods_creditCard_number").focus();
    $("#dwfrm_billing_paymentMethods_creditCard_number").blur();
    $month.val(data.expirationMonth).trigger('change');
    $year.val(data.expirationYear).trigger('change');
    $('input[name*="_cvn_"], input[name$="_cvn"]', $creditCard).each(function(ind, el) {
    	$(el).val('').trigger('change');
    });

    // Set the expiration checkbox to the value of the select menus for both the
    // month and year fields which are hidden.
    // The hidden select fields are part of the original, SGX architecture.
    // Therefore, this is being implimented as a custimization for the expiration date text box.
    var monthValue = $month.val().length > 1 ? $month.val() : "0" + $month.val();
    var yearValue = $year.val().substr(2, 2);

    // Set the expiration text box to the month and expiration date set within
    // the hidden SGX select fields.
    // Blur this field so it is validated as well.
    $('#dwfrm_billing_paymentMethods_creditCard_expirationdate').val(monthValue + " / " + yearValue).blur();
}

/**
 * @function
 * @description Updates the credit card form with the attributes of a given card
 * @param {String} cardID the credit card ID of a given card
 */
function populateCreditCardForm(cardID) {
    // load card details
    var url = util.appendParamToURL(Urls.billingSelectCC, 'creditCardUUID', cardID);
    ajax.getJson({
        url: url,
        callback: function (data) {
            if (!data) {
                window.alert(Resources.CC_LOAD_ERROR);
                return false;
            }
            setCCFields(data);
        }
    });
}

/**
 * @function
 * @description Changes the payment method form depending on the passed paymentMethodID
 * @param {String} paymentMethodID the ID of the payment method, to which the payment method form should be changed to
 */
function updatePaymentMethod(paymentMethodID) {
    var $paymentMethods = $('.payment-method'),
        $payPal = $('.payment-method-options').find('.PY'),
        $creditCard = $('.payment-method-options').find('.CREDIT_CARD'),
        continueButtonText = $('.checkoutbutton span');

    $paymentMethods.removeClass('payment-method-expanded');

    var $selectedPaymentMethod = $paymentMethods.filter('[data-method="' + paymentMethodID + '"]');
    if ($selectedPaymentMethod.length === 0) {
        $selectedPaymentMethod = $('[data-method="Custom"]');
    }
    $selectedPaymentMethod.addClass('payment-method-expanded');

    // ensure checkbox of payment method is checked
    $('input[name$="_selectedPaymentMethodID"]').removeAttr('checked');
    $('input[value=' + paymentMethodID + ']').prop('checked', 'checked');

    // Add a class of active around the payment method which was just
    // selected by the user.
    // Remove the class of active from the payment method which was not
    // selected by the user.
    switch(paymentMethodID) {
    	case "PY":
    		$payPal.addClass('active');
    		$creditCard.removeClass('active');    		
    		continueButtonText.text(Resources.CONTINUE_PAYPAL);
    		break;
    	default:
    		$creditCard.toggleClass('active');
    		$payPal.removeClass('active');
    		continueButtonText.text(Resources.REVIEW_ORDER);
    		break;
    }

    formPrepare.validateForm();
}

/**
 * @function
 * @description This method's main purpose is to stop the form post if an invalid address has been entered, and pop up the 
 *              AVS Modal. The AVS Modal will allow the user to modify their address. 
 * @param {String} paymentMethodID the ID of the payment method, to which the payment method form should be changed to
 */
function billingLoad() {

	function cError(){
		var countryError = $('select#dwfrm_billing_billingAddress_addressFields_country').hasClass('error');
		return countryError;
	}

	function sError(){
		var stateError = $('select#dwfrm_billing_billingAddress_addressFields_states_state').hasClass('error');
		return stateError;
	}

	function preValidate(){
		var pv = $checkoutForm.validate().form();

		if(cError()){
			$('div#dwfrm_billing_billingAddress_addressFields_countrySelectBoxItContainer').addClass('error');
			$("span[for='dwfrm_billing_billingAddress_addressFields_country']").insertAfter('#dwfrm_billing_billingAddress_addressFields_countrySelectBoxItContainer');

		}

		if(sError()){
			$('div#dwfrm_billing_shippingAddress_addressFields_states_stateSelectBoxItContainer').addClass('error');
			$("span[for='dwfrm_billing_billing_addressFields_states_state']").remove();
		}

		return pv;
	}

	function billingValidate() {

		if(preValidate()){
			var url =  Urls.verifyAddress;
			var data = $checkoutForm.find('fieldset:nth-of-type(2)').serialize();

			$avsContainer.append("<div id=\"newAvsDiv\"></div>");

			var options = {
				width: 600,
				height: 'auto',
				title:''
			};

			ajax.load({
				url: url,
				data: data,
				type:"POST",
				callback: function (resp) {
					app.progress.hide($(this));
					if($.trim(resp) != "{}") {
						$("#avsDiv").html($("#newAvsDiv").html());
				        dialog.open({
				            url: url,
				            target: $("#newAvsDiv"),
				            options: options
				        });
					} else {
						$('#verifyBtn').click();
					}
				}
			});
		}
		else{
			app.progress.hide($(this));
		}

	}

	// Execute on form submission.
	$('#dwfrm_billing').on("submit",function(e) {
		//e.preventDefault();
		//if (!$(this).valid()) {
			//return;
		//}
		//billingValidate();
        var $ccField = $("#dwfrm_billing_paymentMethods_creditCard_number");
		var creditCardNumber = $ccField.val(),
			creditCardType;
		if(($('#creditCardList').length == 0 || ($('#creditCardList').length > 0 && $('#creditCardList').val() == '')) && creditCardNumber.indexOf('****') == -1){
		//if((($('#creditCardList').length > 0 && $('#creditCardList').val() == '')) && creditCardNumber.indexOf('****') == -1){
	        // Replace all spaces with an empty string
	        var processed = creditCardNumber.replace(/ /g, '');
	        var ccFieldVal = parseInt(processed, 10);
	        $ccField.val(ccFieldVal);
		}

		//set hidden card type select field if it's not already set;
		//if the credit card is a saved card, then we can't verify the card type from the card number
		//so we must call out to get the type
		if(creditCardNumber.indexOf('****') != -1){
			var creditCardUUID = $('#creditCardList :selected').val();
			if(creditCardUUID){
				var url = util.appendParamToURL(Urls.billingSelectCC, 'creditCardUUID', creditCardUUID);
			    $.ajax({
			        url: url,
			        type: 'GET',
			        complete: function (data) {
			            if (!data) {
			                window.alert(Resources.CC_LOAD_ERROR);
			                return false;
			            }
			            creditCardType = data;
			            //console.log(data);
			            selectHiddenCreditCardOption($('#dwfrm_billing_paymentMethods_creditCard_type'), data.type);
			        }
			    });
			}
		}else{
			creditCardType = getCreditCardType(creditCardNumber);
			selectHiddenCreditCardOption($('#dwfrm_billing_paymentMethods_creditCard_type'), creditCardType);
		}
	})
	.on('change', '.input-text.phone',  validator.formatter.phone);
	$('.input-text.phone').trigger('change');
    // Validate phone number
    $('.input-text.phone').on('focus change', function () {
        $(this).parent().addClass('focused');
    }).on('blur', function(){
        $(this).parent().removeClass('focused');
    });
}

function initGiftCards() {
    var $billingForm = $('form#dwfrm_billing');
    var $gcApply = $('#gc-apply');
    var $gcCheckBalance = $('#gc-checkbalance');
    var $gcCode = $billingForm.find("input[name$='_giftCertCode']");
    var $gcPin = $billingForm.find("input[name$='_giftCardPin']");
    var $balance = $billingForm.find('div.balance');

    $gcApply.on('click', function (e) {
        e.preventDefault();
        var error = $balance.find('span.error');
        if (!$gcCode.val()) {            
            if (error.length === 0) {
                error = $('<span>').addClass('error').appendTo($balance);
            }
            error.html(Resources.GIFT_CERT_NUMBER_MISSING);
        } else if (!$gcPin.val()) {
            if (error.length === 0) {
                error = $('<span>').addClass('error').appendTo($balance);
            }
            error.html(Resources.GIFT_CERT_PIN_MISSING);
        } else {
            $('.js-payment-methods-container input, .js-payment-methods-container select').removeClass('required error');
            $('.js-billing-address-container input, .js-billing-address-container select').removeClass('required error');
            var actionName = $(this).attr('name');
            $('#fake-gc-apply').attr('name', actionName).val($(this).val());

            progress.show();
            giftcard.checkBalance($gcCode.val(), $gcPin.val(), function (data) {
                // remove the progress overlay
                progress.hide();

                if(!data || !data.giftCertificate) {
                    // error
                    var error = $balance.find('span.error');
                    if (error.length === 0) {
                        error = $('<span>').addClass('error').appendTo($balance);
                    }
                    error.html(Resources.GIFT_CERT_INVALID);
                    return;
                }else{
	                // apply valid giftCertificate
	                // we need to disable all input fields except gift nubmer and pin in order to pass validation during form submition
	                $billingForm.find('input:not([name$="_giftCertCode"], [name$="_giftCardPin"])').removeAttr('required');
	                //$billingForm.find('input:not([name$="_giftCertCode"], [name$="_giftCardPin"]), .form-row').removeAttr('required').removeClass('.required');
	                //We need to disabled all other fields in order not to submit and skip validation
	                $billingForm.find('input:not([name$="_giftCertCode"], [name$="_giftCardPin"], #fake-gc-apply), select').attr('disabled', 'disabled');
	                $billingForm.submit();
                }
            });
        }
    });

    $gcCheckBalance.on('click', function(e) {
        e.preventDefault();

        $balance.text('');
        if ($gcCode.val().length === 0 || $gcCode.val() === 'Gift Card Number') {
            var error = $balance.find('span.error');
            if (error.length === 0) {
                error = $('<span>').addClass('error').appendTo($balance);
            }
            error.html(Resources.GIFT_CERT_NUMBER_MISSING);
            return;
        }

        if ($gcPin.val().length === 0 || $gcPin.val() === 'PIN') {
            var error = $balance.find('span.error');
            if (error.length === 0) {
                error = $('<span>').addClass('error').appendTo($balance);
            }
            error.html(Resources.GIFT_CERT_PIN_MISSING);
            return;
        }

        progress.show();
        giftcard.checkBalance($gcCode.val(), $gcPin.val(), function (data) {
            // remove the progress overlay
            progress.hide();

            if(!data || !data.giftCertificate) {
                // error
                var error = $balance.find('span.error');
                if (error.length === 0) {
                    error = $('<span>').addClass('error').appendTo($balance);
                }
                error.html(Resources.GIFT_CERT_INVALID);
                return;
            }
            // display details in UI
            $balance.find('span.error').remove();
            var balance = data.giftCertificate.balance;
            var balanceMsg = Resources.GIFT_CERT_BALANCE + ' ' + balance;
            $balance.html(balanceMsg);
        });
    });


    $('.gcredemption').on('click', 'a.gcremove', function(e) {
        e.preventDefault();
        var gcId = app.util.trimPrefix($(this).attr('id'), 'rgc-');
        removeGiftCertificate(gcId);
        return false;
    });

    $([$gcCode[0], $gcPin[0]]).on('keyup change', function() {
        validateGCFields()
    });

    validateGCFields();

    function removeGiftCertificate(giftCertificateId) {
        $balance.empty();
        setGiftCardError(null);

        // remove gift certificate
        var url = Urls.removeGiftCertificate;
        url = app.util.appendParamToURL(url, 'giftCertificateID', giftCertificateId);
        app.ajax.getJson({
            url: url,
            callback: function(data) {
                if(!data || !data.giftCertificate || !data.giftCertificate.removed) {
                    setGiftCertError(app.resources.CANTREMOVEGIFTCARD);
                    return false;
                }

                var needredirect = $('.js-gift-cert-used').length > 0;
                if (needredirect) {
                    page.redirect(Urls.billing);
                } else {
                    $("#gc-"+giftCertificateId).remove();
                    shipping.updateSummary();
                }
            }
        });
    }

    function setGiftCardError(msg) {
        var error = $balance.find('span.error');
        if (error.length === 0) {
            error = $('<span>').addClass('error').appendTo($balance);
        }

        if(!msg) {
            error.empty();
        } else {
            error.html(msg)
        }
    }

    function validateGCFields() {
        var isValidFields = ($gcCode.val() !== undefined && $gcCode.val().trim() !== ''
            && $gcPin.val() !== undefined && $gcPin.val().trim() !== '');
        $gcApply.prop('disabled', !isValidFields);
    }
}

/**
 * @function
 * @description loads billing address, Gift Certificates, Coupon and Payment methods
 */
exports.init = function () {
    var $addCoupon = $('#add-coupon');
    var $couponCode = $('input[name$="_couponCode"]');
    var $giftOrPromoCheckBox = $('#dwfrm_billing_usegiftorpromo');
    var $giftOrPromoSection = $('.billing-coupon-code');
    var $selectPaymentMethod = $('.payment-method-options');
    var selectedPaymentMethod = $selectPaymentMethod.find(':checked').val();

    /*****************************************************************************************************/
    /*										GIFT CARD AND PROMO HANDLING								 */
    /*****************************************************************************************************/

    	// Show and/or hide the Gift Card Promotional section
    	// when a user selects the gift card promo checkbox.
    	$giftOrPromoCheckBox.on('click', function (e) {
    		$giftOrPromoSection.toggle();
    	});
    	if ($giftOrPromoCheckBox.prop('checked')) {
    	    $giftOrPromoSection.show();
    	}
    	
    /*****************************************************************************************************/
    /*										CREDIT CARD HANDLING 										 */
    /*****************************************************************************************************/
   
	    var creditCardNumber = "";
		var $textBox = $("#dwfrm_billing_paymentMethods_creditCard_number");
		var $selectField = $('#dwfrm_billing_paymentMethods_creditCard_type');
		var $textBoxExpirationDate = $("#dwfrm_billing_paymentMethods_creditCard_expirationdate");
		var $textBoxCvn = $('input[id*="_creditCard_cvn"]');
		var $selectFieldMonth = $("#dwfrm_billing_paymentMethods_creditCard_month");
		var $selectFieldYear = $("#dwfrm_billing_paymentMethods_creditCard_year");

	    $textBoxCvn.on('keyup change', function(){
	        $(this).val($(this).val().replace(/[^0-9]/g, ''));
	    });

		// Only allow integers on the credit card number 
		// text box field. 
		allowOnlyIntegersOn($textBox);

		// Key Up Event for the Credit Card Number Text Box Field
		$textBox.keyup(function (e) {
			$('#creditCardList').val('');
			var creditCardNumber = getCreditCardNumber($textBox);
			var creditCardType = getCreditCardType(creditCardNumber);
			selectHiddenCreditCardOption($selectField, creditCardType);
            var creditLogo = $('.payment-method-image-credit-card');
            creditLogo.children('div').removeClass('active');
            if (creditCardType) {
                creditLogo.children('.'+creditCardType.toLowerCase()+'').addClass('active');
            }
            $textBox.mask("0000  0000  0000  0000", { watchInputs: true });
            //setMaskCreditCardNumber($textBox);

		});

		// Only allow integers on the credit card expiration
		// text box field.
		allowOnlyIntegersOn($textBoxExpirationDate);
		
		// Key Up Event for the Credit Card's Expiration Date
		$textBoxExpirationDate.keyup(function (e) {
			var $this = $(this);
			var month = getMonth($this);
			var year = getYear($this);

			selectHiddenCreditCardMonth($selectFieldMonth, month);
			selectHiddenCreditCardYear($selectFieldYear, year);
		});
		
		//format input field to correct data if we already have it from saved CC
		if ($.trim($textBoxExpirationDate.val()) != '') {
		    var expirationParts = $.trim($textBoxExpirationDate.val()).split('/');
		    if (expirationParts.length == 2) {
		        var monthValue = $.trim(expirationParts[0]);
		        if (monthValue.length == 1) {
		            monthValue = '0' + monthValue;
		            $textBoxExpirationDate.val(monthValue + ' / ' + expirationParts[1]);
		        }
		    }
		}

		// Mask the Credit Card's Expiration Date
		$textBoxExpirationDate.mask("00 / 00", {placeholder: "MM / YY", watchInputs: true });

	/*****************************************************************************************************/

	//It is required to call this method before formPrepare in order to show CC default fields
	// default payment method to 'CREDIT_CARD'
	updatePaymentMethod((selectedPaymentMethod) ? selectedPaymentMethod : 'CREDIT_CARD');
	
    formPrepare.init({
        formSelector: 'form[id$="billing"]',
        continueSelector: '[name$="billing_save"]'
    });

    billingLoad();
    initGiftCards();

    var $form = $('form[id$="billing"]');
    util.initZipService($form);
    var $stateEmptyOptionEl = $form.find('.state-field-container select option:first-child');
    var stateEmptyOptionHtml = $('<div>').append($stateEmptyOptionEl.clone())
        .html();
    $form.on('change', 'select.country', function() {
    	var value = $(this).val().toLowerCase();

    	if (value == 'us' || value == 'ca') {
    		$('select[name$="_state"]').addClass('required').parent().addClass('required');
    	} else {
    		$('select[name$="_state"]').removeClass('required').parent().removeClass('required');
    	}

        util.changeStateField($(this).val(), $form, stateEmptyOptionHtml);
        populateStateTextBox(); 
    });
    $form.find('select.country').trigger('change');

    $selectPaymentMethod.on('click', 'input[type="radio"]', function () {
        updatePaymentMethod($(this).val());
    });

    // select credit card from list
    $('#creditCardList').on('change', function () {
        var cardUUID = $(this).val();
        if (!cardUUID) {return;}
        populateCreditCardForm(cardUUID); 
    });
    
    $addCoupon.on('click', function (e) {
        e.preventDefault();
        var $error = $checkoutForm.find('.coupon-error'),
            code = $couponCode.val();
        if (code.length === 0) {
            $error.html(Resources.COUPON_CODE_MISSING);
            return;
        }
        else  {
        	$error.html('');
        }

        var url = util.appendParamsToUrl(Urls.addCoupon, {couponCode: code, format: 'ajax'});
        $.getJSON(url, function (data) {
            var fail = false;
            var msg = '';
            if (!data) {
                msg = Resources.BAD_RESPONSE;
                fail = true;
            } else if (!data.success) {
                msg = data.message.split('<').join('&lt;').split('>').join('&gt;');
                fail = true;
            }
            if (fail) {
                $error.html(msg);
                return;
            }
            
            if(data.success) {
            	shipping.updateSummary();
            	var $div = $('div.coupon:last');
            	var $klon = $div.clone();
            	
            	if($klon.hasClass('first')) {
            		$klon.removeClass('first');
            	}
            	
            	$div.after($klon);
            	$klon.find('.message').html('<span class="value">' + data.couponCode + '</span> ' +
		            Resources.COUPON_CODE_SUCCESS);
            	
            	if (data.applied) {
            		$klon.find('.status.not-applied').remove();
            	} else {
            		$klon.find('.status.applied').remove();
            	}
            	$couponCode.val('');
            	
            }

            //basket check for displaying the payment section, if the adjusted total of the basket is 0 after applying the coupon
            //this will force a page refresh to display the coupon message based on a parameter message
            if (data.success && data.baskettotal === 0) {
                window.location.assign(Urls.billing);
            }
        });
    });
    
    $(document).on('click', '.delete-coupon', function (e) {
        e.preventDefault();
        var $button = $(this);
        var $error = $checkoutForm.find('.coupon-error'),
            code = $button.parent().parent().find('.value').text();
        if (code.length === 0) {
            $error.html(Resources.COUPON_CODE_MISSING);
            return;
        } else  { $error.html(''); }

        var url = util.appendParamsToUrl(Urls.deleteCoupon, {couponCode: code, format: 'ajax'});
        $.getJSON(url, function (data) {
            var fail = false;
            var msg = '';
            if (!data) {
                msg = Resources.BAD_RESPONSE;
                fail = true;
            } else if (!data.success) {
                msg = data.error.split('<').join('&lt;').split('>').join('&gt;');
                fail = true;
            }
            if (fail) {
                $error.html(msg);
                return;
            }
            
            if(data.success) {
            	shipping.updateSummary();
            	$button.closest('.redemption.coupon.form-row').remove();
            }
        });
    });
    

    // trigger events on enter
    $couponCode.on('keydown', function (e) {
        if (e.which === 13) {
            e.preventDefault();
            $addCoupon.click();
        }
    });

    $couponCode.on('keyup change', function() {
        validateCouponField();
    });

    validateCouponField();
    HandleCreditCardValidationOnPageLoad();
    
    $('.country-row').addClass("has-float-label");
    $('.state-row').addClass("has-float-label");
    if ($('.select-address').length > 0) {
        $('.select-address').addClass('has-float-label');
        $('.select-address select').on('change blur', function() {
            if (!$(this).val()) {
                $(this).removeClass('valid');
            }
        })
    }

    function validateCouponField() {
        var isValidField = ($couponCode.val() !== undefined && $couponCode.val().trim() !== '');
        $addCoupon.prop('disabled', !isValidField);
    }
};

},{"../../ajax":26,"../../dialog":34,"../../giftcard":37,"../../page":44,"../../progress":68,"../../util":82,"../../validator":83,"./formPrepare":49,"./shipping":53}],49:[function(require,module,exports){
'use strict';

var _ = require('lodash');
var stickyCart = require('../../stickycart');

var $form, $continue, $requiredInputs, validator;

var hasEmptyRequired = function () {
    // filter out only the visible fields
    var requiredValues = $requiredInputs.filter(':visible').map(function () {
        return $(this).val();
    });
    return _(requiredValues).contains('');
};

var validateForm = function () {
    // only validate form when all required fields are filled to avoid
    // throwing errors on empty form
    if (!validator) {
        return;
    }
    if (!hasEmptyRequired() && !hasShippingMethodError()) {
        if (validator.form()) {
            $continue.removeAttr('disabled');
        }
    } else {
        $continue.attr('disabled', 'disabled');
    }
};

var validateEl = function () {
    if (hasShippingMethodError() || ($(this).val() === '' && $(this).attr('name').search('_state') < 0)) {
        $continue.attr('disabled', 'disabled');
    } else {
        // enable continue button on last required field that is valid
        // only validate single field
        if (validator.element(this) && (!hasEmptyRequired() || ($(this).attr('name').search('_state') > 0 && !$(this).hasClass('required')))) {
            $continue.removeAttr('disabled');
        } else {
            $continue.attr('disabled', 'disabled');
        }
    }
};

/**
 * We need to check if we are on the shipping step 
 * and we don't have any shipping method error messages 
 * that doesn't allow to ship order
 */
var hasShippingMethodError = function () {
    var $shippingMethodList = $('#shipping-method-list');
    var valid = false;
    if ($shippingMethodList.length > 0) {
        if ($shippingMethodList.find('.restricted-shipment-error').length > 0) {
        	valid = true;
        } else {
        	valid = false; 
        }
    }
    
    return valid;
}

var init = function (opts) {
    if (!opts.formSelector || !opts.continueSelector) {
        throw new Error('Missing form and continue action selectors.');
    }
    $form = $(opts.formSelector);
    $continue = $(opts.continueSelector);
    validator = $form.validate();
    $requiredInputs = $('.required', $form).find(':input');
    validateForm();
    // start listening
    $requiredInputs.on('focusout', validateEl);
    $requiredInputs.filter('input:not([id$="_creditCard_expirationdate"], [id$="_creditCard_number"])').on('focusout', _.debounce(validateEl, 200));
    stickyCart.init();

};

exports.init = init;
exports.validateForm = validateForm;
exports.validateEl = validateEl;
exports.hasShippingMethodError = hasShippingMethodError;

},{"../../stickycart":75,"lodash":5}],50:[function(require,module,exports){
'use strict';

var address = require('./address'),
    billing = require('./billing'),
    multiship = require('./multiship'),
    shipping = require('./shipping'),
    smartResize = require('../../smartresize'),
    quickview = require('../../quickview'),
    util = require('../../util'),
    mediumBreakpoint = 480;

function supportMessagePosition() {
    var supportMessage = $('.support-message-phone.checkout-progress');
    if (window.innerWidth <= mediumBreakpoint && $('#footer-wrapper').find(supportMessage).length < 1) {
        supportMessage.prependTo('#footer-wrapper');
    } else if (window.innerWidth > mediumBreakpoint && $('.tablet-progress-indicator').find(supportMessage).length < 1) {
        supportMessage.appendTo('.tablet-progress-indicator .checkout-progress-indicator');
    }
}
function mobileSummaryAddClass() {
    if (window.innerWidth <= mediumBreakpoint) {
        $('#checkout-mini-summary').addClass('checkout-mini-summary-mobile');
    }
}
function mobileShowSummary () {
    $('.checkout-mobile-summary .fa').css('visibility','visible');
    $('.checkout-mobile-summary').on('click', function(){
        $(this).toggleClass('checkout-mobile-summary-active');
        $('.checkout-mini-summary-mobile').toggleClass('checkout-mini-summary-mobile-active');
        if ($(this).closest('.top-banner').hasClass('sticky')) {
	        $("html, body").animate({
	            scrollTop: 0
	        }, 1000);
        }
    });
    $('body').on('click', '.mini-summary-close', function() {
        $('.checkout-mobile-summary').removeClass('checkout-mobile-summary-active');
        $('.checkout-mini-summary-mobile').removeClass('checkout-mini-summary-mobile-active');
    });
}
function stickyBlock() {
    if (window.innerWidth > 960) {
        $(".cart-order-totals").stick_in_parent({offset_top : $('.top-banner').height()});
    }
}

function selectFromBak() {
    if ($('#state-id-bak').length && $('#state-id-bak').val().length > 0) {
        var state = $('#state-id-bak').val();
        $('select[name$="_state"]').val(state).attr('selected', true);
        $('select[name$="_state"]').blur();
    }
}

function checkPopulatedFields() {
    $('form[name$="_billing"] input, form[name$="_billing"] select').each(function (index, element) {
        if ($(element).val().length > 0) {
            $(element).blur();
        }
    })
}

function hideSummaryOnLogin() {
    if($('.pt_checkout').length && $('#main .account-login').length) {
        $('.checkout-mobile-summary').hide();
    }
}

exports.stickyBlock = function () {stickyBlock();}

/**
 * @function Initializes the page events depending on the checkout stage (shipping/billing)
 */
exports.init = function () {
    address.init();
    if ($('.checkout-shipping').length > 0 && $('.checkoutmultishipping').length === 0) {
        shipping.init();
    } else if ($('.checkoutmultishipping').length > 0) {
        multiship.init();
    } else {
        billing.init();
    }

    $('.item-edit-details a').on('click', function (e) {
        e.preventDefault();
        quickview.show({
            url: e.target.href,
            source: 'cart',
            customClass: 'ui-dialog_update-item'
        });
    });

    //if on the order review page and there are products that are not available diable the submit order button
    if ($('.order-summary-footer').length > 0) {
        if ($('.notavailable').length > 0) {
            $('.order-summary-footer .submit-order .button-fancy-large').attr('disabled', 'disabled');
        }
    }
    //set selected class for all selects
    $('.pt_checkout').on('change', 'select', function () {
        $(this).addClass('selected');
        $(this).parent().removeClass('unfloat');
    });

    $(window).load(function(){
        stickyBlock();
    });
    hideSummaryOnLogin();
    supportMessagePosition();
    mobileSummaryAddClass();
    mobileShowSummary();
    smartResize(function() {
        supportMessagePosition();
        mobileSummaryAddClass();
    });
    selectFromBak();
    checkPopulatedFields();
    util.selectUnfloat();

    $('.oAuthIcon').off('click').on('click', function (e) {
        $('.OAuthProvider').val(this.id);
    });
};

},{"../../quickview":69,"../../smartresize":74,"../../util":82,"./address":47,"./billing":48,"./multiship":51,"./shipping":53}],51:[function(require,module,exports){
'use strict';

var address = require('./address'),
    formPrepare = require('./formPrepare'),
    dialog = require('../../dialog'),
    stickyCart = require('../../stickycart'),
    validator = require('../../validator'),
    util = require('../../util'),
    ajax = require('../../ajax'),
    page = require('../../page'),
    updateSummary = require('./shipping').updateSummary,
    selectBoxIt = require('../../selectboxit'),
    floatLabels = require('../../float-labels'),
    $cache = {};


function restrictedState(stateList,state) {
    var len = stateList.length;
    var stateListState;
    if(len == 0){
        return false;
    }


    for (i = 0; i < len; i++) {
        stateListState = stateList.states[i];
        if(stateListState == state){
            return true;
        }
    }
    return false;
}


function initializeAddressForm(form) {
    var form = $("#EditAddressForm, #edit-address-form");
    form.find("input[name='format']").remove();
    floatLabels.init();
    validator.initForm(form);
    form.on('change', '.input-text.phone', validator.formatter.phone);
    $('.ui-dialog-titlebar-close').blur();
    form.find($('a.tooltip')).on('click', function (e) {
    	e.preventDefault();
    });

    //initialize form fields
    form.find('input, select').each(function(){
        var val = $(this).val();
        if (val && val.length > 0) {
            $(this).valid();
        }
    });

    form.find('phone').blur(function() {
        var val = $(this).val();
        // autofill fix for masked field
        $(this).val(val);
    });

    //bind checbox styles
    form.find('input.input-checkbox').each(function(){
        if ($(this).parents('.checkbox').length)
            return false;

        var wrap = $(this).closest('.form-row'),
            checked = $(this).is(':checked');

        if (wrap.length){
            wrap.wrapInner('<div class="checkbox" />')
            if (checked)
                wrap.find(".checkbox").addClass('checked')
        } else {
            if(checked){
                $(this).parent().wrapInner('<div class="checkbox checked" />')
            }else{
                $(this).parent().wrapInner('<div class="checkbox" />')
            }

            $(this).wrap('<div class="ch-field" />')
        }
    });

    // Prepopulate city for checkout redesign
    util.initZipService(form);
    var $stateEmptyOptionEl = form.find('.state-field-container select option:first-child');

    var stateEmptyOptionHtml = $('<div>').append($stateEmptyOptionEl.clone())
        .html();
    form.on('change', 'select.country', function() {
        util.changeStateField($(this).val(), form, stateEmptyOptionHtml);
        form.on('change', '.input-text.phone', validator.formatter.phone);
    });
    form.find('select.country').trigger('change');

    form.on("click", "#dialogApplyBtn, .apply-button", function(e) {
        e.preventDefault();

        if ($('.single-shipment').length == 0) {
            var addressId = form.find("input[name$='_addressid']");
            // Replace funky chars in the address id
            addressId.val(addressId.val().replace(/[^\w+-]/g, "-"));
        }

        if (!form.valid()) {
            //initializeAddressForm(form);
            return false;
        }
        var url = util.appendParamsToUrl(form.attr('action'),{format:"ajax"});
        var applyName = $(this).attr('name');
        var options = {
            url: url,
            data: form.serialize()+"&"+applyName+'=x',
            type: "POST"
        };
        $.ajax( options ).done(function(data){
            if (typeof(data) !== 'string' || $.trim(data) == 'success') {
                if (data.success || $.trim(data) == 'success') {
                    dialog.close();
                    if ($('.single-shipment').length > 0) {
                        var addressIDs = [];
                        if ($cache.singleShipmentAdd) {
                            $('.addressentry').each(function(){
                                addressIDs.push($(this).data('uuid'));
                            });
                        }
                        $('.addresslist').load(Urls.addressList, function(){
                            // make sure a shipping address is selected
                            if ($cache.singleShipmentAdd) {
                                // select the newest address
                                $('.addressentry').each(function(){
                                    if (addressIDs.indexOf($(this).data('uuid')) == -1) {
                                        $(this).find('input').prop('checked', true).click();
                                        return false;
                                    }
                                });
                            }
                            else {
                                if ($("input[name$='_shippingAddressID']").length > 0 && $("input[name$='_shippingAddressID']:checked").length == 0) {
                                    $('.preferred-address input').prop('checked', true).click();
                                }
                                else {
                                    $('.addresslist input:checked').click();
                                }
                            }
                            $('.addressentry, .address-create, .address-add').syncHeight();

                        });
                    }
                    else if ($('.checkoutmultishipping.shipments').length > 0) {
                        page.redirect(Urls.multiShipShipments);
                    }
                    else {
                        page.redirect(Urls.multiShip);
                    }
                }
                else {
                    alert(data.message);
                    return false;
                }
            }
            else if ($('.guest-miniaddress').length > 0) {
                dialog.close();
                var multiship = $('.multishipmethods');
                if (multiship.length > 0) {
                    multiship.load(Urls.multiShipMethods, function(){
                        updateSummary();
                    });
                }
                else {
                    /*updateShippingMethodList();*/
                    updateSummary();
                }
                $('.guest-miniaddress').html(data);
            }
            else {
                $('#dialog-container').html(data);
                /*app.account.init();
                app.tooltips.init();*/
                // PDS MERGE
                initializeAddressForm(form);
            }
        });
    })
    .on("click", "#dialogCancelBtn, .close-button, .cancel", function(e){
        e.preventDefault();
        dialog.close();
    })
    .on("click", "#dialogDeleteBtn", function(e){
        e.preventDefault();
        if (!form.valid()) {
            return false;
        }
        var url = util.appendParamsToUrl(form.attr('action'),{format:"ajax"});
        var applyName = form.find('#dialogDeleteBtn').attr('name');
        var options = {
            url: url,
            data: form.serialize()+"&"+applyName+'=x',
            type: "POST"
        };
        $.ajax( options ).done(function(data){
            if( typeof(data)!=='string' ) {
                if ( data.success ) {
                    dialog.close();
                    page.redirect(Urls.multiShip);
                } else {
                    alert(data.message);
                    return false;
                }
            } else {
                $('#dialog-container').html(data);
                /*app.account.init();
                app.tooltips.init();*/
            }
        });
    });
}

function shippingLoad(){
    if ($cache.checkoutForm.hasClass("shipping-addresses")) {
        $('#multiShipAddressForm').on('submit',function(e){
            //prevent checkout when address outside of US and contains hazmat or dropship items
            /*app.progress.show(this);*/

            e.preventDefault();
            $("#avsDiv").append("<div id=\"newAvsDiv\"></div>");
            var data = $(this).serialize();
            var url =  Urls.verifyAddressMultiple;
                      
            ajax.load({
                url:url,
                data:data,
                
                type:"POST",
                callback: function (resp) {
                    if($.trim(resp) != "{}") {
                    	$("#avsDiv").html($("#newAvsDiv").html());
                    	dialog.open({url: url, target:$("#newAvsDiv"), options:{
                             width:630,
                             height:450,
                             title:''
                         }});
                    	
                    } else {
                    	
                        $('#verifyBtn').click();
                    }
                }
            });

            return false;

        });
    }

    stickyCart.init();

    var multiship = $(".checkoutmultishipping");
    if(multiship.length === 0) { return; }

    /*selectBoxIt.selectBoxIt($('.select-field'));*/

    var shippingAddressLists = $(".multiship-addresses-table").find("td.shippingaddress");

    $(shippingAddressLists).each(function(index){
        var addressList = $(this);
        var uuid = $(this).attr("data-uuid");
        var isHazmat = $(this).data("hazmat");
        var isDropShip = $(this).data("dropship");
        var isNoIntlShip = $(this).data("nointlship");
        var addressID = $(this).find(".selectbox").val();

        var hazmatStates = window.hazmatstates;
        var dropshipStates = window.dropshipstates;
        var hazmatStates = '';
        var dropshipStates = '';

        var state = $(this).find("option:selected").data("state") || false;

        var initCountry = $(this).find("option:selected").data("country");
        var isUS = (initCountry == 'US' || initCountry == '') || false;

        var restrictedHazmatState = restrictedState(hazmatStates, state);
        var restrictedDropShipState = restrictedState(dropshipStates, state);


        if(addressID){
            $(this).find("a.address-edit").removeClass("visually-hidden");
            $(this).find(".selectbox").trigger('click').addClass('selected');
        }
        //display error messages for selected addresses onload

        if((!isUS || (isUS && restrictedHazmatState)) && isHazmat){
            $(this).find(".noship-error").removeClass("visually-hidden");
        }
        if(!isUS && isNoIntlShip){
            $(this).find(".noship-error").removeClass("visually-hidden");
        }

        //display error messages for selected addresses on selection change
        $(this).on("change",".selectbox",function(e){
            var newAddressID = $(this).val();

            var shipCountry = $(this).find("option:selected").data("country");
            var shipState = $(this).find("option:selected").data("state") || false;
            var isUS = (shipCountry == 'US' || shipCountry == '') || false;
            var restrictedHazmatState = restrictedState(hazmatStates,shipState);
            var restrictedDropShipState = restrictedState(dropshipStates,shipState);

            if(!newAddressID){
            	 $(this).parents(".select-address").siblings(".address-error").removeClass("visually-hidden");
                $(this).parents(".shippingaddress").find("a.address-edit").addClass("visually-hidden");
            }else{
                $(this).parents(".shippingaddress").find("a.address-edit").removeClass("visually-hidden");
                $(this).parents(".select-address").siblings(".address-error").addClass("visually-hidden");
            }
            

            if(!isUS && (isHazmat || isNoIntlShip)){
                $(this).parents(".select-address").siblings(".noship-error").removeClass("visually-hidden");

            } else if (isUS && isHazmat && restrictedHazmatState){
                $(this).parents(".select-address").siblings(".noship-error").removeClass("visually-hidden");

            } else if (isUS && isDropShip && restrictedDropShipState){
                $(this).parents(".select-address").siblings(".noship-error").removeClass("visually-hidden");

            }else {
                $(this).parents(".select-address").siblings(".noship-error").addClass("visually-hidden");
            }

            //prevent checkout if missing address or dropship/hazmat shipments outside US even if validated address
            isFormAvailableForCheckout();

            //store the shipping address to session
            var url = Urls.storeShippingAddress;
            var options = {
                url: url,
                data: {
                    'pliUUID': uuid,
                    'addressUUID' : $(this).val()
                },
                type: "POST"
            };
            $.ajax( options ).done(function(data){

                if(data.success){

                    return;
                }else{
                    return;
                }
            });
        });
    });

    //prevent checkout if missing address or dropship/hazmat shipments outside US even if validated address
    isFormAvailableForCheckout(false);

    var shipmentMethodsLists = $(".shipping-method").find("td.shippingaddress");

    $(shipmentMethodsLists).each(function(index){
        var uuid = $(this).attr("data-uuid");
        $(this).on("change",".selectbox",function(e){
            //store the shipping address to session
            var url = Urls.storeShippingMethod;
            var options = {
                url: url,
                data: {
                    'shipmentUUID': uuid,
                    'shippingMethodID' : $(this).val()
                },
                type: "POST"
            };
            $.ajax( options ).done(function(data){
                if(data.success){
                    updateSummary();
                    return;
                }else{
                    return;
                }
            });
        });
    });

    multiship.find('[name$="_shippingMethodID"]').click(function () {
        $(this).parent().addClass('radio-button-selected');
        $(this).parent().siblings('div.form-row').removeClass('radio-button-selected');
    });

    multiship.on("change",".shipping-method-radios .input-radio",function(e){
        var options = {
            url: Urls.storeShippingMethod,
            data: {
                'shipmentUUID': $(this).attr("data-uuid"),
                'shippingMethodID' : $(this).val()
            },
            type: "POST"
        };
        $.ajax( options ).done(function(data){

            if (data.success) {
                updateSummary();
                return;
            }
            else {
                return;
            }
        });
    });

    //bind add address in multishipping
    $("a.address-edit, a.address-create").on("click",function(e) {
        e.preventDefault();
        var anchor = $(this);
        var url = anchor.attr("href");
        var title = anchor.attr("title");
        if(anchor.hasClass("edit")) {
            var addressID = anchor.parents("td.shippingaddress").find(".selectbox").val();
            if(!addressID) {
                return false;
            }
            url = util.appendParamToURL(url, "addressID", addressID);
        }
        var dialogWidth = (window.innerWidth <= 668) ? (window.innerWidth).toString() : '668';
        var options = {open: initializeAddressForm, dialogClass:'checkout-popup', width: dialogWidth-40};
        dialog.open({url:url, options:options});
        return false;
    });

    $(".shippingaddress .user-login-hopup").on("click", function(e) {
        $('html, body').animate({scrollTop: 0}, 200);
    });

    //prevent checkout if missing address or dropship/hazmat shipments outside US even if validated address
    function isFormAvailableForCheckout(showError) {
        var missingAddress = false;
        var isHazmat = false;
        var isDropship = false;
        $(shippingAddressLists).each(function(index){
            if(this.classList.contains('pickup')) {
                return true;
            }

            var addressID = $(this).find(".selectbox").val();
            if(!addressID) {
                missingAddress = true;
                if(showError == true){
                	$(this).find(".address-error").removeClass("visually-hidden");
                }
                
            }

            //determine if trying to send hazmat/dropship to improper address outside US
            var badaddress = $(this).find(".noship-error").hasClass("visually-hidden");
            if(!badaddress){
                isHazmat = true;
            }

        });

        if (missingAddress || isHazmat){
            $cache.save.attr('disabled', 'disabled');
            return false;
        } else {
            $cache.save.removeAttr('disabled');
        }
    }

    if ($cache.checkoutForm.hasClass("shipping-addresses")) {
        $cache.save.on("click", isFormAvailableForCheckout);
    }

}


function initializeCache() {
    $cache.checkoutForm = $("form.address");
    $cache.checkoutRedesign = $('.checkout-redesign');
    $cache.addressList = $cache.checkoutForm.find(".select-address select[id$='_addressList']");
    $cache.addressid = $cache.checkoutForm.find("input[name$='_addressid']");
    $cache.firstName = $cache.checkoutForm.find("input[name$='_firstName']");
    $cache.lastName = $cache.checkoutForm.find("input[name$='_lastName']");
    $cache.address1 = $cache.checkoutForm.find("input[name$='_address1']");
    $cache.address2 = $cache.checkoutForm.find("input[name$='_address2']");
    $cache.city = $cache.checkoutForm.find("input[name$='_city']");
    $cache.postalCode = $cache.checkoutForm.find("input[name$='_zip']");
    $cache.phone = $cache.checkoutForm.find("input[name$='_phone']");
    $cache.countryCode = $cache.checkoutForm.find("select[id$='_country']");
    $cache.stateCode = $cache.checkoutForm.find("select[id$='_state']");
    $cache.addToAddressBook = $cache.checkoutForm.find("input[name$='_addToAddressBook']");
    $cache.singleShipmentAdd = false;
    if ($cache.checkoutForm.hasClass("checkout-shipping")) {
        // shipping only
        $cache.useForBilling = $cache.checkoutForm.find("input[name$='_useAsBillingAddress']");
        $cache.giftMessage = $cache.checkoutForm.find(".gift-message-text");
        $cache.shippingMethodList = $("#shipping-method-list");
        $cache.save = $cache.checkoutForm.find("button[name$='_shippingAddress_save']");
        $cache.shippingEmailList = $cache.checkoutForm.find("input[name$='_emailLists_ksp']");
        $cache.saveInfo = $cache.checkoutForm.find("input[name$='_saveInfo']");
        $cache.saveInfoPassword = $cache.checkoutForm.find(".password-input");
        $cache.email = $cache.checkoutForm.find("input[name$='_emailAddress']");
        $cache.singleShipment = $('.single-shipment');
    }
    if ($cache.checkoutForm.hasClass("shipping-addresses")) {
        $cache.save = $cache.checkoutForm.find("button[name$='_addressSelection_save']");
    }
    if ($cache.checkoutForm.hasClass("multiship-delivery-form")) {
        $cache.save = $cache.checkoutForm.find("button[name$='_shippingOptions_save']");
    }
}

function initializeEvents() {
    shippingLoad();
}
function setGiftNote(giftNote, val) {
    var msgTxt = giftNote.find('.textareacontainer');

    if (val !== 'personalizedgiftnote' && val !== 'blankgiftnote') {
        msgTxt.addClass('hide');
        $(msgTxt).find('textarea').blur();
    } else {
        msgTxt.removeClass('hide');
        $(msgTxt).find('textarea').focus();
    }
}

function initializeMultiGiftOptions(form) {

    form.find('.gift-note').each(function(){
        var messageRadioVal = $(this).find('input[name$="_giftMessageOption"]:checked').val();
        setGiftNote($(this), messageRadioVal);
    });

    form.on('change', 'input[name$="_giftMessageOption"]', function(e){
        var giftNote = $(this).closest('.gift-note');
        setGiftNote(giftNote, $(this).val());
    })
    .on('change', 'input[name$="_hasGiftWrap"]', function(e){
        var giftWrap = $(this).closest('.gift-wrap');
        if ($(this).prop('checked')) {
            giftWrap.find('input.wrapping').click();
        }
        else {
            giftWrap.find('input.nowrapping').click();
        }
    })
    .on('change', 'input[name$="_hasNote"]', function(e){
        var giftNote = $(this).closest('.gift-note');
        if ($(this).prop('checked')) {
            giftNote.find('input#personalizedgiftnote').click();
        }
        else {
            giftNote.find('input#nogiftnote').click();
        }
    })
    .on('click', 'button[type="submit"]', function(e) {
        e.preventDefault();
        e.stopImmediatePropagation();

        // Replace line breaks with spaces
        form.find('.giftmessage').each(function() {
            var $this = $(this);
            $this.val($this.val().replace(/\n/g, ' '));
        });

        // Select radio button 'blankgiftnote' if the textarea('.giftmessage') is empty
        form.find('.giftmessage').each(function() {
            var $this = $(this);
            var $parent = $this.parents('.gift-note');
            var $checkbox = $parent.find('input[name$=_giftoptions_hasNote]');

            if ($this.val() == '' && $checkbox.is(':checked')) {
                $parent.find('input[id=blankgiftnote]').prop('checked', true);
            }
        });

        form.submit();
    });

    validator.initForm(form);
    // app.util.limitCharacters(); //TODO
}

function initGiftHopupMS() {

    $('.edit-all-gifts').on('click', '.gift-check', function(e) {
        e.preventDefault();
        var dialogWidth = (window.innerWidth < 768) ? (window.innerWidth - 40).toString() : '720';
        dialog.create({
            target: $('#gift-options-dialog'),
            options: {
                width: dialogWidth,
                title: '',
                dialogClass: 'gift-options-container',
                autoOpen: false
            }
        });

        app.ajax.load({
            url: app.util.ajaxUrl( $(this).attr('rel') ),
            target: $('#gift-options-dialog'),
            callback: function() {
                initializeMultiGiftOptions($('#edit-giftoptions-form'));
                $('#gift-options-dialog').dialog('open');
            }
        });
    });
}



/**
 * @function
 * @description shows gift message box in multiship, and if the page is the multi shipping address page it will call initmultishipshipaddress() to initialize the form
 */
exports.init = function () {
    initializeCache();
    initializeEvents();
    initGiftHopupMS();
};

},{"../../ajax":26,"../../dialog":34,"../../float-labels":36,"../../page":44,"../../selectboxit":73,"../../stickycart":75,"../../util":82,"../../validator":83,"./address":47,"./formPrepare":49,"./shipping":53}],52:[function(require,module,exports){
exports.init = function () {
    initializeEvents();
    var password = $('.input-text.password');
    function initializeEvents() {

        emailAccountLookupProcess();

        /* Disable or Enable the Confirm button */
        var $registerForm = $('#RegistrationForm'),
            $registerFormConfirmButton = $registerForm.find('[name$=profile_confirm]');
        $registerForm.find('input').on('blur', function () {
            var isValid = $registerForm.validate().checkForm();
            if (isValid) {
                $registerForm.valid();
                $registerFormConfirmButton.removeAttr('disabled');
            } else {
                $registerFormConfirmButton.attr('disabled', 'disabled');
            }
        });

        // Order confirmation details toggle
        $(document).on('click', '.js-orderconfirmation-details-toggle', function() {
            var $orderDetails = $(this).closest('.js-order-details-container');
            if ($orderDetails.length > 0) {
                var $orderDetailsBody = $orderDetails.find('.js-order-details-body');
                if ($orderDetails.hasClass('expanded')) {
                    $orderDetailsBody.slideUp(300);
                    $orderDetails.removeClass('expanded');
                } else {
                    $orderDetailsBody.slideDown(300);
                    $orderDetails.addClass('expanded');
                }
            }
        });
    }

    function emailAccountLookupProcess() {
        var $emailAccountLookup = $('.emailaccountlookup');

        // If not already an error and has some data
        if ($emailAccountLookup.length > 0 && !$emailAccountLookup.hasClass('error')
            && $emailAccountLookup.val().length > 3){

            var emailToLookup = $emailAccountLookup.val();
            var emailAccountLookupName = $emailAccountLookup.attr('name');

            params = {email : emailToLookup};
            app.ajax.getJson({
                async: true,
                url: Urls.AccountLoginCheck,
                data: params,
                callback: function (data) {
                    if(data && data.success){
                        // Email Already Exists
                        var validator = $( "#RegistrationForm" ).validate();
                        var error = {};
                        error[emailAccountLookupName] = Resources.INVALID_USERNAMETAKEN;
                        validator.showErrors(error);
                    }
                }
            });
        }
    }
};

},{}],53:[function(require,module,exports){
'use strict';

var ajax = require('../../ajax'),
	dialog = require('../../dialog'),
	stickyCart = require('../../stickycart'),
    formPrepare = require('./formPrepare'),
    progress = require('../../progress'),
    tooltip = require('../../tooltip'),
    validator = require('../../validator'),
    util = require('../../util'),
    index = require('./index'),
    shippingInventory = require('../../storeinventory/shipping');

/****************************************************************************************************************/

/**
 * @function
 * @description Only allows integers for the credit card field
 * @param jQuery Text Box Object
 */
function allowOnlyIntegersOn($textBox) {
	$textBox.keydown(function (e) {
		// Return true if key stroke is a number.
		// Otherwise, return false.
        var isNumber = (e.shiftKey || (e.keyCode >= 48 && e.keyCode <=57) || (e.keyCode >= 96 && e.keyCode <=105));

		// Return true if key stroke is a backspace, delete, tab, escape, and/or enter
		// Otherwise, return false.
		var allowedKey1 = $.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1;

		// Return true if key stroke is Ctrl+A or Command+A
		// Otherwise, return false.
		var allowedKey2 = (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true));

		// Return true if key stroke is home, end, left, right, down, or up.
		// Otherwise, return false.
		var allowedKey3 = (e.keyCode >= 35 && e.keyCode <= 40);

        // Do not do anything if the current key stroke is one of the
		// allowed keys.
        if (allowedKey1 || allowedKey2 || allowedKey3)
			return;

		// Do not allow key press if the user input is not a number.
        if (!isNumber)
			e.preventDefault();
    });
}

/****************************************************************************************************************/

var shippingMethods;
var $checkoutForm = $('.checkout-shipping');
var $avsContainer = $("#avsDiv");

/**
 * @function
 * @description Initializes gift message box, if shipment is gift
 */
function giftMessageBox() {
    // show gift message box, if shipment is gift
    $('.gift-message-text').toggleClass('hidden', $('input[name$="_shippingAddress_isGift"]:checked').val() !== 'true');
}

/**
 * @function
 * @description updates the order summary based on a possibly recalculated basket after a shipping promotion has been applied
 */
function updateSummary() {
    var $summary = $('#checkout-mini-summary');

    // Copy the my bag content.
    // This is being done since Shop Runner JS runs after app.js.
    $('#my-bag-content-copy').html($('.my-bag-content').clone());

    // load the updated summary area
    $summary.load(Urls.summaryRefreshURL, function () {
        // hide edit shipping method link
        $summary.fadeIn('fast');
        $summary.find('.checkout-mini-cart .minishipment .header a').hide();
        $summary.find('.order-totals-table .order-shipping .label a').hide();

        //update minicart summary on mobile
        var orderValue = $summary.find('.order-total .order-value').html();
        var $mobileSummary = $('.checkout-mobile-summary div div.float-right');
        $mobileSummary.html(orderValue);

        // Get My Bag's copy from the initial page load, and replace the
        // current My Bag returned from this AJAX call.
        $('.my-bag-content').replaceWith($('#my-bag-content-copy').html());
        $('#my-bag-content-copy').html('');
        stickyCart.init();
        index.stickyBlock();
    });
}

/**
 * @function
 * @description Helper method which constructs a URL for an AJAX request using the
 * entered address information as URL request parameters.
 */
function getShippingMethodURL(url, extraParams) {
    var $form = $('.address');
    var params = {
        address1: ($form.find('input[name$="_address1"]').length) ? $form.find('input[name$="_address1"]').val() : '',
        address2: ($form.find('input[name$="_address2"]').length) ? $form.find('input[name$="_address2"]').val() : '',
        countryCode: ($form.find('select[id$="_country"]').length) ? $form.find('select[id$="_country"]').val() : '',
        stateCode: ($form.find('select[id$="_state"], input[id$="_state"]').length) ? $form.find('select[id$="_state"], input[id$="_state"]').val() : '',
        postalCode: ($form.find('input[name$="_zip"]').length) ? $form.find('input[name$="_zip"]').val() : '',
        city: ($form.find('input[name$="_city"]').length) ? $form.find('input[name$="_city"]').val() : ''
    };
    return util.appendParamsToUrl(url, $.extend(params, extraParams));
}

/**
 * @function
 * @description selects a shipping method for the default shipment and updates the summary section on the right hand side
 * @param
 */
function selectShippingMethod(shippingMethodID) {
    // nothing entered
    if (!shippingMethodID) {
        return;
    }
    // attempt to set shipping method
    var url = getShippingMethodURL(Urls.selectShippingMethodsList, {shippingMethodID: shippingMethodID});
    ajax.getJson({
        url: url,
        callback: function (data) {
            updateSummary();
            if (!data || !data.shippingMethodID) {
                window.alert('Couldn\'t select shipping method.');
                return false;
            }
            // display promotion in UI and update the summary section,
            // if some promotions were applied
            $('.shippingpromotions').empty();


            // if (data.shippingPriceAdjustments && data.shippingPriceAdjustments.length > 0) {
            //     var len = data.shippingPriceAdjustments.length;
            //     for (var i=0; i < len; i++) {
            //         var spa = data.shippingPriceAdjustments[i];
            //     }
            // }
        }
    });
}

///////////////////////////////////////////////////////////////////////////////////////////
// 										NEWSLETTER SUBSCRIPTION
///////////////////////////////////////////////////////////////////////////////////////////

function setKSNewsletterCheckBox() {
	// Get the following form field values.
	var email =   $('.email-row').find('input[type=text]').val();
	var country = $('select.select-fieldcountry option:selected').text();
	var subscribe = $('.subscribe-row').find('input[type=checkbox]').is(':checked');

	// RR-231:
	// 	- Default subscribe checkbox to checked for any country that
	// 	  is NOT Canada.
	// 	- Otherwise, default the subscribe checkbox to NOT CHECKED.

	if(country.toLowerCase() != "canada") {
		// Default the subcribe to newsletter checkbox to CHECKED
		// since this is NOT Canada.
		$('.subscribe-row').find('input[type=checkbox]').prop('checked', true);
	}
	else {
		// Default the subcribe to newsletter checkbox to NOT CHECKED
		// since this is Canada.
		$('.subscribe-row').find('input[type=checkbox]').prop('checked', false);
	}
}

//RR-231:
// 	Set the subscribe checkbox to CHECKED if the country selected on
// 	the change event is NOT Canada.
// 	Otherwise, set it to NOT CHECKED.

$('select.select-fieldcountry').change(function() {
	setKSNewsletterCheckBox();
});

// EMAIL SUBSCRIPTION - ON FORM SUBMISSION

$('#dwfrm_singleshipping_shippingAddress').submit(function(){
	//push email signup to dataLayer
	if ($("#dwfrm_singleshipping_shippingAddress_email_emailLists_ksp").is(':checked')) {
		dataLayer.push({"event" : "email-subscribe", "subscribeType": "checkout"});
	}
});

///////////////////////////////////////////////////////////////////////////////////////////

/**
 * @function
 * @description Make an AJAX request to the server to retrieve the list of applicable shipping methods
 * based on the merchandise in the cart and the currently entered shipping address
 * (the address may be only partially entered).  If the list of applicable shipping methods
 * has changed because new address information has been entered, then issue another AJAX
 * request which updates the currently selected shipping method (if needed) and also updates
 * the UI.
 */
function updateShippingMethodList() {
    var $shippingMethodList = $('#shipping-method-list');
    if (!$shippingMethodList || $shippingMethodList.length === 0) { return; }
    var url = getShippingMethodURL(Urls.shippingMethodsJSON);

    ajax.getJson({
        url: url,
        callback: function (data) {
            if (!data) {
                return false;
            }
            if (shippingMethods && shippingMethods.toString() === data.toString()) {
                // No need to update the UI.  The list has not changed.
                return true;
            }

            // We need to update the UI.  The list has changed.
            // Cache the array of returned shipping methods.
            shippingMethods = data;

            // load the shipping method form
            var smlUrl = getShippingMethodURL(Urls.shippingMethodsList);
            $shippingMethodList.load(smlUrl, function () {
                $shippingMethodList.fadeIn('fast');
                //we need to disable continue button if we have any shipping restriction
                var saveShippingAddressButton = $('[name$="_shippingAddress_save"]');
                if (formPrepare.hasShippingMethodError()) {
                	saveShippingAddressButton.attr('disabled', 'disabled');
                } else {
                	saveShippingAddressButton.removeAttr('disabled');
                }
                // rebind the radio buttons onclick function to a handler.
                $shippingMethodList.find('[name$="_shippingMethodID"]').click(function () {

                	// Add a class of radio-button-selected to the selected radio button's form row wrapper
                	$(this).parent().addClass('radio-button-selected');

                	// Remove the class of radio-button-selected on all the non-selected radio button's form row wrapper(s)
                	$(this).parent().siblings('div.form-row').removeClass('radio-button-selected');

                	// Pass the selected shipping method ID into selectShippingMethod
                   	selectShippingMethod($(this).val());

                });
                //trigger country change event in order to validate form and enable continue button
                //it is required for international addresses where we don't have state/province dropdown
                $('form[id$="singleshipping_shippingAddress"]').find('select.country').trigger('change');
                // update the summary
                updateSummary();
                tooltip.init();
                //if nothing is selected in the shipping methods select the first one
                if ($shippingMethodList.find('.input-radio:checked').length === 0) {
                    $shippingMethodList.find('.input-radio:first').prop('checked', 'checked').parent().addClass('radio-button-selected');
                }
            });
        }
    });
}

function initPickUp() {
    var pickUpOptions = $('#pick-up-order-fields .input-radio'),
        pickUpFields = $('#pick-up-order-fields .pick-up-fields');

    pickUpOptions.on('change', function () {
        var el = this;

        if (el.value === 'other') {
            pickUpFields.show();
        } else {
            pickUpFields.hide();
            pickUpFields.find('input').val('');
        }
    });
}

/**
 * @function
 * @description This method's main purpose is to stop the form post if an invalid address has been entered, and pop up the
 *              AVS Modal. The AVS Modal will allow the user to modify their address.
 * @param {String} paymentMethodID the ID of the payment method, to which the payment method form should be changed to
 */
function shippingLoad() {

	function cError(){
		var countryError = $('select#dwfrm_singleshipping_shippingAddress_addressFields_country').hasClass('error');
		return countryError;
	}

	function sError(){
		var stateError = $('select#dwfrm_singleshipping_shippingAddress_addressFields_states_state').hasClass('error');
		return stateError;
	}

	function preValidate(){
		var pv = $checkoutForm.validate().form();

		if(cError()){
			$('#dwfrm_singleshipping_shippingAddress_addressFields_country').addClass('error');
			$("label[for='dwfrm_singleshipping_shippingAddress_addressFields_country']").insertAfter('#dwfrm_singleshipping_shippingAddress_addressFields_country');

		}

		if(sError()){
			$('#dwfrm_singleshipping_shippingAddress_addressFields_states_state').addClass('error');
			$("label[for='dwfrm_singleshipping_shippingAddress_addressFields_states_state']").remove();
		}

		return pv;
	}

	function singleShippingValidate() {
		if(preValidate()) {
			var url =  Urls.verifyAddress;
			var data = $checkoutForm.serialize();
			$avsContainer.append("<div id=\"newAvsDiv\"></div>");

			var width = '600',
                left = '0';

			if (util.isMobile() && window.innerWidth < 630) {
			    width = (window.innerWidth - 30) + '';
			    left = '15';
            }

			var options = {
				width: width,
				height: 'auto',
				title:'',
                left:left
			};

			ajax.load({
				url: url,
				data: data,
				type:"POST",
				callback: function (resp) {
					app.progress.hide($(this));
					if($.trim(resp) != "{}") {
						$("#avsDiv").html($("#newAvsDiv").html());
				        dialog.open({
				            url: url,
				            target: $("#newAvsDiv"),
				            options: options
				        });
					} else {
						$('#verifyBtn').click();
					}
				}
			});
		}
		else {
			app.progress.hide($(this));
		}
	}

	// Execute on form submission.
	$('#dwfrm_singleshipping_shippingAddress').on("submit",function(e) {
		e.preventDefault();

		if (!$(this).valid()) {
			return;
		}

		singleShippingValidate();

		return false;
	}).on('change', '.input-text.phone', validator.formatter.phone);
	$('.input-text.phone').trigger('change');

    // Validate phone number
    $('.input-text.phone').on('focus change', function () {
        $(this).parent().addClass('focused');
    }).on('blur', function(){
        $(this).parent().removeClass('focused');
    });
}

function setGiftNote(giftNote, val) {
    var msgTxt = giftNote.find('.textareacontainer');

    if (val !== 'personalizedgiftnote' && val !== 'blankgiftnote') {
        msgTxt.addClass('hide');
        $(msgTxt).find('textarea').blur();
    } else {
        msgTxt.removeClass('hide');
        $(msgTxt).find('textarea').focus();
    }
}

function initializeMultiGiftOptions(form) {

    form.find('.gift-note').each(function(){
        var messageRadioVal = $(this).find('input[name$="_giftMessageOption"]:checked').val();
        setGiftNote($(this), messageRadioVal);
    });

    form.on('change', 'input[name$="_giftMessageOption"]', function(e){
        var giftNote = $(this).closest('.gift-note');
        setGiftNote(giftNote, $(this).val());
    })
    .on('change', 'input[name$="_hasGiftWrap"]', function(e){
        var giftWrap = $(this).closest('.gift-wrap');
        if ($(this).prop('checked')) {
            giftWrap.find('input.wrapping').click();
        }
        else {
            giftWrap.find('input.nowrapping').click();
        }
    })
    .on('change', 'input[name$="_hasNote"]', function(e){
        var giftNote = $(this).closest('.gift-note');
        if ($(this).prop('checked')) {
            giftNote.find('input#personalizedgiftnote').click();
        }
        else {
            giftNote.find('input#nogiftnote').click();
        }
    })
    .on('click', 'button[type="submit"]', function(e) {
        e.preventDefault();
        e.stopImmediatePropagation();

        // Replace line breaks with spaces
        form.find('.giftmessage').each(function() {
            var $this = $(this);
            $this.val($this.val().replace(/\n/g, ' '));
        });

        // Select radio button 'blankgiftnote' if the textarea('.giftmessage') is empty
        form.find('.giftmessage').each(function() {
            var $this = $(this);
            var $parent = $this.parents('.gift-note');
            var $checkbox = $parent.find('input[name$=_giftoptions_hasNote]');

            if ($this.val() == '' && $checkbox.is(':checked')) {
                $parent.find('input[id=blankgiftnote]').prop('checked', true);
            }
        });

        form.submit();
    });

    validator.initForm(form);
    // app.util.limitCharacters(); //TODO
}

function initGiftHopup() {

    $('.edit-all-gifts').on('click', '.gift-check', function(e) {
        e.preventDefault();
        var dialogWidth = (window.innerWidth < 768) ? (window.innerWidth - 40).toString() : '720';
        dialog.create({
            target: $('#gift-options-dialog'),
            options: {
                width: dialogWidth,
                title: '',
                dialogClass: 'gift-options-container',
                autoOpen: false
            }
        });

        app.ajax.load({
            url: app.util.ajaxUrl( $(this).attr('rel') ),
            target: $('#gift-options-dialog'),
            callback: function() {
                initializeMultiGiftOptions($('#edit-giftoptions-form'));
                $('#gift-options-dialog').dialog('open');
            }
        });
    });
}

/****************************************************************************************************************/

exports.init = function () {
    formPrepare.init({
        continueSelector: '[name$="shippingAddress_save"]',
        formSelector:'[id$="singleshipping_shippingAddress"]'
    });

    shippingLoad();

    $('input[name$="_shippingAddress_isGift"]').on('click', giftMessageBox);

    $('.address').on('change',
        'input[name$="_addressFields_address1"], input[name$="_addressFields_address2"], select[name$="_addressFields_states_state"], input[name$="_addressFields_city"], input[name$="_addressFields_zip"]',
        updateShippingMethodList
    );

    $('.country-row').addClass("has-float-label");
    $('.state-row').addClass("has-float-label");

    if ($('.select-address').length > 0) {
        $('.select-address').addClass('has-float-label');
        $('.select-address select').on('change blur', function() {
            if (!$(this).val()) {
                $(this).removeClass('valid');
            }
        })
    }

    var $form = $('form[id$="singleshipping_shippingAddress"]');
    util.initZipService($form);
    var $stateEmptyOptionEl = $form.find('.state-field-container select option:first-child');
    var stateEmptyOptionHtml = $('<div>').append($stateEmptyOptionEl.clone()).html();
    $form.on('change', 'select.country', function() {
    	var value = $(this).val().toLowerCase();

    	if (value == 'us' || value == 'ca') {
    		$('select[name$="_state"]').addClass('required').parent().addClass('required');
    	} else {
    		$('select[name$="_state"]').removeClass('required').parent().removeClass('required');
    	}

        util.changeStateField($(this).val(), $form, stateEmptyOptionHtml);
        formPrepare.init({
            continueSelector: '[name$="shippingAddress_save"]',
            formSelector:'[id$="singleshipping_shippingAddress"]'
        });
    });
    $form.find('select.country').trigger('change');

    giftMessageBox();
    updateShippingMethodList();
    setKSNewsletterCheckBox();
    initPickUp();
    initGiftHopup();
    shippingInventory.init();
};

exports.updateShippingMethodList = updateShippingMethodList;
exports.updateSummary = updateSummary;

},{"../../ajax":26,"../../dialog":34,"../../progress":68,"../../stickycart":75,"../../storeinventory/shipping":79,"../../tooltip":81,"../../util":82,"../../validator":83,"./formPrepare":49,"./index":50}],54:[function(require,module,exports){
'use strict';

var addProductToCart = require('./product/addToCart'),
    ajax = require('../ajax'),
    page = require('../page'),
    productTile = require('../product-tile'),
    quickview = require('../quickview');

/**
 * @private
 * @function
 * @description Binds the click events to the remove-link and quick-view button
 */
function initializeEvents() {
    $('#compare-table').on('click', '.remove-link', function (e) {
        e.preventDefault();
        ajax.getJson({
            url: this.href,
            callback: function () {
                page.refresh();
            }
        });
    })
    .on('click', '.open-quick-view', function (e) {
        e.preventDefault();
        var url = $(this).closest('.product').find('.thumb-link').attr('href');
        //Very specific case for making inputs outside of dialog available
        $.widget( "ui.dialog", $.ui.dialog, {
            _allowInteraction: function( event ) {
                return !!$( event.target ).is( "input" ) || this._super( event );
            }
        });
        quickview.show({
            url: url,
            source: 'quickview'
        });
    });

    $('#compare-category-list').on('change', function () {
        $(this).closest('form').submit();
    });
}

exports.init = function () {
    productTile.init();
    initializeEvents();
    addProductToCart();
};

},{"../ajax":26,"../page":44,"../product-tile":67,"../quickview":69,"./product/addToCart":55}],55:[function(require,module,exports){
'use strict';

var dialog = require('../../dialog'),
	availability = require('./availability'),
	validator = require('../../validator'),
    minicart = require('../../minicart'),
    page = require('../../page'),
    util = require('../../util'),
    Promise = require('promise'),
    _ = require('lodash'),
    monogramReset = require('../../storeinventory/product').monogramReset,
    validateFormFields = require('../../storeinventory/product').validateFormFields;

/**
 * @description Make the AJAX request to add an item to cart
 * @param {Element} form The form element that contains the item quantity and ID data
 * @returns {Promise}
 */
var addItemToCart = function (form) {
    var $form = $(form),
        $qty = $form.find('input[name="Quantity"]'),
        $pspContainer = $form.parents('.product-set-item'),
        itemID = '';

	if($qty.length == 0){
		$qty = $form.find('select[name="Quantity"]');
	}
	// Fix for ProductSets, as the quantity select isn't within the form.
    if ($pspContainer.length) {
    	// Find the PSP quantity
    	$qty = $pspContainer.find('select[name="Quantity"]');
    	// Remove any prior injected inputs
    	$form.find('input[name="Quantity"]').remove();
    	// Append it to the form
		$form.append('<input name="Quantity" type="hidden" value="' + $qty.val() + '"/>');
		$qty = $form.find('input[name="Quantity"]');
		itemID = $pspContainer.attr('id');
    }
    if ($qty.length === 0 || isNaN($qty.val()) || parseInt($qty.val(), 10) === 0) {
        $qty.val('1');
    }
    return Promise.resolve($.ajax({
        type: 'POST',
        url: util.ajaxUrl(util.appendParamToURL(Urls.addProduct, 'itemID', itemID)),
        data: $form.serialize()
    })).then(function (response) {
        // handle error in the response
        if (response.error) {
        	availability.updateContainer(response);
            throw new Error(response.error);
        } else {
            return response;
        }
    });
};

/**
 * @description Handler to handle the add to cart event
 */
var addToCart = function (e) {
    e.preventDefault();
    var $form = $(this).closest('form');

    validator.initForm($form);
    if (!$form.valid() || !validateFormFields()) {
    	return false;
    }

    addItemToCart($form).then(function (response) {
        var $uuid = $form.find('input[name="uuid"]');
        if (($uuid.length && $uuid.val().length) || $('.sfl-quickview').length) {
            page.refresh();
        } else {
            // do not close quickview if adding individual item that is part of product set
            // @TODO should notify the user some other way that the add action has completed successfully
            if (!$(this).hasClass('sub-product-item')) {
                dialog.close();
            }

            if($('#gcAmountselect').length > 0 ){
            	$("#gcAmount").val($("#gcAmountselect option:first").val());
            	$("#gcAmountselectSelectBoxItText").text($("#gcAmountselect option:first").text());
            }

    		if (typeof dataLayer !== "undefined") {
    			var isProductSet = $('#pdpMain div.product-set').length ? true : false;
                var transactionProducts = [];
                var dlPid, dlSku, dlProductName, dlCategoryID, dlPrice, dlVariant, dlQuantity, dlSize, dlSeasonalCollection, dlColorway, dlItemAtFullPrice, dlAvailability, dlDiscount, dlMonogramming, dlBVAverage, dlMonogramStyle, dlMonogramFont, dlMonogramChars, dlMonogramColor;
                var ecomDetail = null;
                for (var i = 0; i < dataLayer.length; i++) {
                    if (dataLayer[i].event == 'ecomDetail') {
                        ecomDetail = dataLayer[i];
                        break;
                    }

                }
    			var producttiles = $('.product-tile');
                for(i=0;i<producttiles.length;i++){
                	console.log(producttiles.eq(i).attr('data-cgid'));
                }
                if (ecomDetail && 'ecommerce' in ecomDetail
                        && 'detail' in ecomDetail.ecommerce
                        && 'products' in ecomDetail.ecommerce.detail
                        && ecomDetail.ecommerce.detail.products.length
                        && 'category' in ecomDetail.ecommerce.detail.products[0]) {
                    dlCategoryID = ecomDetail.ecommerce.detail.products[0].category;
                    dlPid = ecomDetail.ecommerce.detail.products[0].id;
                    dlProductName = ecomDetail.ecommerce.detail.products[0].name
                } else if (typeof cmProductName !== "undefined") {
                    dlProductName = cmProductName;
                    dlCategoryID = cmCategoryID;
                }
                var form = $('.pdpForm');
                var standardPrice = $('#pdpMain .product-detail .price-standard').length > 0;
                dlQuantity = parseInt($('.quantity-dropdown .selectboxit').find(':selected').text());
    		    dlQuantity = dlQuantity > 0 ? dlQuantity : 1;
                if (isProductSet) {
                    var productSetItem = $(this).closest('div[class^="product-set-item"]');
                    var pidAttr = productSetItem.attr("id");
                    dlSku = $(this).parent().find('input[name="pid"]').val();
                    dlPid = pidAttr.substr(pidAttr.indexOf("-") + 1);
                    dlProductName = $.trim(productSetItem.find('.product-name').text());
                    dlCategoryID = $.trim(productSetItem.find('input[name="cgid"]').val());
                    dlPrice = ($.trim(productSetItem.find('.price-sales').html()).replace("$", ""));
                    dlVariant = $.trim(productSetItem.find(".product-variations .swatches .selected .title").text());
                    dlSize = $.trim(productSetItem.find(".product-variations .swatches.size .selected a").text());
                    // dlSeasonalCollection = '';
                    dlColorway = $.trim(productSetItem.find(".product-variations .swatches.Color .selected a").attr('title'));
                    dlItemAtFullPrice = $.trim(productSetItem.find(".product-price span").html()).replace("$","");
                    dlAvailability = $.trim(productSetItem.find('.availability-msg').attr('data-availible'));
                    // dlDiscount = '';
                    dlMonogramming = '';
                    dlBVAverage = $.trim(productSetItem.find("#BVInlineRatings").text());
                }else {
                    dlSku = $("#pid").val();
                    dlPid = dlPid || $('#product-content').find('div[data-master]').attr('data-master');
                    dlProductName = $.trim($("#product-content .product-name").text());
                    dlCategoryID = $('#pdpMain').attr('data-category');
                    dlPrice = $("#pdpMain .product-detail .price-sales").eq(0).text().split(' ')[0].trim().replace('$', '');
                    dlVariant = $.trim($(".product-variations .swatches .selected .title").text());
                    dlSize = $(".product-variations .swatches.size .selected a").length > 0 ? $.trim($(".product-variations .swatches.size .selected a").text()) : '';
                    // dlSeasonalCollection = '';
                    dlColorway = $.trim($(".product-variations .swatches.Color .selected a").attr('title'));
                    dlItemAtFullPrice = $('#pdpMain').find('.price-standard').length > 0 ? 'N' : 'Y'; // full price?
                    if($(".availability-msg").length > 0){
                    	dlAvailability = $.trim($(".availability-msg").attr('data-availible'));
                    } else if ($(".availability").length > 0) {
                    	dlAvailability = $(".availability").text().trim();
                    }
                    dlDiscount = standardPrice ? parseFloat($('#pdpMain .product-detail .price-standard').eq(0).text().replace('$', '') - $('#pdpMain .product-detail .price-sales').eq(0).text().trim().replace('$','')).toFixed(2) : '';
                    dlMonogramming = $('#pdpMain .monogram-wrapper').length > 0 ? 'Yes' : 'No';
                    dlBVAverage = $.trim($('.BVRRRatingOverall .BVRRRatingNormalImage img').eq(0).attr('title'));
                    if (dlMonogramming ==='Yes') {
                    	dlMonogramStyle = $('#pdpMain .monogram-style-tile.selected .monogram-style-name').text().trim();
                    	dlMonogramFont = $('#pdpMain .monogram-font.selected span').text().trim();
                    	dlMonogramChars = '';
                    	dlMonogramColor = $('#pdpMain .monogram-color-swatch.selected').data('color-config').colorName;
                		$('.monogram-text-input-field').each(function () {
                    		var val = $(this).val();
                    		dlMonogramChars += val;
                    	});
                    }
                }

                transactionProducts.push({
                    "brand" : 'kate',
                    "sku" : dlSku,
                    "id" : dlPid,
                    "name" : dlProductName,
                    "category" : dlCategoryID,
                    "price" : dlPrice,
                    "quantity" : dlQuantity,
                    "variant" : dlVariant,
                    "dimension5" : dlSize, //product size
                    //"dimension9" : dlSeasonalCollection, // seasonal collection the product is part of
                    "dimension10" : dlColorway, //colorway
                    "dimension11" : dlItemAtFullPrice, //Was the item at full price
                    "dimension12" : dlAvailability, //availability of product
                    "dimension13" : dlDiscount, //discount amount if applicable
                    "dimension14" : dlMonogramming, //was monogramming applied
                    //"dimension15" : dlGiftWrap, //was gift wrap selected
                    "dimension16" : dlBVAverage, //bv average star rating
                    "dimension33" : dlMonogramStyle === undefined ? '' : dlMonogramStyle,
                    "dimension34" : dlMonogramFont === undefined ? '' : dlMonogramFont,
                    "dimension35" : dlMonogramChars === undefined ? '' : dlMonogramChars,
                    "dimension36" : dlMonogramColor === undefined ? '' : dlMonogramColor
                });
                dataLayer.push(app.datalayer.getEvent("event","ecomAdd", "ecommerce", " ", "add", transactionProducts));
    		}
        }
        minicart.show(response);
        eGiftCardCleanFields();
        monogramReset();

    }.bind(this));
};

var eGiftCardCleanFields = function () {
	var vgcRecipientName = $('.pdpForm input[name="vgcRecipientName"]');
	var vgcRecipientEmail = $('.pdpForm input[name="vgcRecipientEmail"]');
	var vgcFromName = $('.pdpForm input[name="vgcFromName"]');
	var vgcRecipientEmailConfirm = $('.pdpForm input[name="vgcRecipientEmailConfirm"]');
	var vgcGiftCardMessage = $('.pdpForm textarea[name="vgcGiftCardMessage"]');
	
	if(typeof vgcRecipientName != 'undefined'){vgcRecipientName.val('');}
	if(typeof vgcRecipientEmail != 'undefined'){vgcRecipientEmail.val('');}
	if(typeof vgcFromName != 'undefined'){vgcFromName.val('');}
	if(typeof vgcRecipientEmailConfirm != 'undefined'){vgcRecipientEmailConfirm.val('');}
	if(typeof vgcGiftCardMessage != 'undefined'){vgcGiftCardMessage.val('');}

    var giftCardPDPInfo = $('.js-is-gift-card-pdp-form');
    if (giftCardPDPInfo.length > 0) {
        // remove validation checkmarks
        var validator = $('form.pdpForm').validate();
        validator.resetForm();

        // restore float labels
        giftCardPDPInfo.find('.has-float-label label').css({ opacity: 1 });
    }
};

/**
 * @description Handler to handle the add all items to cart event
 */
var addAllToCart = function (e) {
    e.preventDefault();
    var $productForms = $('#product-set-list').find('form').toArray();
    Promise.all(_.map($productForms, addItemToCart))
        .then(function (responses) {
            dialog.close();
            // show the final response only, which would include all the other items
            minicart.show(responses[responses.length - 1]);
        });
    if (typeof dataLayer !== "undefined") {var productData = $('.product-variations');
	    var transactionProducts = [];
	    var pidAttr, dlSku, dlPid, product, form, dlProductName, dlCategoryID, dlPrice, dlQuantity;
	    for(i=0;i<productData.length;i++){
	    	pidAttr = productData.eq(i);
		    dlSku = pidAttr.attr('data-vid');
		    dlPid = pidAttr.attr('data-master');
		    product = pidAttr.closest('.product-set-item');
		    form = pidAttr.closest('form');
		    dlProductName = $.trim(product.find('.item-name').text());
		    dlCategoryID = form.find('input[name="cgid"]').val();
		    dlPrice = ($.trim(product.find('.price-sales').html()).replace("$", ""));
		    dlQuantity = parseInt(form.find('.quantity-dropdown .selectboxit').find(':selected').text());
		    dlQuantity = dlQuantity > 0 ? dlQuantity : 1;
		    transactionProducts.push({ "sku" : dlSku, "id" : dlPid, "name" : dlProductName, "category" : dlCategoryID, "price" : dlPrice, "quantity" :dlQuantity});
	    }
		dataLayer.push(app.datalayer.getEvent("event","ecomAdd", "ecommerce", " ", "add", transactionProducts));
    }
};

/*
 * @function
 * @description Since there are multiple elements with the add-to-cart ID on the page,
 *  we need to handle each of them individually so that all of the .availability-msg
 *  element's texts aren't concatenated.
 */
function setAddToCartTitle() {
    $('button#add-to-cart').each( function(i, e) {
        var text = $(e).parents('.product-add-to-cart').find('.availability-msg').text().trim();
        $(e).attr('title', text);
    });
}

/**
 * @function
 * @description Binds the click event to a given target for the add-to-cart handling
 */
module.exports = function () {
    setAddToCartTitle();
    $('body').off('click','.add-to-cart').on('click', '.add-to-cart', addToCart);
    $('#add-all-to-cart').on('click', addAllToCart);
};

},{"../../dialog":34,"../../minicart":43,"../../page":44,"../../storeinventory/product":78,"../../util":82,"../../validator":83,"./availability":56,"lodash":5,"promise":6}],56:[function(require,module,exports){
'use strict';

var ajax =  require('../../ajax'),
    util = require('../../util');

var updateContainer = function (data) {
	var $container = typeof data.itemID != 'undefined' ? $('#' + data.itemID) : $('#pdpMain'),
		$availabilityContainer = $container.find('.availability'),
		$availabilityMsg = $availabilityContainer.find('.availability-msg'),
		$addToCart = $container.find('.pdpForm #add-to-cart'),
		$addAllToCart = $('#add-all-to-cart'),
		isQuickView = $('#QuickViewDialog').length,
		isEditItem = $('.ui-dialog_update-item').length,
		message; // this should be lexically scoped, when `let` is supported (ES6)

    if (!$availabilityMsg.length) {
    	$availabilityMsg = $("<div>", {"class": "availability-msg"});
    	$availabilityContainer.append($availabilityMsg);
    }
    if (!data) {
        $availabilityMsg.html(Resources.ITEM_STATUS_NOTAVAILABLE);
        $addToCart.attr('disabled', 'disabled');
        $container.find('#pdpQtySelectSelectBoxIt .selectboxit-text').text('0');
        $container.find('#pdpQtySelectSelectBoxItOptions').remove();
        return;
    }
    $availabilityMsg.empty();
    // Look through levels ... if msg is not empty, then create span el
    if (data.levels.IN_STOCK > 0) {
        if (data.levels.PREORDER === 0 && data.levels.BACKORDER === 0 && data.levels.NOT_AVAILABLE === 0) {
            // Just in stock
            message = Resources.IN_STOCK;
        } else {
            // In stock with conditions ...
            message = data.inStockMsg;
        }
        $availabilityMsg.append('<p class="in-stock-msg">' + message + '</p>');
    }
    if (data.levels.PREORDER > 0) {
        if (data.levels.IN_STOCK === 0 && data.levels.BACKORDER === 0 && data.levels.NOT_AVAILABLE === 0) {
            message = Resources.PREORDER;
        } else {
            message = data.preOrderMsg;
        }
        $availabilityMsg.append('<p class="preorder-msg">' + message + '</p>');
    }
    if (data.levels.BACKORDER > 0) {
        if (data.levels.IN_STOCK === 0 && data.levels.PREORDER === 0 && data.levels.NOT_AVAILABLE === 0) {
            message = Resources.BACKORDER;
        } else {
            message = data.backOrderMsg;
        }
        $availabilityMsg.append('<p class="backorder-msg">' + message + '</p>');
    }
    if (data.inStockDate !== '') {
        $availabilityMsg.append('<p class="in-stock-date-msg">' + String.format(Resources.IN_STOCK_DATE, data.inStockDate) + '</p>');
    }
    if (data.levels.NOT_AVAILABLE > 0) {
        if (data.levels.PREORDER === 0 && data.levels.BACKORDER === 0 && data.levels.IN_STOCK === 0) {
            message = Resources.NOT_AVAILABLE;
        } else {
            message = Resources.REMAIN_NOT_AVAILABLE;
        }
        if (data.cartMaxQuantity.QuantityLeft == 0) {
        	$availabilityMsg.append('<p class="not-available-msg">' + message + '</p>');
        	$addToCart.attr('disabled', 'disabled');
        	$container.find('#pdpQtySelectSelectBoxIt .selectboxit-text').text('0');
        	$container.find('#pdpQtySelectSelectBoxItOptions').remove();
        }
    }
    if (!isEditItem && typeof data.error != 'undefined' && data.error == 'out_of_stock' && data.cartMaxQuantity.QuantityLeft == 0) {
    	  message = Resources.PDP_NOT_AVAILABLE;
    	  $availabilityMsg.append('<p class="not-available-msg">' + message + '</p>');
    	  $addToCart.attr('disabled', 'disabled');
    	  $container.find('#pdpQtySelectSelectBoxIt .selectboxit-text').text('0');
          $container.find('#pdpQtySelectSelectBoxItOptions').remove();
    }
    // RR-467 - If the user is approaching the quantity limit,
    // limit them to the max amount that can be added.
    // If the user is editing an item already in cart, we don't need to enforce the max quantity rule.
    if (!isEditItem && typeof data.cartMaxQuantity != 'undefined') {
		if (data.cartMaxQuantity.OverQuantityLimit && data.cartMaxQuantity.QuantityLeft > 0 && data.cartMaxQuantity.QuantityLeft < $container.find('select[name="Quantity"]').val()) {
			$availabilityMsg.append('<p class="max-cart-quantity-msg">' + data.cartMaxQuantity.quantityMessageAvailable + '</p>');
		} else if (data.cartMaxQuantity.OverQuantityLimit && data.cartMaxQuantity.QuantityLeft == 0 && !(!isEditItem && typeof data.error != 'undefined' && data.error == 'out_of_stock' && data.cartMaxQuantity.QuantityLeft == 0)) {
			$availabilityMsg.append('<p class="max-cart-quantity-msg">' + data.cartMaxQuantity.quantityMessageMax + '</p>');
			$container.find('#pdpQtySelectSelectBoxIt .selectboxit-text').text('0');
	        $container.find('#pdpQtySelectSelectBoxItOptions').remove();
	        $addToCart.attr('disabled', 'disabled');
	    }
    }
    // Ensure that PDP add all button is disabled if one item is not available
    if ($addAllToCart.length) {
    	if (!$('.pdpForm #add-to-cart:disabled').length) {
    		$addAllToCart.prop('disabled', false);
    	} else {
    		$addAllToCart.prop('disabled', true);
    	}
    }
    if (data.status == "NOT_AVAILABLE") {
    	message = 'out of stock';
  	  	$availabilityMsg.append('<p class="not-available-msg">' + message + '</p>');
    }
};

var getAvailability = function () {
	// Don't need to check quantity when adding to cart.
	if ($('.ui-dialog_update-item').length) {
		return;
	}
	var $this = $(this);
	var $pspContainer = $this.parents('.product-set-item');
	var itemID = '';
	var pid = $('#pid');
	if ($pspContainer.length) {
		itemID = $pspContainer.attr('id');
		pid = $pspContainer.find('#pid');
	}
    ajax.getJson({
        url: util.appendParamsToUrl(Urls.getAvailability, {
            pid: pid.first().val(),
            Quantity: $this.val(),
            itemID: itemID
        }),
        callback: updateContainer
    });
};

module.exports = {
	init: function () {
		$('#pdpMain').on('change', 'select[name="Quantity"]', getAvailability);
	},
	updateContainer: updateContainer
};

},{"../../ajax":26,"../../util":82}],57:[function(require,module,exports){
'use strict';
var dialog = require('../../dialog');
var util = require('../../util');
var qs = require('qs');
var url = require('url');
var _ = require('lodash');

var zoomMediaQuery = matchMedia('(min-width: 960px)');
var $cache = {};
	$cache.pdpMain = $('#pdpMain');
	$cache.productThumbnailTiles = $cache.pdpMain.find('#thumbnails .thumb');

/**
 * @description Enables the zoom viewer on the product detail page
 * @param zmq {Media Query List}
 */
function loadZoom (zmq) {
    var $imgZoom = $('#pdpMain .main-image'),
        hiresUrl;
    if (!zmq) {
        zmq = zoomMediaQuery;
    }
    if ($imgZoom.length === 0 || dialog.isActive() || util.isMobile() || !zoomMediaQuery.matches) {
        // remove zoom
        $imgZoom.trigger('zoom.destroy');
        return;
    }
    hiresUrl = $imgZoom.attr('href');

    if (hiresUrl && hiresUrl !== 'null' && hiresUrl.indexOf('noimagelarge') === -1 && zoomMediaQuery.matches) {
        $imgZoom.zoom({
            url: hiresUrl
        });
    }
}

zoomMediaQuery.addListener(loadZoom);

/**
 * @description Sets the main image attributes and the href for the surrounding <a> tag
 * @param {Object} atts Object with url, alt, title and hires properties
 */
function setMainImage (atts, e) {
    var $this = $(e.target).closest('.thumb');
    // Get selected image src
    var src = $this.find('img').attr('src');

    if (!dialog.isActive()) {
        $('.thumb').removeClass('selected');
        $this.addClass('selected');
        if ($('.product-col-1').hasClass('product-set')) {
            $('.product-col-1 .primary-image').attr('src', atts.url);
        } else {
            // Create a new instance of CloudZoom
            var cz = $('.cloudzoom').data('CloudZoom');
            // Load a new small image and zoom image into it:
            var smallImg = src.replace('$productThumbnail$', '$large$');
            var zoomImg = smallImg.replace('$large$', '$fullsize$');
            // Load new images into CloudZoom instance
            cz.loadImage(smallImg, zoomImg);
        }
    } else {
        var selectedImgSrc = src.replace('$productThumbnail$', '$large$');
        var $productPrimaryImg = $('#pdpMain .product-primary-image img.primary-image');
        $productPrimaryImg.attr('src', selectedImgSrc);
        $('#pdpMain #thumbnails .thumb').removeClass('selected');
        $this.addClass('selected');
    }

    updatePinButton(atts.url);
    if (!dialog.isActive() && !util.isMobile()) {
        $('#pdpMain .main-image').attr('href', atts.hires);
    }
}
function thumbnailCarousel(aligment) {
    $('.thumbnail-overlay').jcarousel({
        auto: 0,
        vertical: aligment,
        scroll:1
    });
    $('.jcarousel-control-prev')
    .on('jcarouselcontrol:active', function() {
        $(this).removeClass('inactive');
    })
    .on('jcarouselcontrol:inactive', function() {
        $(this).addClass('inactive');
    })
    .jcarouselControl({
        target: '+=1'
    });

    $('.jcarousel-control-next')
    .on('jcarouselcontrol:active', function() {
        $(this).removeClass('inactive');
    })
    .on('jcarouselcontrol:inactive', function() {
        $(this).addClass('inactive');
    })
    .jcarouselControl({
        target: '-=1'
    });
}
function thumbnailCarouselReload() {
    var isVerticalCarousel = true;
    if (util.getViewport() < 960 || dialog.isActive()) {
        isVerticalCarousel = false;
    }
    $('.thumbnail-overlay').jcarousel('reload', {
        auto: 0,
        vertical: isVerticalCarousel,
        scroll:1
    });
}
function jcarouselEvents() {
    //click functions to manually change main product image on carousel arrow click since arrows are
    //meant to control thumbnails
    $('.product-thumbnails .jcarousel-control-next').on('click',function(e){
        if(util.getViewport() < 961 && util.getViewport() > 481){
            var thumbs = $('li.thumb');
            var activeThumb = thumbs.filter('.selected').index();
            if(activeThumb == 0){
                return
            }
            var newActiveThumb = activeThumb - 1;
            thumbs.eq(activeThumb).removeClass('selected');
            thumbs.eq(newActiveThumb).addClass('selected');
            $('li.thumb.selected').click();
        }
    });
    $('.product-thumbnails .jcarousel-control-prev').on('click',function(e){
        if(util.getViewport() < 961 && util.getViewport() > 481){
            var thumbs = $('li.thumb');
            var activeThumb = thumbs.filter('.selected').index();
            if(activeThumb == (thumbs.length - 1)) {
                return;
            }

            var newActiveThumb = activeThumb + 1;
            thumbs.eq(activeThumb).removeClass('selected');
            thumbs.eq(newActiveThumb).addClass('selected');
            $('li.thumb.selected').click();
        }
    });
}
function updatePinButton (imageUrl) {
    var pinButton = document.querySelector('.share-icon[data-share=pinterest]');
    if (!pinButton) {
        return;
    }
    var newUrl = imageUrl;
    var pdpPrimaryImageElement = document.querySelector('#pdpMain .primary-image');
    if (!pdpPrimaryImageElement) {
        return;
    }
    if (!imageUrl) {
        newUrl = pdpPrimaryImageElement.getAttribute('src');
    }
    var href = url.parse(pinButton.href);
    var query = qs.parse(href.query);
    query.media = url.resolve(window.location.href, newUrl);
    query.url = window.location.href;
    var newHref = url.format(_.extend({}, href, {
        query: query, // query is only used if search is absent
        search: qs.stringify(query)
    }));
    pinButton.href = newHref;
}

/**
 * @description Replaces the images in the image container, for eg. when a different color was clicked.
 */
function replaceImages () {
    var $newMainImage = $('#update-images .product-imagery-container'),
        $newThumbnails = $('#update-images #thumbnails'),
        $mainImage = $('#pdpMain .product-imagery-container'),
        $thumbnails = $('#pdpMain #thumbnails');
    if ($newMainImage.length === 0 || $newThumbnails.length === 0) { return; }

    $mainImage.html($newMainImage.html());
    $thumbnails.html($newThumbnails.html());
    $newMainImage.remove();
    $newThumbnails.remove();
    loadZoom();
    var isVerticalCarousel = true;
    if (util.getViewport() < 960 || dialog.isActive()) {
        isVerticalCarousel = false;
    }
    thumbnailCarousel(isVerticalCarousel);
}

/* @module image
 * @description this module handles the primary image viewer on PDP
 **/

/**
 * @description by default, this function sets up zoom and event handler for thumbnail click
 **/
module.exports = function () {
    if (dialog.isActive() || util.isMobile()) {
        $('#pdpMain .main-image').removeAttr('href');
    }
    updatePinButton();
    //loadZoom();

    // Initialize CloudZoom
    if (!dialog.isActive()) {
        //CloudZoom.quickStart();
    }
    // handle product thumbnail click event
    $('#pdpMain').on('click', '.thumb', function (e) {
        // switch indicator
        e.preventDefault();
        setMainImage($(this).find('.productthumbnail').data('lgimg'), e);
    });

    jcarouselEvents();

};
module.exports.loadZoom = loadZoom;
module.exports.jcarouselEvents = jcarouselEvents;
module.exports.setMainImage = setMainImage;
module.exports.replaceImages = replaceImages;
module.exports.thumbnailCarousel = thumbnailCarousel;
module.exports.thumbnailCarouselReload = thumbnailCarouselReload;

},{"../../dialog":34,"../../util":82,"lodash":5,"qs":16,"url":23}],58:[function(require,module,exports){
'use strict';

var dialog = require('../../dialog'),
	giftcard = require('../../giftcard'),
    productStoreInventory = require('../../storeinventory/product'),
    tooltip = require('../../tooltip'),
    util = require('../../util'),
    addToCart = require('./addToCart'),
    availability = require('./availability'),
    image = require('./image'),
    productSet = require('./productSet'),
    recommendations = require('./recommendations'),
    selectBoxIt = require('../../selectboxit'),
    variant = require('./variant');

var $cache = {
    productThumbnailTiles: $('#pdpMain').find('#thumbnails .thumb'),
    pdpMain: $('#pdpMain')
};
/**
 * @description Initialize product detail page with reviews, recommendation and product navigation.
 */
function initializeDom() {
    recommendations();
    tooltip.init();
    var isVerticalCarousel = true;
    if (util.getViewport() < 960 || dialog.isActive()) {
        isVerticalCarousel = false;
    }
    image.thumbnailCarousel(isVerticalCarousel);
}
function changeTumb() {
	var attrUrl = '';
	var res = '';
	var img;
	$('#thumbnail-carousel .thumb').each(function(){
		img = $(this).find('img');
		attrUrl = img.attr('src');
		res = attrUrl.replace('productThumbnail', 'large');
		img.attr('src',res);
	})
	$('#thumbnail-carousel').slick({
    	dots: true,
		infinite: true,
		centerMode: true,
        centerPadding: '40px',
		speed: 300,
		slidesToShow: 1,
		arrows: false
	});
}

function productThumbnailClick(e) {
    e.preventDefault();
    if (!$('.product-col-1').hasClass('product-set')) {
        $cache.productThumbnailTiles.removeClass('selected');

        var $this = $(e.target).closest('.thumb');

        $this.addClass('selected');

        // Create a new instance of CloudZoom
        var cz = $(".cloudzoom").data("CloudZoom");

        // Get selected image src
        var src = $this.find('img').attr('src');

        // Load a new small image and zoom image into it:
        var smallImg = src.replace("$productThumbnail$", "$large$");
        var zoomImg = smallImg.replace("$large$", "$fullsize$");

        // Load new images into CloudZoom instance
        cz.loadImage(smallImg, zoomImg);
    }
}

/**
 * @description Initialize event handlers on product detail page
 */
function initializeEvents() {

    addToCart();
    availability.init();
    variant();
    image();
    productSet();
    giftcard.init();
    util.smartResize(function () {
        image.thumbnailCarouselReload()
    });

    if (SitePreferences.STORE_PICKUP) {
        productStoreInventory.init();
    }
    $cache.pdpMain.on('click', '.sizeguidelink', function (e) {
        e.preventDefault();
        var width = (window.innerWidth < 480) ? (window.innerWidth - 40).toString() : '450';
        dialog.open({
            url: this.href,
            options: {
            	'width': width,
                dialogClass: "sizeguide-modal"
            }
        });

    });
    // Add to Wishlist and Add to Gift Registry links behaviors
    $cache.pdpMain.on('click', '[data-action="wishlist"], [data-action="gift-registry"]', function () {
        var data = util.getQueryStringParams($('.pdpForm').serialize());
        if (data.cartAction) {
            delete data.cartAction;
        }
        var url = util.appendParamsToUrl(this.href, data);
        this.setAttribute('href', url);
    });

    /*Product Tablet Share button*/
    $cache.pdpMain.on ('click', '.sub-header', function(e){
    	$(this).toggleClass('active');
    });
    // product options
    $cache.pdpMain.on('change', '.product-options select', function () {
        var salesPrice = $cache.pdpMain.find('.product-add-to-cart .price-sales');
        var selectedItem = $(this).children().filter(':selected').first();
        salesPrice.text(selectedItem.data('combined'));
    });

    $cache.pdpMain.on('click', '.select-quantity', function(){
        if(navigator.userAgent.match(/i(Phone|Pad)/i)) {
            $('.selectboxit-options.dropdown-menu').hide();
        }
    });

    // prevent default behavior of thumbnail link and add this Button
    $cache.pdpMain.on('click', '.thumbnail-link', function (e) {
        e.preventDefault();
    });

    $cache.pdpMain.on('click', '.unselectable-overlay', function (e) {
        e.preventDefault();
        $(this).closest('li').find('a').click();
    });

    $('.size-chart-link a').on('click', function (e) {
        e.preventDefault();
        dialog.open({
            url: $(e.target).attr('href')
        });
    });

    $cache.pdpMain.on("click", ".facebook-share", function(e) {
        FB.ui({
            method: 'share',
            href: $(e.target).attr('data-url'),
        }, function(response){});
    });
    $cache.pdpMain.on("click", ".twitter-share a", function(e) {
    	e.preventDefault();
    	window.open(this.href, "Twitter share", "width=800, height=255");
        return false;
    });

    $('body').on('click','#fullscreen-zoom-hopup', function(e) {
        e.preventDefault();

		// Create Dialog
        var params = {};


		//Potentially add monogramming option parameters
		/*var $monogrammingContainer = pdpMain.find('.monogram-container');

		if($monogrammingContainer.length){

			var imgOptions = $monogrammingContainer.data('imageOptions'),
				personalizationType = $monogrammingContainer.find('ul.monogram-styles li.monogram-style-tile.selected').data('style-config').personalizationType;

			var valid = (imgOptions['$ftype'] != null &&
				imgOptions['$fstyle'] !=  null &&
				imgOptions['$dots'] != null &&
				(imgOptions['$chr1'] != null || imgOptions['$chr2'] != null || imgOptions['$chr3'] != null));

			if($monogrammingContainer.find('li.monogram-color-swatch').length){
				valid = valid && imgOptions['$color'] != null;
			}

			if(valid){

				var keys = Object.keys(imgOptions),
					newImgOptions = {};

				//add the prefix to make it easy on the serverside to grab all of the right parameters
				for(var i = 0; i < keys.length;i++){
					var key = "imgOption_"+keys[i];

					newImgOptions[key] = imgOptions[keys[i]];
				}

				newImgOptions["personalizationType"] = personalizationType;

				params = newImgOptions;
			}
		}*/


        var url = util.appendParamsToUrl($(this).attr('href'),params);
        dialog.open({
            url: url,
            options: {
                width: 895,
                dialogClass: 'fullScreen'
            },
            callback: function () {

                var dialogContainer = $('#dialog-container');
                var productImage = dialogContainer.find($('.product-primary-image img'));
                var downloadLink = $('#fullscreen-download a');
                dialogContainer.find($('.ui-dialog-titlebar-close').addClass('fullscreen-zoom-close'));

                var replaceStr = '$s7fullsize$';
				/*if($monogrammingContainer.length){
					replaceStr = "$productThumbnail$";
				}*/

                $('.thumb a').click(function(e) {
                    e.preventDefault();
                    var imageSrc = $(this).attr('href');

                    var fullScreenImg = imageSrc.replace(replaceStr, '$fullscreen$');
                    productImage.attr('src', fullScreenImg);

					// Append Scene7 param force download
                    fullScreenImg += '&download';
                    downloadLink.attr('href', fullScreenImg);
                    $(e.target).closest('li').addClass('selected').siblings().removeClass('selected');
                });
                if($('#dialog-container #thumbnail-carousel li.thumb').length > 4){
	                $('#dialog-container #thumbnail-carousel').slick({
	                	dots: false,
	            		infinite: false,
	            		speed: 300,
	            		slidesToShow: 4,
	            		arrows: true,
	            		vertical: true
	            	});
                }
                var $list = dialogContainer.find('.thumbnail-overlay');

                var next = dialogContainer.find('#next');
                var prev = dialogContainer.find('#prev');


                var $first = $('li:first', $list),
                    $last = $('li:last', $list);

                next.click(function (e) {
                    e.preventDefault();
                    var $next, $selected = dialogContainer.find(('.selected'));
                    $next = $selected.next('li').length ? $selected.next('li') : $first;
                    $selected.removeClass('selected');
                    $next.addClass('selected');
                    var url = $next.find('a').attr('href');
                    /*if ($monogrammingContainer.length){
                        url = url.replace(replaceStr,'$fullscreen$');
                    }*/

                    productImage.attr('src', url);
                    downloadLink.attr('href', url);

                    if ($last.hasClass('selected')) {
                        $('.jcarousel-next').trigger('click');
                    }
                });

                prev.click(function () {
                    var $prev, $selected = dialogContainer.find(('.selected'));
                    $prev = $selected.prev('li').length ? $selected.prev('li') : $last;
                    $selected.removeClass('selected');
                    $prev.addClass('selected');

                    var url = $prev.find('a').attr('href');

                    /*if ($monogrammingContainer.length){
                        url = url.replace(replaceStr,'$fullscreen$');
                    }*/

                    productImage.attr('src', url);
                    downloadLink.attr('href', url);

                    if ($first.hasClass('selected')) {
                        $('.jcarousel-prev').trigger('click');
                    }
                });

                // clear dialog on close
                $('.ui-dialog.fullScreen .ui-icon-closethick').click(function () {
                    $('.ui-dialog.fullScreen .dialog-content').empty();
                });

                var pdpMainCarousel = $('#pdpMain #thumbnail-carousel .selected');
                if (pdpMainCarousel.length) {
                    var selectedIndex = pdpMainCarousel.index();
                    var correspondingFSZoomImage = $list.find('li').eq(selectedIndex).find('a');
                    if (correspondingFSZoomImage.length) {
                        correspondingFSZoomImage.click();
                    }
                }
            }
        });
    });
    $(window).resize(function(){
    	$('#last-visited .slick-slider').slick('refresh');
        $('.pdp-recommendations .product-listing .slick-slider').slick('refresh');
    });

    if (util.getViewport() < 481){
    	changeTumb();
	 } else {
        var carousel = $('#thumbnail-carousel');
        if (carousel.hasClass('slick-initialize')) {
            carousel.slick('unslick');
        }
	 }

    $(window).resize(function(){
        setTimeout(function () {
            if (util.getViewport() < 481) {
            	changeTumb()
            } else {
                var carousel = $('#thumbnail-carousel');
                if (carousel.hasClass('slick-initialize')) {
                    carousel.slick('unslick');
                }
            }
        }, 100);
    });

    //True Fit
    if (typeof tfc !== 'undefined'){
        tfc.event('tfc-fitrec-product', 'success', function(context) {
            fitrec_selectsize(context.fitRecommendation.size, context.fitRecommendation.score, false, context.fitRecommendation.id);
            $('.registry, .wishlist').removeClass('blocked').addClass('wl-action');
            if($(".item-" + context.fitRecommendation.id + " #va-size").val() != ''){
                $('#add-to-cart').removeAttr('disabled');
            }
        });
    }

    function fitrec_selectsize(size, score, usesDropDown, productID){
        //True fit size update
        if($("#item-" + productID).length > 0){
            //Drop Down for size
            if(!$("#item-" + productID).hasClass("tf-size-auto-selected")){
                $("#item-" + productID + " #va-size option:selected").removeAttr("selected");
                $("#item-" + productID + " #va-size option[value*='size=" + size + "']").attr('selected', 'selected');
                //Add class so user can overwrite selection
                $("#item-" + productID).addClass("tf-size-auto-selected");
                //Refresh selectBoxIt
                var selectBox = $("#item-" + productID + " #va-size").selectBoxIt().data("selectBoxIt");
                selectBox.refresh();
                $("#item-" + productID + " #va-size").trigger('change');
            }
        }
        else{
            //Links for size
            if($('.product-variations .size .selected').length < 1){
                $('.size-link-' + size).click();
            }
        }
    }

    // initialize eGC image hidden attributes (only required on page load)
    var eGCImageElement = $('input#gcImage');
    var eGCStorefrontImageElement = $('input#gcStorefrontImage');
    var selectedColor = $('ul.swatches.Color li.selected a');
    if (eGCImageElement.length && selectedColor.length){
    	eGCImageElement.val(selectedColor.data('src'));
    }
    if (eGCStorefrontImageElement.length && selectedColor.length) {
    	eGCStorefrontImageElement.val(selectedColor.attr('href'));
    }

    // init Slick slider when pdp-recommendation has been loaded into page
    document.addEventListener('pdpRecommendationOnLoad', function() {
        initializeSlick($('.pdp-recommendations .product-listing'));
    });

    $cache.productThumbnailTiles.click(productThumbnailClick);
}

function addToCarousel(parentDiv){
	// Pass parent element
    var carouselItem = parentDiv.find('ul');
    var thumbCount = carouselItem.find($('li'));

	// Shift thumbs to fit container 4 thumbs
    if (thumbCount.length == 4){
        thumbCount.addClass('shift-left');
    }

	// If we have 4 or more thumbs init carousel
    if (carouselItem.length && thumbCount.length >= 4) {
    	carouselItem.jcarousel({
            scroll:1,
            itemFallbackDimension: 100
        });

		// Swipe functionality
        carouselItem.touchwipe({
            wipeLeft: function() {
                carouselItem.jcarousel('next');
            },
            wipeRight: function() {
                carouselItem.jcarousel('prev');
            },
            preventDefaultEvents: false
        });
    }
}

function initializeSlick(parentDiv){
    // Pass parent element
    var carouselItem = parentDiv.find('ul');
    var thumbCount = carouselItem.find($('li'));

    if(carouselItem.hasClass('slick-slider')){
        carouselItem.slick('unslick');
    }

    carouselItem.slick({
        infinite: true,
        dots: false,
        slide: 'li',
        responsive: [
            {
                breakpoint: 99999,
                settings: thumbCount.length < 4 ? "unslick" : {slidesToShow: 4}
            },
            {
                breakpoint: 480,
                settings: thumbCount.length <= 2 ? "unslick" : {slidesToShow: 2}
            }
        ]
    });

}

// UIS - Check product inventory
function initializeUIS () {
    var pid = $('input#uisProductID').val();
    var url = app.util.appendParamsToUrl( Urls.uisProductInclude, { productID: pid } );
    $.get( url, null );
}

var product = {
    initializeEvents: initializeEvents,
    init: function () {
        initializeDom();
        initializeEvents();
        initializeUIS();
        selectBoxIt.selectBoxIt($('.select-quantity'));
        selectBoxIt.selectBoxIt($('#gcAmountselect'));
        // Init Recommendations Carousel
        addToCarousel($('#recommendations'));
        // Init "More in" Carousel
        addToCarousel($('#moreInCat'));
        // Init Last Visited Carousel
        initializeSlick($('#last-visited'));
    }
};

module.exports = product;

},{"../../dialog":34,"../../giftcard":37,"../../selectboxit":73,"../../storeinventory/product":78,"../../tooltip":81,"../../util":82,"./addToCart":55,"./availability":56,"./image":57,"./productSet":59,"./recommendations":60,"./variant":61}],59:[function(require,module,exports){
'use strict';

var ajax = require('../../ajax'),
    tooltip = require('../../tooltip'),
    util = require('../../util'),
    selectBoxIt = require('../../selectboxit');

module.exports = function () {
    var $addToCart = $('#add-to-cart'),
        $addAllToCart = $('#add-all-to-cart'),
        $productSetList = $('#product-set-list');

    var updateAddToCartButtons = function () {
        if ($productSetList.find('.add-to-cart[disabled]').length > 0) {
            $addAllToCart.attr('disabled', 'disabled');
            // product set does not have an add-to-cart button, but product bundle does.
            // if the button is already disabled, no need to disable all buttons on the page.
            //$addToCart.attr('disabled', 'disabled');
        } else {
            $addAllToCart.removeAttr('disabled');
            $addToCart.removeAttr('disabled');
        }
    };

    if ($productSetList.length > 0) {
        updateAddToCartButtons();
    }
    // click on swatch for product set
    $productSetList.on('click', '.product-set-item .swatchanchor', function (e) {
        e.preventDefault();

        var $swatchLiElement = $(this).parents('li');
        if ($swatchLiElement.hasClass('unselectable') || $swatchLiElement.hasClass('selected')) {
            return;
        }

        var url = Urls.getSetItem + this.search;
        var $container = $(this).closest('.product-set-item');
        var qty = $container.find('form select[name="Quantity"]').first().val();

        ajax.load({
            url: util.appendParamToURL(url, 'Quantity', isNaN(qty) ? '1' : qty),
            target: $container,
            callback: function () {
                updateAddToCartButtons();
                tooltip.init();
                selectBoxIt.selectBoxIt($('select'));
                //True Fit
                if (tfc !== 'undefined'){
                    tfc.calculate();
                }
            }
        });
    });
};

},{"../../ajax":26,"../../selectboxit":73,"../../tooltip":81,"../../util":82}],60:[function(require,module,exports){
'use strict';

/**
 * @description Creates product recommendation carousel using jQuery jcarousel plugin
 **/
module.exports = function () {
    var $carousel = $('#carousel-recommendations');
    if (!$carousel || $carousel.length === 0 || $carousel.children().length === 0) {
        return;
    }
    $carousel.jcarousel();
    $('#carousel-recommendations .jcarousel-prev')
        .on('jcarouselcontrol:active', function () {
            $(this).removeClass('inactive');
        })
        .on('jcarouselcontrol:inactive', function () {
            $(this).addClass('inactive');
        })
        .jcarouselControl({
            target: '-=1'
        });

    $('#carousel-recommendations .jcarousel-next')
        .on('jcarouselcontrol:active', function () {
            $(this).removeClass('inactive');
        })
        .on('jcarouselcontrol:inactive', function () {
            $(this).addClass('inactive');
        })
        .jcarouselControl({
            target: '+=1'
        });
};

},{}],61:[function(require,module,exports){
'use strict';

var ajax = require('../../ajax'),
    image = require('./image'),
    progress = require('../../progress'),
    productStoreInventory = require('../../storeinventory/product'),
    tooltip = require('../../tooltip'),
    util = require('../../util'),
    dialog = require('../../dialog'),
    selectBoxIt = require('../../selectboxit'),
    fullScreenImage = require('../../storeinventory/product').fullScreenImage;


/**
 * @description update product content with new variant from href, load new content to #product-content panel
 * @param {String} href - url of the new product variant
 **/
function changeTumb() {
	var attrUrl = '';
	var res = '';
	var img;
	$('#thumbnail-carousel .thumb').each(function(){
		img = $(this).find('img');
		attrUrl = img.attr('src');
		res = attrUrl.replace('productThumbnail', 'large');
		img.attr('src',res);
	})
	//if slick is already initialized, we don't need to do anything, so we check for class 'slick-slider'
	if(!$('#thumbnail-carousel').hasClass('slick-slider')){

		$('#thumbnail-carousel').slick({
	    	dots: true,
			infinite: true,
			speed: 300,
			slidesToShow: 1,
			arrows: false
		});
	}
}
var updateContent = function (href) {
    var $pdpForm = $('.pdpForm');
    var qty = $pdpForm.find('select[name="Quantity"]').first().val();
    var params = {
        Quantity: isNaN(qty) ? '1' : qty,
        format: 'ajax'
    };

    var selectedColor = $('#pdpMain').find('.Color .selected-value').first();
    if(selectedColor.length){
        var colorName = selectedColor.attr('data-name').toString();
        var colorValue = selectedColor.attr('data-value').toString();
        if(colorName && colorValue && !params[colorName] && href.indexOf(colorName) == -1){
            // force the auto-selected color into the ajax call
            params[colorName] = colorValue;
        }
    }

    progress.show($('#pdpMain'));
    ajax.load({
        url: util.appendParamsToUrl(href, params),
        target: $('#product-content'),
        callback: function () {
            // Account Protected Links
        	$('.protected').on('click', function(e) {
                e.preventDefault();
                $('#top-banner-interior .account-link-login a.user-login-hopup').click();
            });
        	if (SitePreferences.STORE_PICKUP) {
                productStoreInventory.init();
            }
            image.replaceImages();
            fullScreenImage();
            tooltip.init();
            if (util.getViewport() < 481){
        		changeTumb();
	    	}
            // reload the bazaar voice ratings pane
			if ($('#BVCustomerRatings').length > 0 && typeof $BV != "undefined" && "ui" in $BV) {
				$BV.ui("rr", "show_reviews", configData);
			}
            if (dialog.isActive()) {
             // hide/show thumbnail arrows based on swatch list length
                var $thumbnails = $('#thumbnails');
                var thumbsWidth = 0;
                var $thumbsPrevArrow = $('.jcarousel-control-prev');
                var $thumbsNextArrow = $('.jcarousel-control-next');
                $('.thumb').each(function() {
                    thumbsWidth += $(this).width();
                })
                if (thumbsWidth <= $('#thumbnails').width()) {
                    $thumbsPrevArrow.hide();
                    $thumbsNextArrow.hide();
                }
                image.jcarouselEvents();
            }
            //True Fit
            if (typeof tfc !== 'undefined'){
                tfc.calculate();
            }
            setTimeout( function () {
                selectBoxIt.selectBoxIt($('select.select-quantity'));
            }, 0);
            // in case of asynchronous wait times overriding first change
            setTimeout( function () {
                selectBoxIt.selectBoxIt($('select.select-quantity'));
            }, 250);
            setTimeout( function () {
                selectBoxIt.selectBoxIt($('select.select-quantity'));
            }, 500);
        }
    });
};
var changeAvailabilityPosition = function() {
  if ($('.product-set-item').length == 0) {
        var windowWidth = $(window).width(),
            availabilityContainer = $('.product-add-to-cart').find('.availability');
      if(windowWidth <= 768 && !availabilityContainer.hasClass('tablet-moved')) {
          $(availabilityContainer).addClass('tablet-moved').insertAfter('.a2c-btn-container');
      }
      if(windowWidth > 769 && availabilityContainer.hasClass('tablet-moved')) {
          $(availabilityContainer).removeClass('tablet-moved').insertAfter('.inventory');
      }
  }
}

module.exports = function () {
    var $pdpMain = $('#pdpMain:not([class*="gift-card"])');
    // hover on swatch - should update main image with swatch image
    $pdpMain.on('mouseenter mouseleave', '.swatchanchor', function () {
        var largeImg = $(this).data('lgimg'),
            $imgZoom = $pdpMain.find('.main-image'),
            $mainImage = $pdpMain.find('.primary-image');

        if (!largeImg) { return; }
        // store the old data from main image for mouseleave handler
        $(this).data('lgimg', {
            hires: $imgZoom.attr('href'),
            url: $mainImage.attr('src'),
            alt: $mainImage.attr('alt'),
            title: $mainImage.attr('title')
        });
        // set the main image
        image.setMainImage(largeImg);
    });
       $pdpMain.on('mouseenter', '.swatches.size', function () {
            $('.bx-creative').show();
        }).on('mouseleave', '.swatches.size', function () {
            $('.bx-creative').hide();
        });


    // click on swatch - should replace product content with new variant
    $pdpMain.on('click', '.product-detail .swatchanchor', function (e) {
        e.preventDefault();
        var $liElement = $(this).parents('li');
        if ($liElement.hasClass('selected')) { return; }
        updateContent(this.href);
    });

    // change drop down variation attribute - should replace product content with new variant
    $pdpMain.on('change', '.variation-select', function () {
        if ($(this).val().length === 0) { return; }
        updateContent($(this).val());
    });
    $('#pdpMain.gift-card').on('click', '.product-detail .swatchanchor', function (e) {
        e.preventDefault();
    });
    changeAvailabilityPosition();
    util.smartResize(function () {
        changeAvailabilityPosition();
    });
};
},{"../../ajax":26,"../../dialog":34,"../../progress":68,"../../selectboxit":73,"../../storeinventory/product":78,"../../tooltip":81,"../../util":82,"./image":57}],62:[function(require,module,exports){
'use strict';

var addProductToCart = require('./product/addToCart'),
    ajax = require('../ajax'),
    login = require('../login'),
    quickview = require('../quickview'),
    validator = require('../validator'),
    util = require('../util'),
    selectBoxIt = require('../selectboxit'),
    floatlabels = require('../float-labels');

function maskDateField() {
	$('#dwfrm_giftregistry_event_date').mask("00 / 00 / 00", { watchInputs: true });
	var $dateField = $('#dwfrm_giftregistry_event_datenothidden');
	var dateFieldVal = $dateField.val();
	if (dateFieldVal && dateFieldVal.length == 12) {
		var yearVal = dateFieldVal.substring(10, dateFieldVal.length);
		if (parseInt(yearVal) > 2000) {
			var newVal = dateFieldVal.substring(0, 10) + yearVal.substring(2, yearVal.length);
			$dateField.val(newVal);
		}
	}
	$dateField.mask("00 / 00 / 00", { watchInputs: true });
}

function hideStepIfEdit() {

	if(!$('.tabs').is(':visible')) {
		$('.dynamic').hide();
	}
}

function migratePreToPostFields() {
	var $formBefore = $('fieldset[name=address-before]');
	var $formAfter = $('fieldset[name=address-after]');

	$formAfter.find('[name$="_addressid"]').val($formBefore.find('[name$="_addressid"]').val()).blur();
	$formAfter.find('[name$="_firstname"]').val($formBefore.find('[name$="_firstname"]').val()).blur();
	$formAfter.find('[name$="_lastname"]').val($formBefore.find('[name$="_lastname"]').val()).blur();
	$formAfter.find('[name$="_address1"]').val($formBefore.find('[name$="_address1"]').val()).blur();
	$formAfter.find('[name$="_address2"]').val($formBefore.find('[name$="_address2"]').val()).blur();
	$formAfter.find('[name$="_city"]').val($formBefore.find('[name$="_city"]').val()).blur();
	$formAfter.find('[name$="_country"]').val($formBefore.find('[name$="_country"]').val()).blur();
	$formAfter.find('[name$="_postal"]').val($formBefore.find('[name$="_postal"]').val()).blur();
	$formAfter.find('[name$="_state"]').val($formBefore.find('[name$="_state"]').val()).blur();
	$formAfter.find('[name$="_phone"]').val($formBefore.find('[name$="_phone"]').val()).blur();
}

/**
 * @function
 * @description Loads address details to a given address and fills the address form
 * @param {String} addressID The ID of the address to which data will be loaded
 */
function populateForm(addressID, $form) {
    // load address details
    var url = Urls.giftRegAdd + addressID;
    ajax.getJson({
        url: url,
        callback: function (data) {
            if (!data || !data.address) {
                window.alert(Resources.REG_ADDR_ERROR);
                return false;
            }
            // fill the form
            $form.find('[name$="_addressid"]').val(data.address.ID).blur();
            $form.find('[name$="_firstname"]').val(data.address.firstName).blur();
            $form.find('[name$="_lastname"]').val(data.address.lastName).blur();
            $form.find('[name$="_address1"]').val(data.address.address1).blur();
            $form.find('[name$="_city"]').val(data.address.city).blur();
            $form.find('[name$="_country"]').val(data.address.countryCode.toUpperCase()).blur();
            $form.find('[name$="_postal"]').val(data.address.postalCode).blur();
            if(data.address.countryCode == 'US'){
                $($form.find('[name$="_state"]')).rules('add', {
                    required: true
                });
                $form.find('[name$="_state"]').val(data.address.stateCode.toUpperCase()).blur();
            }else{
                $($form.find('[name$="_state"]')).rules('add', {
                    required: false
                });
                $form.find('[name$="_state"]').val('').blur();
            }
            $form.find('[name$="_phone"]').val(data.address.phone).blur();

            // Address 2 may be empty - need to decide whether to blur the field or not.
            if ($form.find('[name$="_address2"]').length > 0) {
            	$form.find('[name$="_address2"]').val(data.address.address2).blur();
            } else {
            	$form.find('[name$="_address2"]').val(data.address.address2);
            }
            //provide mask for saved address
            $form.find('[name$="_phone"]').unmask().mask("(000) 000-0000").blur();
        }
    });
}

/**
 * @private
 * @function
 * @description Initializes events for the gift registration
 */
function initializeEvents() {
    var $eventAddressForm = $('form[name$="_giftregistry"]'),
        $beforeAddress = $eventAddressForm.find('fieldset[name="address-before"]'),
        $afterAddress = $eventAddressForm.find('fieldset[name="address-after"]');
    	var $publicCheckBox = $('.public-checkbox').find('.input-checkbox');
    	var $hiddenPublicCheckBox = $('.public-checkbox-hidden').find('.input-checkbox');
    	var $quantityDesired = $('.option-quantity-desired').find('.input-text');

    	$publicCheckBox.change(function() {
	        if($(this).is(":checked")) {
	        	$(this).parent().parent().parent().parent().parent().parent().find('.for-details').find('.public-checkbox-hidden').find('.input-checkbox').prop('checked', true);
	        }
	        else {
	        	$(this).parent().parent().parent().parent().parent().parent().find('.for-details').find('.public-checkbox-hidden').find('.input-checkbox').prop('checked', false);
	        }
    	});

    	$quantityDesired.change(function() {
    		$(this).parent().parent().parent().parent().parent().find('.for-details').find('.option-quantity-desired-hidden').find('.input-text').val($(this).val());
    	});


    $('.usepreevent').on('click', function () {
        // filter out storefront toolkit
        $(':input', $beforeAddress).not('[id^="ext"]').not('select[name$="_addressBeforeList"]').each(function () {
            var fieldName = $(this).attr('name'),
                $afterField = $afterAddress.find('[name="' + fieldName.replace('Before', 'After') + '"]');
            $afterField.val($(this).val()).trigger('change');
        });
    });
    $eventAddressForm.on('change', 'select[name$="_addressBeforeList"]', function () {
        var addressID = $(this).val();
        if (addressID.length === 0) { return; }
        populateForm(addressID, $beforeAddress);
    })
    .on('change', 'select[name$="_addressAfterList"]', function () {
        var addressID = $(this).val();
        if (addressID.length === 0) { return; }
        populateForm(addressID, $afterAddress);
    });

    $('.item-edit-details').click(function (e) {
        e.preventDefault();
        var productListID = $('input[name=productListID]').val();
        //Very specific case for making inputs outside of dialog available
        $.widget( "ui.dialog", $.ui.dialog, {
            _allowInteraction: function( event ) {
                return !!$( event.target ).is( "input" ) || this._super( event );
            }
        });
        quickview.show({
            url: e.target.href,
            source: 'giftregistry',
            productlistid: productListID
        });
    });

	// gift registry advanced options on login intercept page
	$('.gift-registry-advanced .toggle').on('click', function(){
		$('.gift-registry-advanced .toggle-content').slideToggle(function(){
			selectBoxIt.selectBoxIt($('.gift-registry-advanced .select-field:visible'));
		});
		return false;
	});

    $("#dwfrm_giftregistry_copyAddress").change(function() {
        if(this.checked) {
        	migratePreToPostFields();
        }
    });

    $("#select-quantity-desired select").change(function() {
    	var currValue = parseInt($(this).val());
    	var attrName = $(this).attr('name');
    	$('input[name="'+attrName+'"]').each(function(ind, el) {
    		$(el).val(currValue);
    		$(el).attr('value', currValue);
    	});
    });

    // gift registry advanced options toggle
    $('.search-giftregistry-toggle-button').on('click', function(e){
    	e.preventDefault();
    	$(this).toggleClass('expanded');
    	$('.gift-registry-advanced-options').toggle();
    });

    var $form = $('#dwfrm_giftregistry_search');
    $form.find('.form-row select').after("<span class='select-arrow'></span>");

	$('button.previous').click(function (e) {
		// Remove the required class so validation
		// does not occur on the form fields
		// since this is the previous button, and validation is not needed.
		$('form').find('input').removeClass('required');
		$('form').find('select').removeClass('required');
	});
	
	//enable mask for number field
    $('#dwfrm_giftregistry').find('.input-text.phone').mask("(000) 000-0000");
}

function setFloatLabelsOnSelectElements () {
	$('.pt_gift-registry').find('select').parent().addClass('has-float-label');
	$('.pt_gift-registry').find('select').parent().find('.text-input-label').addClass('float');
}

function initEventItems() {
	$('.gift-registry-item-row').each(function(){
		var $style = $(this).find('.sku').detach();
		$style.find(".label").text("Style #:");
		$(this).find('.product-list-item').append($style);

		var $price = $(this).find('.price').detach();
		var $priceColumn = $(this).find('.gift-registry-item-row-price');
		$priceColumn.append($price);
		if(!($priceColumn.find('.price-standard').length && $priceColumn.find('.price-sales').length)){
			$priceColumn.find('.price .value .price-standard').removeClass('price-standard');
			$priceColumn.find('.price .value .price-sales').removeClass('price-sales');
		}

		var $priority = $(this).find('.option-priority .value');
		var priorityText = $priority.text();
		$priority.text(priorityText.substr(9, priorityText.length));

		var $quantitySelect = $(this).find('.quantity-select');
		$quantitySelect.after("<span class='select-arrow'></span>");
		var $form = $(this).find("#dwfrm_product_addtocart, #gift-cert-purchase");
		$quantitySelect.on("change", function(){
			$form.find('.hidden-quantity').val($(this).val());
		});
	});
	$('.mobile-registry-item-container').each(function(){
		var $style = $(this).find('.sku').detach();
		$style.find(".label").text("Style #:");
		$(this).find('.product-list-item').append($style);

		var $price = $(this).find('.price').detach();
		var $priceSpan = $(this).find('.registry-item-price');
		$priceSpan.append($price);
		if(!($priceSpan.find('.price-standard').length && $priceSpan.find('.price-sales').length)){
			$priceSpan.find('.price .value .price-standard').removeClass('price-standard');
			$priceSpan.find('.price .value .price-sales').removeClass('price-sales');
		}

		var $priority = $(this).find('.option-priority .value');
		var priorityText = $priority.text();
		$priority.text(priorityText.substr(9, priorityText.length));

		var $quantitySelect = $(this).find('.registry-item-quantity select');
		$quantitySelect.after("<span class='select-arrow'></span>");
	});
}

function checkPopulatedFields() {
    $('#dwfrm_giftregistry_event input').each(function (index, element) {
        if ($(element).val().length > 0) {
            $(element).blur();
        }
    })
}

exports.init = function () {
    setFloatLabelsOnSelectElements();
    initializeEvents();
    addProductToCart();
    hideStepIfEdit();
    maskDateField();
    login.init();
    util.setDeleteConfirmation('.item-list', String.format(Resources.CONFIRM_DELETE, Resources.TITLE_GIFTREGISTRY));
    initEventItems();
    checkPopulatedFields();
};

},{"../ajax":26,"../float-labels":36,"../login":42,"../quickview":69,"../selectboxit":73,"../util":82,"../validator":83,"./product/addToCart":55}],63:[function(require,module,exports){
'use strict';

var compareWidget = require('../compare-widget'),
    giftcard = require('../giftcard'),
    imagesLoaded = require('imagesloaded'),
    productTile = require('../product-tile'),
    progress = require('../progress'),
    smartResize = require('../smartresize'),
    util = require('../util'),
    imagemapresizer = require('../imagemapresizer'),
    interact = require('../interact'),
    mediumBreakpoint = 480,
    largeBreakpoint = 960,
    $cache = {};

var windowWidth = window.innerWidth;

function infiniteScroll() {
    // getting the hidden div, which is the placeholder for the next page
    var loadingPlaceHolder = $('.infinite-scroll-placeholder[data-loading-state="unloaded"]');
    // get url hidden in DOM
    var gridUrl = loadingPlaceHolder.attr('data-grid-url');

    if (loadingPlaceHolder.length === 1 && util.elementInViewport(loadingPlaceHolder.get(0), 250)) {
        // switch state to 'loading'
        // - switches state, so the above selector is only matching once
        // - shows loading indicator
        loadingPlaceHolder.attr('data-loading-state', 'loading');
        loadingPlaceHolder.addClass('infinite-scroll-loading');


        // named wrapper function, which can either be called, if cache is hit, or ajax repsonse is received
        var fillEndlessScrollChunk = function (html) {
            loadingPlaceHolder.removeClass('infinite-scroll-loading');
            loadingPlaceHolder.attr('data-loading-state', 'loaded');
            $('div.search-result-content').append(html);
        };

        // old condition for caching was `'sessionStorage' in window && sessionStorage["scroll-cache_" + gridUrl]`
        // it was removed to temporarily address RAP-2649

        $.ajax({
            type: 'GET',
            dataType: 'html',
            url: gridUrl,
            success: function (response) {
                // put response into cache
                try {
                    sessionStorage['scroll-cache_' + gridUrl] = response;
                } catch (e) {
                    // nothing to catch in case of out of memory of session storage
                    // it will fall back to load via ajax
                }
                // update UI
                fillEndlessScrollChunk(response);
                productTile.init();
                // init swatch color view
                showMoreSwatches();
                // sync height
                tileSync();
            }
        });
        if (typeof dataLayer !== "undefined") {
        	var dataLayer = window.dataLayer = window.dataLayer || [];
        	dataLayer.push(app.datalayer.getEvent("event", "batchedEcomProdImpression"));
        }
    }
}
/**
 * @private
 * @function
 * @description replaces breadcrumbs, lefthand nav and product listing with ajax and puts a loading indicator over the product listing
 */
function updateProductListing(isHashChange) {
    var hash = window.location.hash;
    
    if(hash==='#results-content' || hash==='#results-products') { return; }
    
    var refineUrl = null,
    	encodedHash = "",
    	searchString = "",
    	searchUrl = "";
    
    if (hash.length > 0) {
    	searchString = window.location.search || "?";
    	encodedHash = '&' + hash.substr(1).replace(/\s/g,'%20'); //Required: Firefox allows whitespace in URL, which breaks refinements (KS-1515, KS-1131)
        refineUrl = window.location.pathname + searchString + encodedHash;
    }
    else if (isHashChange) {
        refineUrl = window.location.href;
    }

    if (!refineUrl) { return; }

    searchUrl = util.appendParamToURL(refineUrl, "format", "ajax");

    progress.show($cache.content);
    $.ajax({
        type: 'GET',
        dataType: 'html',
        url: searchUrl,
	    success: function (response) {
	        $cache.content = $cache.main.find(".search-result-content");
	        $cache.filters = $cache.main.find("#filter-container");
	        $cache.count = $cache.main.find(".search-result-count");
	        $cache.countSearch = $cache.main.find(".header-item-result");
	        var newProducts = $(response).find('.search-result-content');
	        var newFilters = $(response).find('#filter-container');
	        var newCount = $(response).find('.search-result-count');
	        var newCountSearch = $(response).find('.header-item-result');
	        $cache.content.replaceWith(newProducts);
	        //if filter is opened now we should replace it with opened filter too
	        if (!$cache.filters.find('.filter-content').hasClass('hide')) {
	            newFilters.find('.filter-content').removeClass('hide');
	        }
	        $cache.filters.replaceWith(newFilters);
	        $cache.count.replaceWith(newCount);
	        $cache.countSearch.replaceWith(newCountSearch);
	        productTile.init();
	        progress.hide();
	        tileSync();
        //close category nav in mobile/tablet
        if (windowWidth <= largeBreakpoint) {
            $('.refinement.Shop.by.Category.displayname').addClass('collapsed').find('ul').hide();
        }
        if (windowWidth > mediumBreakpoint && windowWidth <= largeBreakpoint) {
            $('.filter-container').css('border-top', '1px solid #000');
        }

	        //Rehide sub categories with toggles
	        subToggleInit();

	        //Change Page Title
	        var titleParts = document.title.split('|');
	        document.title = $('.search-result-count h1').text().replace(/^(.)|\s(.)/g, function($1){ return $1.toUpperCase( ); }) + ' | ' + titleParts[1];

	        // trigger scroll to set the header
	        $(window).trigger('scroll');
        }
    });
}

//synchronizes heights of tiles on cat browse pages
function tileSync() {
    imagesLoaded('.search-result-content').on('always', function () {
        $('.search-result-content .product-tile').syncHeight();
    });
}

//save current refinement tabs
function setRefinementCookies() {
    $cache.main.find('.refinement .toggle span').each(function () {
        $.cookie($.trim($(this).text()), $(this).parents('.refinement').hasClass('collapsed'));
    });
}
//Hide lists for sub-toggle
function subToggleInit() {
    if($(".refinement").length && $(".refinement .expandable").length){
        if($(".expandable.active .plus_minus").html()=="+") {
            $(".expandable.active .plus_minus").html("&#8211;");
        }

        $(".expandable").each( function() {
            if(!$(this).hasClass('active')){
                $(this).parent().find("ul:not(.active)").css("display", "none");
            }
        });


    }
}

//Scale dividers height/width for category landing content based on screen width
function scaleDividers() {
    if ($('.cat-landing-slot').length && $('td').length) {
        imagesLoaded('.cat-landing-slot').on('always', function () {
            var imgs = $('.cat-landing-slot').find('img');
            var maxWidth = 0;
            var maxWidthImg;
            jQuery.each(imgs, (function () {
                if ($(this).width() > maxWidth) {
                    maxWidth = $(this).width();
                    maxWidthImg = $(this);
                }
            }));

            var scaleRatio = maxWidth / maxWidthImg['0'].naturalWidth;

            var items = $('.cat-landing-slot').find('td');
            jQuery.each(items, (function () {
                if ($(this).children().length == 0) {
                    if (this.hasAttribute('width')) {
                        $(this).width(Math.round(this.width * scaleRatio));
                    }
                    else if (this.hasAttribute('height')) {
                        $(this).height(Math.round(this.height * scaleRatio));
                    }
                }
            }));
        });
    }
}

function personalizationSlider() {

    var before = $('.slider-bef');
    var after = $('.slider-aft');
    var handle = $('.handle-wrapper');
    var slider = $('.AB-slidebar');
    var tooltip = $('.slider-tip');

    $('.slider-bef').find('img').css('max-width', $('.slider-aft').width());
    $('.handle-wrapper').css('height', $('.slider-aft').height());

    var currentWidth = $(before).width(); //get current width of top image
    var newTopWidth = currentWidth * 2/3; //calculate new top width -> 2/3 of current width


    before.width(newTopWidth); //set top image with new width
    handle.css('left', newTopWidth); //set left margin for bar



    function slideBar(e) {

        setTimeout(function () {
            var newWidth = parseInt($(handle).css('left'));
            // set width of before img div
            before.width(newWidth);
        }, 30);

        e.stopPropagation();
    }

    function slideBarMobile(e) {

        setTimeout(function () {
            var newWidth = parseFloat($(handle).css('left')) + e.dx;
            // set width of before img div
            before.width(newWidth);
            handle.css('left', newWidth + 'px');
        }, 30);

        e.stopPropagation();
    }


    handle.draggable({
        containment: slider,
        axis: 'x'
    });

    slider.bind('drag', slideBar).bind('mousedown touchstart', function(){
        tooltip.fadeOut(10);
    });

    if (window.innerWidth <= largeBreakpoint) {
        interact.interact('.draggable')
        .draggable({
            onmove: slideBarMobile
        });
    }

}
function oasTiles() {
    // prevent adding oasTiles after search refinement
    if (window.location.hash.length) {
        return;
    }
    $('.tiles-container .grid-tile').each(function(){
        if($(this).hasClass('oasDouble') || $(this).hasClass('blank-tile') || $(this).hasClass('oas-tile')) {
            $(this).remove();
        }
    })
    var $productTiles = $('.tiles-container .product-tile');
    var $gridTiles = $('.tiles-container .grid-tile');
    var productTilesNew = $('#search-result-items li.grid-tile');
    // setup OAS slots if they exist
    $('#oasTiles').first().find('li').each( function(index, el) {

        var tilePosition = $(el).attr("tilePosition");
        var blankTile = $('<li class="grid-tile blank-tile">');
        // configure tile position
        if (tilePosition > productTilesNew.length) {
            tilePosition = productTilesNew.length;
        }

        /*
         *   setup tile position - moves the tile to the position in the
         *   list (minus one because zero based array) minus one also makes
         *   it so a tile is never last in the list
         *           *
         *   also accounting for case where oas double tile is between two rows on mobile
         */

        if ($('.oasDouble').length && windowWidth <= mediumBreakpoint && tilePosition % 2 == 0 ) {
            tilePosition -= 1;
        }

        $(el).clone().insertBefore(productTilesNew[tilePosition -1]);
        if ($(this).hasClass('oasDouble')) {
            $(productTilesNew[tilePosition -1]).before(blankTile);
        }
    });


    // RR-6769 do not sync product name height

    // Do not use cached containers here because the amount of tiles in the grid may be changed by JS code above

    // if ($productTiles.length > 0) {
    //     var colCount = (matchMedia('(max-width: ' + mediumBreakpoint + 'px)').matches) ? 2 : 3;
    //
        // Synchronize heights of product names in a row
        // for (var i = 0; i < $gridTiles.length; i += colCount) {
        //     var rowTiles = [];
        //     for (var j = 0; j < colCount; j++) {
        //         var gridTile = $gridTiles[i + j];
        //         if (gridTile) {
        //             rowTiles.push(gridTile);
        //         }
        //     }
        //
        //     $(rowTiles).find('.product-name').syncHeight();
        // }
    // }
}

/**
 * @description add ability to show more than 3 swatches on the product tile
 */
function showMoreSwatches() {
    var productTiles = $('#search-result-items li.grid-tile');;
    if (productTiles.length === 0) return;

    productTiles.find('.product-tile').each(function(){

        var $tile = jQuery(this);
        var $list = $tile.find('.swatch-list');
        var $swatches = $list.find('li');

        if ( $swatches.length > $list.data('max') && $list.find('.more').length == 0){

            var overlayswatch = jQuery('<div/>').addClass('sw-overlay');
            $tile.append(overlayswatch)
            $list.clone().appendTo(overlayswatch);

            var toggle = $('<span/>').addClass('more').text('(+' + ($swatches.length - $list.data('max')) + ')');
            $list.prepend(toggle);
            toggle.on('click', function(){
                overlayswatch.show();
                $tile.find('.product-swatches, .product-name, .product-pricing, .product-promo').hide();
            });

            overlayswatch.on('mouseleave', function(){
                var $overlayswatch = $(this);
                var timeoutID = $overlayswatch.data('timeoutid');
                if(timeoutID){
                    clearTimeout(timeoutID);
                }
                timeoutID = setTimeout(function(){
                    $overlayswatch.data('timeoutid', '');
                    $overlayswatch.hide();
                    $tile.find('.product-swatches, .product-name, .product-pricing, .product-promo').show();
                },2000);
                $overlayswatch.data('timeoutid', timeoutID);
            });
            overlayswatch.on('mouseenter', function(){
                var $overlayswatch = $(this);
                var timeoutID = $overlayswatch.data('timeoutid');
                if(timeoutID){
                    clearTimeout(timeoutID);
                }
            });
            $(document).on('touchstart', function(e) {
                var swcontainer = $('.sw-overlay');
                if (!swcontainer.is(e.target) && swcontainer.has(e.target).length === 0) {
                    swcontainer.hide();
                    $tile.find('.product-swatches, .product-name, .product-pricing, .product-promo').show();
                }
            });
        }
    });
}

/**
 * @private
 * @function
 * @description Initializes events for the following elements:<br/>
 * <p>refinement blocks</p>
 * <p>updating grid: refinements, pagination, breadcrumb</p>
 * <p>item click</p>
 * <p>sorting changes</p>
 */
function initializeEvents() {

    // scroll for sticky header/refinements
    $(window).scroll(function() {
        var scrollFilterConstant = 120,
        headerHeight = $('.top-banner').outerHeight(),
        navHeight = 0,
        catSlotHeight = $('.category-top-slot').outerHeight(),
        scrollTop = $(this).scrollTop(),
        filters = $('#filters'),
        selectedFilters = filters.find('#filters-selected'),
        hasFilters = selectedFilters.length > 0 && selectedFilters.find('.refinement-list').length > 0,
        isSearchPage = $('.pt_product-search-result').length > 0;
        if (windowWidth <= largeBreakpoint) {
            navHeight = 0;
            scrollFilterConstant = 150;
        }
        else {
            navHeight = $('#navigation').outerHeight();
            scrollFilterConstant = 120;
        }
        var filterActive = $('.filter-toggle').hasClass('active');
        if (util.isMobile()) {
	        if (isSearchPage && hasFilters){
		        if (scrollTop > 0) {
		        	$('#site-tab-bar').css('position', 'static');
		        } else {
		        	$('#site-tab-bar').css('position', 'fixed');
		        }
	        }
        }
        if (isSearchPage && hasFilters && !filterActive && !util.isMobile()) {
            if (scrollTop > headerHeight + navHeight + catSlotHeight + scrollFilterConstant) {
                $('.filter-container').css('border-bottom', '0');
                $('#primary').css('marginTop', '215px');
                $('.lower').css('marginTop', '215px');
                filters.addClass('sticky');
            }
            else {
                $('.filter-container').css('border-bottom', '1px solid #000');
                $('#primary').css('marginTop', '0');
                $('.lower').css('marginTop', '0');
                filters.removeClass('sticky');
            }
        }
    });

    // trigger scroll to set the header on page load
    $(window).trigger('scroll');

    var productTiles = jQuery('#search-result-items li.grid-tile');
    //add specific class for product set tiles
    $('.product-tile').has($('.product-set-price')).addClass('product-set-tile');

    if (typeof $cache.checkgiftcardBalance == 'undefined') {
        $cache.checkgiftcardBalance = $('#CheckBalanceButton');
        $cache.giftcardcode= $('.giftcardcode');
        $cache.giftcardpin= $('.giftcardpin');
        $cache.giftcardbalance= $('.balance');
        $cache.giftcardform= $('#gc-checkbalance');
    }
    $cache.checkgiftcardBalance.on("click", function (e) {
        e.preventDefault();
        $cache.giftcardcode = $cache.giftcardcode;
        $cache.giftcardpin = $cache.giftcardpin;
        $cache.giftcardbalance = $cache.giftcardbalance;

        $cache.giftcardbalance.text('');

        if ($cache.giftcardcode.length===0 || $cache.giftcardcode.val().length===0 || $cache.giftcardcode.val() === 'Gift Card Number') {
            var error = $cache.giftcardform.find("span.error");
            if (error.length===0) {
                error = $("<span>").addClass("error").appendTo($cache.giftcardform);
            }
            error.html(Resources.GIFT_CERT_MISSING);
            return;
        }
        if ($cache.giftcardpin.length===0 || $cache.giftcardpin.val().length===0 || $cache.giftcardpin.val() === 'PIN') {
            var error = $cache.giftcardform.find("span.error");
            if (error.length===0) {
                error = $("<span>").addClass("error").appendTo($cache.giftcardform);
            }
            error.html("Please enter the pin number");
            return;
        }

        // PCRSPADES-23: display the progress overlay
        progress.show();
        giftcard.checkBalance($cache.giftcardcode.val(), $cache.giftcardpin.val(), function (data) {
            // remove the progress overlay
            progress.hide();
            // each call remove prev balance
            $cache.giftcardform.find("span.gcbalance").remove();

            if(!data || !data.giftCertificate) {
                // error
                var error = $cache.giftcardform.find("span.error");
                $cache.giftcardform.find("span.gcbalance").remove();

                if (error.length===0) {
                    error = $("<span>").addClass("error").appendTo($cache.giftcardform);
                }
                error.html(Resources.GIFT_CERT_INVALID);
                return;
            }
            // display details in UI
            $cache.giftcardform.find("span.error").remove();
            var balance = data.giftCertificate.balance;
            var gcbalance = $("<span>").addClass("gcbalance").appendTo($cache.giftcardform);
            gcbalance.html(Resources.GIFT_CERT_BALANCE+" "+balance);
        });
    });

    var $main = $('#main');
    // compare checked
    $cache.main.on('click', 'input[type="checkbox"].compare-check', function () {
        var cb = $(this);
        var tile = cb.closest('.product-tile');

        var func = this.checked ? compareWidget.addProduct : compareWidget.removeProduct;
        var itemImg = tile.find('.product-image a img').first();
        func({
            itemid: tile.data('itemid'),
            uuid: tile[0].id,
            img: itemImg,
            cb: cb
        });
    });
    $cache.main.on('click', '.item-count a', function (e) {
    	e.preventDefault();
    	var item =$(this).parent('li')
    	item.toggleClass('open').parent('ul').toggleClass('open-ul').find('li.hide').toggleClass('open');
    });

    var personalizationPage;
    // check if category landing page to hide breadcrumb/filters, scale dividers and images
    if ($('.cat-landing-slot').length ) {
    	if(personalizationPage){
    		addBackgroundCover();
    	}
        if ($('.AB-slidebar').length){
            personalizationSlider();
        }

        // scales divider td's for category landing page content
        scaleDividers();
    } else {
    	$('.filter-container').show();
        $('.filter-buttons').show();
    }
    
  //cat landing page sliders
    if ($('.cat-landing-slot')) {
    	if ($('.slider').length) {
    		(function(e,t,n,r){e.fn.sss=function(r){var i=e.extend({slideShow:true,startOn:0,speed:10000000000000,transition:0,arrows:true},r);return this.each(function(){function y(e){return s.eq(e).height()/o.width()*100+"%"}function b(e){if(!c){c=true;var t=s.eq(e);t.fadeIn(a);s.not(t).fadeOut(a);o.animate({paddingBottom:y(e)},a,function(){c=false});g()}}function w(){l=l===u-1?0:l+1;b(l)}function E(){l=l===0?u-1:l-1;b(l)}var r=e(this),s=r.children().wrapAll('<div class="sss"/>').addClass("ssslide"),o=r.find(".sss"),u=s.length,a=i.transition,f=i.startOn,l=f>u-1?0:f,c=false,h,p,d,v,m,g=i.slideShow?function(){clearTimeout(p);p=setTimeout(w,i.speed)}:e.noop;if(i.arrows){o.append('<div class="sssprev"/>','<div class="sssnext"/>')}m=o.find(".sssnext"),v=o.find(".sssprev");e(t).load(function(){o.css({paddingBottom:y(l)}).click(function(t){h=e(t.target);if(h.is(m)){w()}else if(h.is(v)){E()}});b(l);e(n).keydown(function(e){d=e.keyCode;if(d===39){w()}else if(d===37){E()}})})})}})(jQuery,window,document);
        	$(document).ready(function () {
        	  $('.slider').sss();
        	});
    	}
    }
    
    $('.breadcrumb').show();

    // accounts for issue where sort-by text would otherwise overflow in mobile
    $cache.main.ready(function() {
        if (windowWidth <= 370 && $('.sort-by-text')[0].firstChild.length > 10) {
            $('.sort-toggle').css('padding', '16px 8px');
        }
    });


    // if mobile/tablet then make categorylanding impossible to get to from nav and collapse category list at smaller viewports
    if (windowWidth <= largeBreakpoint) {
        var items = $('.menu-category.level-1 > li');
        jQuery.each(items, function() {
            if ($(this).attr('data-template')){
                var string = $(this).data('template');
                var substring = string.substr(string.lastIndexOf('/') + 1);
            }
        });

        $('.refinement.Shop.by.Category.displayname').addClass('collapsed').find('ul').hide();
    }

    //Handles Resizing of Window
    smartResize(function() {
        if (windowWidth != window.innerWidth) {
            //set new windowWidth
            windowWidth = window.innerWidth;

            // handle collapsing/expanding of refinement sections depending on viewport
            if (windowWidth <= largeBreakpoint) {
                $('.refinement.Shop.by.Category.displayname').addClass('collapsed').find('ul').hide();
                if (windowWidth <= mediumBreakpoint || !($('#filters-selected').children().length > 0)) {
                    $('.filter-container').css('border-top', '0');
                }
                else {
                    $('.filter-container').css('border-top', '1px solid #000');
                }
            }
            else {
                $('.filter-container').css('border-top', '1px solid #000');
                $('.refinement.Shop.by.Category.displayname').removeClass('collapsed').find('ul').show();
            }
        }

        // handles removal of product-tile height for re-synchronization when resizing on cat browse page
        $('.search-result-content .product-tile').removeAttr('style');
        tileSync();

        // scales dividers on category landing pages if they exist and calls function to scale coordinates on maps
        if ($('.cat-landing-slot').length ) {
            scaleDividers();
            $('map').imageMapResize();
        }

        // scales images on personalization shop landing page
        $('.slider-bef').find('img').css('max-width', $('.slider-aft').width());
        $('.handle-wrapper').css('height', $('.slider-aft').height());

        if ($('.slider-bef').width() >= $('.AB-slidebar').width()) {
            //$('.handle-wrapper').css('left', $('.AB-slidebar').width());
            personalizationSlider();
        }
    });

    //Secondary Navigation Toggle
    $cache.main.on('click', '.refinement .toggle', function (e) {
        $(this).parents('.refinement').toggleClass('collapsed').find('#category-level-1').toggle();
        $(this).parents('.refinement').find('.clear-refinement').toggle();
    });

    // Filter Toggle
    $main.on('click', '.filter-toggle', function (e){
        e.preventDefault();
        var $this = $(this);
        //Remove Sort box
        $('.sort-by-container').addClass('hide');
        $('.sort-box .bottom-border-box').removeClass('active');
        $('.sort-box .bottom-border-box .sort-toggle').removeClass('active');
        //
        if ($this.hasClass('active')){
            //Collapse filter panel
            $this.removeClass('active');
            $this.find('.filter-show').removeClass('hide');
            $this.find('.filter-hide').addClass('hide');
            $('.filter-content').addClass('hide');
            if ($('#filters-selected').children().length > 0) {
                $('.filter-container').css('border-bottom', '1px solid #000');
            }
            if ($('#filters').hasClass('sticky')){
                $('.filter-container').css('display', 'none');

            }
            $('#filters-selected').removeClass('hide');
        } else {
            //Show filter panel
            $this.addClass('active');
            $this.find('.filter-show').addClass('hide');
            $this.find('.filter-hide').removeClass('hide');
            $('.filter-content').removeClass('hide');
            $('.filter-container').css('display', 'block');
            if ($('#filters-selected').children().length > 0) {
                $('.filter-container').css('border-bottom', '1px solid #000');
            }
            $('#filters-selected').addClass('hide');
            $('.mCustomScrollbar').mCustomScrollbar();
        }

        // trigger scroll to set the header
        $(window).trigger('scroll');
    });

    // Sort Toggle
    $cache.main.on("click", ".sort-toggle", function (e){
        var $this = $(this);
        //Remove Filter box
        var $filterToggle = $('.filters-bar .filter-toggle');
        if ($filterToggle.length && $filterToggle.hasClass('active')) {
            $filterToggle.trigger('click');
        }
        /*$('.sort-box .bottom-border-box').removeClass('active');*/
        $('.bottom-border-box.filter .filter-toggle').removeClass('active');
        if($this.hasClass('active')){
            //Close Menu
            $this.removeClass('active');
            $this.parent().parent().parent().find('.sort-by-container').addClass('hide');
            $this.parent().parent().find('.bottom-border-box.sort').removeClass('active');
        }else{
            //Show menu
            $this.addClass('active');
            $this.parent().parent().parent().find('.sort-by-container').removeClass('hide');
            $this.parent().parent().find('.bottom-border-box.sort').addClass('active');
        }
    });

    // Close Filter and Sort on clicking outside the filters
    $('body, html').on('click', function (e) {
        var $target = $(e.target);
        if ($target.closest('.filters-bar .filter-content').length ||
            $target.closest('.filters-bar .filter-toggle').length ||
            $target.closest('.filters-bar .sort-box').length || 
            $target.closest('.filters-bar .clear-filters-text').length) {
            return;
        }

        // close Filter
        var $filterToggle = $('.filters-bar .filter-toggle');
        if ($filterToggle.length && $filterToggle.hasClass('active')) {
            $filterToggle.trigger('click');
        }

        // close Sort
        var $sortToggle = $('.filters-bar .sort-toggle');
        if ($sortToggle.length && $sortToggle.hasClass('active')) {
            $sortToggle.trigger('click');
        }
    });

    $cache.main.on("click", ".refinements-view-controls", function (e){
        var $this = $(this),
            $viewMoreRefine = $this.find('.refinements-viewmore'),
            $viewLessRefine = $this.find('.refinements-viewless'),
            $showItems = $this.parent().find('ul').data('show'),
        	$showItemsTablet = $this.parent().find('ul').data('showtablet');
        if($viewMoreRefine.hasClass('hide')){
            //Close Menu
            $viewLessRefine.addClass('hide');
            $viewMoreRefine.removeClass('hide');
            var $it = 1;
            $this.parent().find('.refinement-list li').each(function(){
                if($it > $showItems){
                    $( this ).addClass('hide');
                }
                $it++;
            });
        }else{
            //Show menu
            $viewLessRefine.removeClass('hide');
            $viewMoreRefine.addClass('hide');
            $this.parent().find('li.hide').each(function(){
                $( this ).removeClass('hide');
            });
        }
        if($viewMoreRefine.hasClass('hideTablet')){
            //Close Menu
            $viewLessRefine.addClass('hideTablet');
            $viewMoreRefine.removeClass('hideTablet');
            var $it = 1;
            $this.parent().find('.refinement-list li').each(function(){
                if($it > $showItemsTablet){
                    $( this ).addClass('hideTablet');
                }
                $it++;
            });
        }else{
            //Show menu
            $viewLessRefine.removeClass('hideTablet');
            $viewMoreRefine.addClass('hideTablet');
            $this.parent().find('li.hideTablet').each(function(){
                $( this ).removeClass('hideTablet');
            });
        }
    });

    // handle toggle refinement blocks
    $cache.main.on("click", ".refinement-wrapper a, .pagination a, .breadcrumb-refinement-value a", function (e) {
        if($(this).parent().hasClass("unselectable")) { return; }
        var catparent = $(this).parents('.category-refinement');
        if(catparent.length > 0){
            return true;
        }
        e.preventDefault();
        var uri = util.getUri(this);

        if($(this).closest('.refinement.Category').length > 0 || uri.hash.substring(1) == '') {
            // For when a category refinement is clicked or when a color/size/etc. refinement is cleared
            window.location.href = encodeURI(decodeURIComponent(this.href));
        } else {
            // For when a color/size/etc. refinement is clicked
            setRefinementCookies();
            var refineUrl = uri.hash.substring(1);
            window.location.hash = encodeURI(decodeURIComponent(refineUrl));
        }
        return false;
    });

    $cache.main.on('click', '.gc-check-balance-header', function (e) {
    	e.preventDefault();
    	$(this).toggleClass('expanded');
    });
    //Sub Toggle
    $cache.main.on("click", ".expandable .sub-toggle", function (e) {
        e.preventDefault();
        var $this = $(this);
        var miniList = $this.parent().next();
        if(miniList.length > 0 && (miniList.css('display') == 'none')){
            miniList.css("display", "block");
            $this.find(".plus_minus").html("&#8211;");
            if($this.parent().hasClass("click-collapsed")){
                $this.parent().removeClass("click-collapsed");
            }
            if(!$this.parent().hasClass("click-expanded")){
                $this.parent().addClass("click-expanded");
            }
        }else{
            miniList.css("display", "none");
            $this.find(".plus_minus").html("+");
            if(!$this.parent().hasClass("click-collapsed")){
                $this.parent().addClass("click-collapsed");
            }
            if($this.parent().hasClass("click-expanded")){
                $this.parent().removeClass("click-expanded");
            }
        }

        $(this).toggleClass('expanded');

    });
    subToggleInit();

    //Sort Drop down
    $cache.main.on("click", ".sort-by-list .sort-item", function (e) {
        var $this = $(this);
        var currentHash = window.location.hash;
        var newSortUrl = util.getUri($this.data("url")); 
            // If newSortUrl contains hash
        if(newSortUrl.hash.length > 1) {
                // Seperate the hash params
            var hashLoop = newSortUrl.hash.substr(1).split("&");
                // Loop through hash params
            for(var i=0; i <= hashLoop.length-1; i++){
                    // Split hash param 
                var qsVal = hashLoop[i].split('=');
                    // Check if qs is in current query string
                if(currentHash.indexOf(qsVal[0]) !== -1){
                        // Replace value in querystring with new sort param
                    var regex = new RegExp(qsVal[0] +'=[^\&]+', 'g');
                    currentHash = currentHash.replace(regex, hashLoop[i]);
                }
                else {
                        // else add sort querystring param to hash
                     currentHash += "&"+hashLoop[i];
                }
            }
            window.location.hash = currentHash
        }
        else {
            window.location.href = newSortUrl;
        }
    });
    if($(".sort-by-list .sort-item.sorted-by").length > 0){
        var selectedText = $(".sort-by-list .sorted-by span").html();
        $(".filter-buttons .sort-toggle span.sort-by-text").html(selectedText);
    }

    //Updating Grid for Favorites
    $("#pdpMain, #pdpQuick").on("click", ".favourites-toggle a, .favorites-no-session", function (e) {
        e.preventDefault();

        var uri = util.getUri(this);
        var refineUrl = uri.hash.length > 1 ? uri.hash.substr(1) : "";
        window.location.hash = refineUrl;
        return false;
    });

    $cache.main.on("click", "a.refinement-link", function (e) {
        e.preventDefault();
        var uri = util.getUri($(this).attr('data-hreflink'));
        var refineUrl = uri.hash.length > 1 ? uri.hash.substr(1) : "";
        if (refineUrl != ''){
            window.location.hash = refineUrl;
        }else{
            window.location.href = $(this).attr('data-hreflink');
        }
        return false;
    });

    // handle events item click. append params.
    $cache.main.on("click", "#search-result-items .product-tile a.thumb-link, #search-result-items .product-tile a.name-link", function (e) {

        var a = $(this);
        // get current page refinement values
        var wl = window.location;
        var qsParams = (wl.search.length > 1) ? util.getQueryStringParams(wl.search.substr(1)) : {};
        var hashParams = (wl.hash.length > 1) ? util.getQueryStringParams(wl.hash.substr(1)) : {};
        // merge hash params with querystring params
        var params = $.extend(hashParams, qsParams);
        if (!params.start) {
            params.start = 0;
        }
        // get the index of the selected item and save as start parameter
        var tile = a.closest(".product-tile");
        var idx = tile.data("idx") ? +tile.data("idx") : 0;
        // convert params.start to integer and add index
        params.start=(+params.start)+(idx+1);
        var cgid = tile.data("cgid") ? tile.data("cgid") : '';
        if(cgid != ''){
            params.cgid=cgid;
        }

        if(typeof katespade != 'undefined'){
            // only include hash for KateSpade
            a[0].hash = $.param(params);
        }

        // use the full url
        var fullUrl = a.attr('data-full-url');
        if(fullUrl){
            fullUrl += a[0].hash;
            a.attr('data-full-url', fullUrl);
            if($.browser.msie && $.browser.version < 10) {
                window.location = fullUrl;
            }
            e.preventDefault();
        }

    });

///////////////////////////////////////// handle sorting change  /////////////////////////////////////////////////////////

    $cache.main.on("change", ".sort-by select", function (e) {

        var refineUrl = $(this).find('option:selected').val();
        var uri = util.getUri(refineUrl);
        window.location.hash = uri.query.substr(1);
        return false;
    })
    .on("change", ".items-per-page select", function (e) {
        var refineUrl = $(this).find('option:selected').val();
        var uri = util.getUri(refineUrl);
        window.location.hash = uri.query.substr(1);
        return false;
    });
    // handle hash change
    $(window).on('hashchange', function() {
        updateProductListing(true);
    });

    // product grid swatches
    jQuery(".product-swatches a.more").on('click', function(){
        //jQuery(this).parent().find('.hidden-swatch').slideToggle();
        jQuery(this).closest('.product-swatches')
                    .addClass('showall');
        return false
    });
    jQuery('.product-swatches img.close-swatches-pane').on('click', function() {
        jQuery(this).closest('.product-swatches')
                    .removeClass('showall');
    });



    // Product Tile - show more swatches
    showMoreSwatches();


    // handle events for updating grid
    $main.on('click', '.refinements a, .pagination a, .breadcrumb-refinement-value a, .filter-clear-all .clear-filters-text', function (e) {
        // don't intercept for category and folder refinements, as well as unselectable
        if ($(this).parents('.category-refinement').length > 0 || $(this).parents('.folder-refinement').length > 0 || $(this).parent().hasClass('unselectable')) {
            return;
        }
        //Remove URL hash if user clicks on clear all filters
        if ($(this).hasClass('clear-filters-text')) {
            window.history.pushState({}, window.document.title, this.href);
            window.location.hash = '';
        }
        e.preventDefault();
        updateProductListing(this.href);
    });

    // handle events item click. append params.
    $main.on('click', '.product-tile a:not("#quickviewbutton")', function () {
        var a = $(this);
        // get current page refinement values
        var wl = window.location;

        var qsParams = (wl.search.length > 1) ? util.getQueryStringParams(wl.search.substr(1)) : {};
        var hashParams = (wl.hash.length > 1) ? util.getQueryStringParams(wl.hash.substr(1)) : {};

        // merge hash params with querystring params
        var params = $.extend(hashParams, qsParams);
        if (!params.start) {
            params.start = 0;
        }
        // get the index of the selected item and save as start parameter
        var tile = a.closest('.product-tile');
        var idx = tile.data('idx') ? + tile.data('idx') : 0;

        // convert params.start to integer and add index
        params.start = (+params.start) + (idx + 1);
        // set the hash and allow normal action to continue
        a[0].hash = $.param(params);
    });

    // handle sorting change
    $main.on('change', '.sort-by select', function (e) {
        e.preventDefault();
        updateProductListing($(this).find('option:selected').val());
    })
    .on('change', '.items-per-page select', function () {
        var refineUrl = $(this).find('option:selected').val();
        if (refineUrl === 'INFINITE_SCROLL') {
            $('html').addClass('infinite-scroll').removeClass('disable-infinite-scroll');
        } else {
            $('html').addClass('disable-infinite-scroll').removeClass('infinite-scroll');
            updateProductListing(refineUrl);
        }
    });

    var $productTiles = $('.tiles-container .product-tile');
    var $gridTiles = $('.tiles-container .grid-tile');
    if ($productTiles.length > 0) {
        imagesLoaded('.tiles-container').on('always', function () {
            // Synchronize height of product tiles
            $productTiles.syncHeight()
                .each(function(idx) {
                    $(this).data('idx', idx);
                });
        });
    }
}
//push product tile click to dataLayer
$(".product-tile").click(function(){
	var productID = $.trim($(this).attr('data-itemid'));
	if (dataLayer) {
		var ecommerce = null;
		for (var i = 0; i < dataLayer.length; i++) {
			if ('ecommerce' in dataLayer[i]) {
				var ecommerce = dataLayer[i].ecommerce;
				break;
			}
		}
		if (ecommerce != undefined && 'impressions' in ecommerce) {
			var p;
			for (var i = 0; i < ecommerce.impressions.length; i++) {
				p = ecommerce.impressions[i];
				if (p.id == productID){
					dataLayer.push(app.datalayer.getEvent("event", "ecomProductImpressionClick", "ecommerce", " ", "click", p, p.category));
				}
			}
		}
	}
});

function addBackgroundCover() {
	$('.top-banner').before("<div id='background-cover'></div>");
}

exports.init = function () {
    if (SitePreferences.LISTING_INFINITE_SCROLL) {
        $(window).on('scroll', infiniteScroll);
    }
    $cache = {
        main : $("#main"),
        items : $("#search-result-items")
    };
    $cache.content = $cache.main.find(".search-result-content");
    compareWidget.init();
    if (SitePreferences.LISTING_INFINITE_SCROLL) {
        $(window).on('scroll', infiniteScroll);
    }
    updateProductListing(false);
    productTile.init();
    initializeEvents();
    tileSync();
    oasTiles();
    smartResize(oasTiles);
    $('map').imageMapResize();
};

},{"../compare-widget":30,"../giftcard":37,"../imagemapresizer":39,"../interact":40,"../product-tile":67,"../progress":68,"../smartresize":74,"../util":82,"imagesloaded":4}],64:[function(require,module,exports){
'use strict';
exports.init = function () {
    $('#homepage-slider')
        // responsive slides
        .on('jcarousel:create jcarousel:reload', function () {
            var element = $(this),
                width = element.innerWidth();
            element.jcarousel('items').css('width', width + 'px');
        })
        .jcarousel({
            wrap: 'circular'
        })
        .jcarouselAutoscroll({
            interval: 5000
        });
    $('#homepage-slider .jcarousel-control')
        .on('jcarouselpagination:active', 'a', function () {
            $(this).addClass('active');
        })
        .on('jcarouselpagination:inactive', 'a', function () {
            $(this).removeClass('active');
        })
        .jcarouselPagination({
            item: function (page) {
                return '<a href="#' + page + '">' + page + '</a>';
            }
        });

    $('#vertical-carousel')
        .jcarousel({
            vertical: true
        })
        .jcarouselAutoscroll({
            interval: 5000
        });
    $('#vertical-carousel .jcarousel-prev')
        .on('jcarouselcontrol:active', function () {
            $(this).removeClass('inactive');
        })
        .on('jcarouselcontrol:inactive', function () {
            $(this).addClass('inactive');
        })
        .jcarouselControl({
            target: '-=1'
        });

    $('#vertical-carousel .jcarousel-next')
        .on('jcarouselcontrol:active', function () {
            $(this).removeClass('inactive');
        })
        .on('jcarouselcontrol:inactive', function () {
            $(this).addClass('inactive');
        })
        .jcarouselControl({
            target: '+=1'
        });
};

},{}],65:[function(require,module,exports){
'use strict';
var dialog = require('../dialog'),
    selectBoxIt = require('../selectboxit');

//SG
// $('.store-details-link').on('click', function (e) {
//     e.preventDefault();
//     dialog.open({
//         url: $(e.target).attr('href')
//     });
// });

// Store dom collections
var $cache = {};
// Create the tooltip and its text
var infoWindow;

// Create the large map that is on the find and results page
function largeMap(){
    // Make sure the google api has loaded
    if(typeof google === 'undefined') return false;
    // Call to google
    infoWindow = new google.maps.InfoWindow();
    // Center of USA - {lat : 37.090240, lng : -95.712891};
    $cache.defaultCenter = new google.maps.LatLng(37.090240, -95.712891);

    // Load map with the userLocation
    $cache.mapLarge = new google.maps.Map( $('.wide-map')[0], {
        center : $cache.defaultCenter,
        mapTypeId : google.maps.MapTypeId.ROADMAP,
        zoom : 8,
        minZoom : 2,
        streetViewControl : false});

    $cache.boundsLarge = new google.maps.LatLngBounds();
    // Test to see if we have a list of stores and if so, add markers

    var postalCode = $('input[name="postalCode"]');

    if ($cache.stores.length) {
        addMarkers();
    } else if (postalCode.length) {
        var postal = postalCode.val();
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({'address':postal},function(results,status){
            if (status == google.maps.GeocoderStatus.OK) {
                $cache.mapLarge.setCenter(results[0].geometry.location);
            }
        });
    }
}

// Add markers to
function addMarkers(){
    // Loop the stores and add the markers
    $cache.stores.each(function(index){
        var store = $(this);
        // If the store doesn't have correct lat/lng data, we return out of the function and don't add it to the map.
        // Returning true allows the loop to continue
        if(store.data('isvalid').toString() != 'true') return true;
        var point = new google.maps.LatLng( parseFloat(store.data('lat')), parseFloat(store.data('lng')) );
        var icon = app.resources['GOOGLE_PIN_' + store.data('storebrand').toUpperCase()];
        var marker = new google.maps.Marker({position : point, map : $cache.mapLarge, icon : icon});

        var html= '<div class="google-location-hopup">' + store.find('.store-information').html() + store.find('.store-address').html() + '<a href="' + store.data('directions') + '" target="_blank">' + app.resources['GOOGLE_DIRECTION'] + '</a></div>';

        // Add a listener to open the tooltip when a user clicks on one of the markers
        google.maps.event.addListener(marker, 'click', function(){
            infoWindow.setContent(html);
            infoWindow.open($cache.mapLarge, marker);
        });

        // Set bounds of map
        $cache.boundsLarge.extend(point);
    });

    // Keep map in bounds
    $cache.mapLarge.fitBounds($cache.boundsLarge);
    var listener = google.maps.event.addListener($cache.mapLarge, "idle", function() {
        if($cache.mapLarge.getZoom() > 12) $cache.mapLarge.setZoom(12);
        google.maps.event.removeListener(listener);
    });
}

// Allow sorting of search results
function sortTabs(){
    // Determine selected tab based on site ID and setup functionality
    $('.store-tabs-menu li').each(function(index){
        var li = $(this);

        // li click functionality
        li.on('click', function(e){
            e.preventDefault();
            // Only allow click if not selected, otherwise select it as active tab
            if(li.hasClass('current')) return;
            // Release previous li
            $cache.tabNav.find('.current').toggleClass('current');
            // Hold/deactivate current li
            li.toggleClass('current');

            // Fade out previous results
            $cache.searchContent.find('.tab-content.current').toggleClass('current').stop(true, true).fadeOut(function(){
                // Fade in new results
                $('div#' + li.attr('id') + 'Section').toggleClass('current').stop(true, true).fadeIn();
            });
        });
    });
}

// FILTER KATE SPADE RESULTS - SPECIFIC ONLY TO THE KATE SPADE TAB
function sortKateResults(){
    $('.search-sort a').on('click', function(e){
        // Prevent default
        e.preventDefault();
        var link = $(this);

        // If current link isn't active
        if(link.attr('class') != 'active'){
            // Release previously active and make this active
            $('.search-sort a.active').toggleClass('active');
            link.toggleClass('active');

            // Sort stores
            // Test to see if we have any stores to display at the end of the filter, otherwise display the no search results alert
            var showing = false;
            var sort = link.attr('href');
            // Hide stores
            $cache.kateStores.each(function(){
                var store = $(this);
                // Hide it from the start
                store.css('display', 'none');
                // Show it if matches sort criteria
                if(sort == "all" || store.hasClass(sort)){
                    store.css('display', 'block');
                    showing = true;
                }
            });
            // If we have no stores to show, we display the alert
            if(!showing) $cache.filter.show();
            else $cache.filter.hide();

            // Hide/Show states
            $cache.states.each(function(index){
                var state = $(this);
                var stateShow = false;

                state.find('.store').each(function(){
                    if($(this).css('display') == "block"){
                        stateShow = true;
                        return;
                    }
                });

                // If we have stores to display, we show the state, otherwise we hide it
                if(stateShow){
                    // If state is inactive, show it
                    if(state.hasClass('inactive')) {
                        state.toggleClass('inactive');
                        state.find('h1.stateHeader').toggleClass('inactive');
                        state.find('.stores').show();
                    }
                    // Display state
                    state.show();
                } else state.hide();
            });
            // Hide/Show countries
            $cache.countries.each(function(index){
                var country = $(this);
                var countryShow = false;

                country.find('.store').each(function(){
                    if($(this).css('display') == "block"){
                        countryShow = true;
                        return;
                    }
                });

                // If we have stores to display, we show the state, otherwise we hide it
                if(countryShow){
                    // If state is inactive, show it
                    if(country.hasClass('inactive')) {
                        country.toggleClass('inactive');
                        country.find('h1.stateHeader').toggleClass('inactive');
                        country.find('.stores').show();
                    }
                    // Display state
                    country.show();
                } else country.hide();
            });
        }
    });
    // TOGGLE STATE HEADERS
    $('.stateHeader').each(function(index){
        var header = $(this);
        header.on('click', function(){
            header.parent().toggleClass('inactive');
            header.toggleClass('inactive');
            header.parent().find('.store').toggle('fast');
        });
    });
}

// IE8 FIX FOR FORM FOCUS: KS-473
function internetExplorerZipFocus(){
    var form = $('form.zip');
    var btn = form.find('button[type="submit"]');

    form.on('submit',function(e){
        e.preventDefault();

        // Collect the required form fields
        var data = "?" + form.serialize();
        // Figure out what type of call this is (from the button)
        data += "&" + btn.attr("name") + "=" + btn.attr("value");
        // Add the serialize data to the form submit
        var url = form.attr('action') + data;

        // Redirect to the correct URL
        window.location = url;
    });
}

// Instantiate the storelocator
var storelocator = {
    init : function(){
        // Cache top level elements
        $cache.tabNav = $('.store-tabs-menu');
        $cache.searchContent = $('.search-content');
        // Cache dom
        $cache.resultsBlock = $('#katespadeContentSection .resultsBlock');
        $cache.filter = $('#katespadeContentSection .filter-no-results');
        $cache.countries = $cache.resultsBlock.find('.country');
        $cache.states = $cache.resultsBlock.find('.state');
        $cache.stores = $cache.searchContent.find('.store');
        $cache.kateStores = $cache.resultsBlock.find('.store');
        // Initialize the sorting/filtering functionality of the kate tab
        sortKateResults();
        // Fade in current content
        $cache.searchContent.find('.tab-content.current').stop(true, true).fadeIn();
        // Allow tab menu to opperate
        sortTabs();

        // SITE SPECIFIC FUNCTIONALITY
        // If on katespade.com, we collect information for the large map
        largeMap();

        // Allow popup of small map (also used for account-nearest stores)
        this.detailsHopup();

        selectBoxIt.selectBoxIt($('.selectBoxed select'));

        // Make sure the zip code search form works correctly on IE8: KS-473
        if($('html').hasClass('ie8')) internetExplorerZipFocus();
    },
    // SMALL MAP HOPUP FUNCTIONALITY
    detailsHopup : function(){
        // Cache Dom
        $cache.storeDetails = $('#store-details-hopup');
        $cache.storeInfo = $cache.storeDetails.find('.store-information');
        $cache.storeDetailsMap = $cache.storeDetails.find('.details-map');
        $cache.popupOverlay = $('.popup-overlay')

        // Hook for the 'map' link
        $('.google-map').on('click', function(e){
            e.preventDefault();
            // If google isn't loaded yet, return
            if(typeof google === 'undefined') return false;

            var link = $(this);
            var id = link.attr('href');
            var store = $('#' + id);
            var point = new google.maps.LatLng(parseFloat(store.data("lat")), parseFloat(store.data('lng')));
            var icon = app.resources['GOOGLE_PIN_' + store.data('storebrand').toUpperCase()];
            // Hide any previous store info
            $cache.storeInfo.children().hide();
            // Check to see if we have created the store info, otherwise, populate the store info
            if(!$cache[id]) {
                $cache.storeInfo.append('<div id="details-' + id + '"></div>');
                $cache[id] = $('#details-' + id);
                store.find('.store-name').clone().appendTo($cache[id]);
                store.find('.store-address').clone().appendTo($cache[id]);
                store.find('.store-hours').clone().appendTo($cache[id]);
                // Create directions link
                $cache[id].append('<a class="directions-link" target="_blank" href="' + store.data('directions') + '">Directions</a>');
                $cache[id].addClass(store.data('storebrand') + 'Info');
            } else $cache[id].show();

            // Add it to the dialog hopup
            $cache.storeDetails.dialog({width: 'auto', height: 'auto', dialogClass : 'store-details-hopup', modal: true });
            // if dialog is open, return
            if(!$cache.storeDetails.dialog("isOpen")) $cache.storeDetails.dialog('open');

            // Create the map if needed
            if(!$cache.mapSmall) {
                $cache.mapSmall = new google.maps.Map($cache.storeDetailsMap[0], {center : point, mapTypeId : google.maps.MapTypeId.ROADMAP, zoom : 6, streetViewControl : false});
                $cache.boundsSmall = new google.maps.LatLngBounds();
            }
            // If previous marker, remove it
            if($cache.markerSmall) $cache.markerSmall.setMap(null);
            // Create new marker
            $cache.markerSmall = new google.maps.Marker({position : point, map : $cache.mapSmall, icon : icon});
            // Make marker bounce
            $cache.markerSmall.setAnimation(google.maps.Animation.DROP);
            // Needed so that google will redraw regions of the map once it is in the hopup and not hidden, which gave it a 0 height
            google.maps.event.trigger($cache.mapSmall, "resize");
            $cache.mapSmall.setZoom(6);
            // Set bounds of map
            $cache.mapSmall.setCenter(point);
        });
    }
};

module.exports = storelocator;


},{"../dialog":34,"../selectboxit":73}],66:[function(require,module,exports){
'use strict';

var addProductToCart = require('./product/addToCart'),
    page = require('../page'),
    login = require('../login'),
    util = require('../util');

exports.init = function () {
    addProductToCart();
    $('#editAddress').on('change', function () {
        page.redirect(util.appendParamToURL(Urls.wishlistAddress, 'AddressID', $(this).val()));
    });

    //add js logic to remove the , from the qty feild to pass regex expression on client side
    $('.option-quantity-desired input').on('focusout', function () {
        $(this).val($(this).val().replace(',', ''));
    });

    login.init();

};

},{"../login":42,"../page":44,"../util":82,"./product/addToCart":55}],67:[function(require,module,exports){
'use strict';

var util = require('./util');

var imagesLoaded = require('imagesloaded'),
    quickview = require('./quickview');

var $cache = {};

function initQuickViewButtons() {
    $('.tiles-container .product-image').on('mouseenter', function () {
    	var $this = $(this);
        var $qvButton = $('#quickviewbutton');
        if ($qvButton.length === 0) {
            $qvButton = $('<a id="quickviewbutton" class="quickview">' + Resources.QUICK_VIEW + '<i class="fa fa-arrows-alt"></i></a>');
            $qvButton.on('click', function (e) {
                e.preventDefault();
                var tileType = $(this).parents('.product-tile').data('tiletype');
                //Very specific case for making inputs outside of dialog available
                $.widget( "ui.dialog", $.ui.dialog, {
                    _allowInteraction: function( event ) {
                        return !!$( event.target ).is( "input" ) || this._super( event );
                    }
                });
                quickview.show({
                    url: $(this).attr('href'),
                    source: 'quickview',
                    customClass: typeof tileType != 'undefined' ? tileType : ''
                });
            });
        }

        var $link = $this.find('.thumb-link');
        $qvButton.attr({
            'href': $link.attr('href'),
            'title': $link.attr('title')
        }).appendTo(this);
    });
}

function gridViewToggle() {
    $('.toggle-grid').on('click', function () {
        $('.search-result-content').toggleClass('wide-tiles');
        $(this).toggleClass('wide');
    });
}

/**
 * @private
 * @function
 * @description Initializes events on the product-tile for the following elements:
 * - swatches
 * - thumbnails
 */
function initializeEvents() {
    initQuickViewButtons();
    gridViewToggle();
    
    $cache.container.on('touchstart click mouseenter', '.swatch-list a.swatch', function (e) {
        // don't follow the link on mobile devices
        if (util.isMobile()) {
            e.preventDefault();
        }
        // get current thumb details
        var link = $(this);
        var tile = link.closest(".grid-tile");
        var thumb = tile.find(".product-image a.thumb-link img").filter(":not(.lazy):first");
        var thumbLink = tile.find(".product-image a.thumb-link");
        var secondThumb = tile.find(".product-image a.thumb-link img").filter(":not(.lazy):last");
        var swatchImg = link.children("img").filter(":first");
        var data = link.data("thumb");

        var currentAtts = {
            src : thumb.attr("src"),
            alt : thumb.attr("alt"),
            title : thumb.attr("title")
        }

        thumb.attr({
            src : (thumb.data('alt-src') == data.src) ? data['alt-src'] : data.src,
            alt : decodeURIComponent(data.alt)
        }).data('alt-src', data['alt-src']);

        secondThumb.attr({
            src : (thumb.data('alt-src') == data.src) ? data.src : data['alt-src'],
            alt : decodeURIComponent(data.alt)
        }).data('alt-src',thumb.attr('src'));

        thumb.attr('data-assetname',swatchImg.data('assetname'));
        swatchImg.data("thumb", currentAtts);
        // Remove failed class in case the new swatch has images the previous swatch lacked
        thumb.removeClass('failed');

        if (secondThumb.attr("src") == "null") {
            secondThumb.addClass('failed');
        } else {
            secondThumb.removeClass('failed');
        }
        
        // set thumb product's href equal to swatch's href
        thumbLink.attr('href', link.attr('href'));
        
    });
    $cache.container.on('mouseleave', '.swatch-list', function () {
        // Restore current thumb image
        var $tile = $(this).closest('.product-tile'),
            $thumb = $tile.find('.product-image .thumb-link img').eq(1),
            $thumbLink = $tile.find(".product-image a.thumb-link"),
            $selectedSwatch = $tile.find('.swatch-list .swatch.selected'),
            baseurl = $thumb.data('baseurl');
            
        // set up base image
        if ($selectedSwatch.length && $selectedSwatch.data('thumb') && $selectedSwatch.data('thumb')['src']) {
            $thumb.attr('src', $selectedSwatch.data('thumb')['src']);
        } else if (baseurl) {
            $thumb.attr('src', baseurl);
        }
        // set up base href
        if ($selectedSwatch.length) {
            $thumbLink.attr('href', $selectedSwatch.attr('href'));
        }
        
    });

}

exports.init = function () {
    $cache = {
        container: $('.tiles-container')
    };

    initializeEvents();
};

},{"./quickview":69,"./util":82,"imagesloaded":4}],68:[function(require,module,exports){
'use strict';

var $loader;

/**
 * @function
 * @description Shows an AJAX-loader on top of a given container
 * @param {Element} container The Element on top of which the AJAX-Loader will be shown
 */
var show = function (container) {
    var target = (!container || $(container).length === 0) ? $('body') : $(container);
    $loader = $loader || $('.loader');

    if ($loader.length === 0) {
        $loader = $('<div/>').addClass('loader')
            .append($('<div/>').addClass('loader-indicator'), $('<div/>').addClass('loader-bg'));
    }
    return $loader.appendTo(target).show();
};
/**
 * @function
 * @description Hides an AJAX-loader
 */
var hide = function () {
    if ($loader) {
        $loader.hide();
    }
};

exports.show = show;
exports.hide = hide;

},{}],69:[function(require,module,exports){
'use strict';

var dialog = require('./dialog'),
    product = require('./pages/product'),
    util = require('./util'),
    _ = require('lodash');


var makeUrl = function (url, source, productListID) {
    if (source) {
        url = util.appendParamToURL(url, 'source', source);
    }
    if (productListID) {
        url = util.appendParamToURL(url, 'productlistid', productListID);
    }
    return url;
};

/**
 * @param {String} url Product URL
 * @returns {String} Product Url without search parameters if it was seo-friendly url
 *          or Product Url with pid search parameter only if it was not seo-friendly
 */
function normalizeProductUrl(url) {
    if (url.indexOf('?') !== -1) {
        var pidPosition = url.indexOf('?pid=');
        if (pidPosition === -1) {
            pidPosition = url.indexOf('&pid=');
        }
        if (pidPosition !== -1) {
            var urlNoParams = url.substring(0, url.indexOf('?'));
            var pidValueStartPosition = pidPosition + 5;
            var pidValueEndPosition = url.indexOf('&', pidValueStartPosition);
            if (pidValueEndPosition === -1) {
                pidValueEndPosition = url.length;
            }
            var pidValue = url.slice(pidValueStartPosition, pidValueEndPosition);
            if (pidValue !== '') {
                return urlNoParams + '?pid=' + pidValue;
            } else {
                return urlNoParams;
            }
        } else {
            return url.substring(0, url.indexOf('?'))
        }
    } else {
        return url;
    }
}

function allowOutOfStockClick(e, overlay){
	e.preventDefault();
    overlay.closest('li').find('a').click();
}

var quickview = {
    init: function () {
        if (!this.exists()) {
            this.$container = $('<div/>').attr('id', 'QuickViewDialog').appendTo(document.body);
        }
        this.productLinks = $('#search-result-items .product-tile:not(.product-set-tile) .thumb-link').map(function (index, thumbLink) {
            return normalizeProductUrl($(thumbLink).attr('href'));
        });
        $(".promotion-callout a.tooltip").on("click", function(e) {
        	e.preventDefault();
        });
        
    },

    setup: function (qvUrl) {

        // hide/show thumbnail arrows based on swatch list length
        var $thumbnails = $('#thumbnails');
        var thumbsWidth = 0;
        var $thumbsPrevArrow = $('.jcarousel-control-prev');
        var $thumbsNextArrow = $('.jcarousel-control-next');
        $('.thumb').each(function() {
            thumbsWidth += $(this).width();
        })
        if (thumbsWidth <= $('#thumbnails').width()) {
            $thumbsPrevArrow.hide();
            $thumbsNextArrow.hide();
        }

        var $btnNext = $('.quickview-next'),
            $btnPrev = $('.quickview-prev');

        product.init();

        this.productLinkIndex = _(this.productLinks).findIndex(function (url) {
            return url === normalizeProductUrl(qvUrl);
        });

        // hide the buttons on the compare page or when there are no other products
        if (this.productLinks.length <= 1 || $('.compareremovecell').length > 0) {
            $btnNext.hide();
            $btnPrev.hide();
            return;
        }

        if (this.productLinkIndex === this.productLinks.length - 1) {
            $btnNext.attr('disabled', 'disabled');
        }
        if (this.productLinkIndex === 0) {
            $btnPrev.attr('disabled', 'disabled');
        }

        $btnNext.on('click', function (e) {
            e.preventDefault();
            this.navigateQuickview(1);
        }.bind(this));
        $btnPrev.on('click', function (e) {
            e.preventDefault();
            this.navigateQuickview(-1);
        }.bind(this));
        
        if (typeof tfc !== "undefined" && typeof tfc.calculate === "function") {
    		tfc.calculate(); // Add TrueFit widget
    	}
    },

    /**
     * @param {Number} step - How many products away from current product to navigate to. Negative number means navigate backward
     */
    navigateQuickview: function (step) {
        // default step to 0
        var self = this;
        this.productLinkIndex += (step ? step : 0);
        var url = makeUrl(this.productLinks[this.productLinkIndex], 'quickview');
        dialog.replace({
            useContainer: self.$container,
            url: url,
            callback: function() {
                quickview.setup.call(quickview, url);
                // add class for gift-card products
                var $quickViewDialog = $('.ui-dialog_quick-view');
                var $isGift = $quickViewDialog.find('#isGiftCard');
                if ($isGift.length) {
                    $quickViewDialog.addClass('giftCard');
                } else {
                    $quickViewDialog.removeClass('giftCard');
                }
            }
        });       
        
    },

    /**
     * @description show quick view dialog
     * @param {Object} options
     * @param {String} options.url - url of the product details
     * @param {String} options.source - source of the dialog to be appended to URL
     * @param {String} options.class - custom class to add to the dialog
     * @param {String} options.productlistid - to be appended to URL
     * @param {Function} options.callback - callback once the dialog is opened
     */
    show: function (options) {
        var url;
        if (!this.exists()) {
            this.init();
        }
        url = makeUrl(options.url, options.source, options.productlistid);
        var dialogWidth = window.matchMedia('(min-width: 961px)').matches ? 820 : 720;
        if ((options.source === 'cart' || options.source === 'sfl-add' || options.source === 'giftregistry') && window.innerWidth <= 768) {
            dialogWidth = (window.innerWidth <= 668) ? (window.innerWidth).toString() : '668';
        }
        if ($('.ui-dialog_quick-view').length) {
            $('.ui-dialog_quick-view').remove();
        }
        this.$container.empty();

        dialog.open({
            target: this.$container,
            url: url,
            options: {
                width: dialogWidth,
                title: Resources.QUICK_VIEW_POPUP,
                dialogClass: 'ui-dialog_quick-view ' + (typeof options.customClass != 'undefined' ? options.customClass : ''),
                open: function () {
                    this.setup(url);
                    if (typeof options.callback === 'function') { options.callback(); }
                    if ($('#pdpMain.gift-card').length) {
                    	var linkurl = $('#pdpMain.gift-card').find('.full-details-link a').attr('href');
                    	if (linkurl) {
                    		$('#pdpMain.gift-card .swatches.Color li a').attr('href',linkurl);
                    	}
                    }
                }.bind(this)
            }
        });
        //must be initialize in the dialog creation so it is available 
        $('#QuickViewDialog').on('click', '.unselectable-overlay', function (e) {
            allowOutOfStockClick(e,$(this));
        });
    },
    exists: function () {
        return this.$container && (this.$container.length > 0);
    }
};

module.exports = quickview;

},{"./dialog":34,"./pages/product":58,"./util":82,"lodash":5}],70:[function(require,module,exports){
'use strict';

/**
 * copied from https://github.com/darkskyapp/string-hash
 */
function hashFn(str) {
    var hash = 5381,
        i = str.length;

    while (i) {
        hash = (hash * 33) ^ str.charCodeAt(--i);
    }
    /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
    * integers. Since we want the results to be always positive, convert the
    * signed int to an unsigned by doing an unsigned bitshift. */
    return hash >>> 0;
}

/**
 * Create rating based on hash ranging from 2-5
 * @param pid
 */
function getRating(pid) {
    return hashFn(pid.toString()) % 30 / 10 + 2;
}

module.exports = {
    init: function () {
        $('.product-review').each(function (index, review) {
            var pid = $(review).data('pid');
            if (!pid) {
                return;
            }
            // rating range from 2 - 5
            var rating = getRating(pid);
            var baseRating = Math.floor(rating);
            var starsCount = 0;
            for (var i = 0; i < baseRating; i++) {
                $('.rating', review).append('<i class="fa fa-star"></i>');
                starsCount++;
            }
            // give half star for anything in between
            if (rating > baseRating) {
                $('.rating', review).append('<i class="fa fa-star-half-o"></i>');
                starsCount++;
            }
            if (starsCount < 5) {
                for (var j = 0; j < 5 - starsCount; j++) {
                    $('.rating', review).append('<i class="fa fa-star-o"></i>');
                }
            }
        });
    }
};

},{}],71:[function(require,module,exports){
'use strict';

/**
 * @private
 * @function
 * @description Binds event to the place holder (.blur)
 */
function initializeEvents() {
//	This code breaks search form validation
	
//    $('#q').focus(function () {
//        var input = $(this);
//        if (input.val() === input.attr('placeholder')) {
//            input.val('');
//        }
//    })
//    .blur(function () {
//        var input = $(this);
//        if (input.val() === '' || input.val() === input.attr('placeholder')) {
//            input.val(input.attr('placeholder'));
//        }
//    })
//    .blur();
}

exports.init = initializeEvents;

},{}],72:[function(require,module,exports){
'use strict';

var util = require('./util');

var currentQuery = null,
    lastQuery = null,
    runningQuery = null,
    listTotal = -1,
    listCurrent = -1,
    delay = 30,
    $resultsContainer,
    mobileMenuBreakpoint = 960;
/**
 * @function
 * @description Handles keyboard's arrow keys
 * @param keyCode Code of an arrow key to be handled
 */
function handleArrowKeys(keyCode) {
    switch (keyCode) {
        case 38:
            // keyUp
            listCurrent = (listCurrent <= 0) ? (listTotal - 1) : (listCurrent - 1);
            break;
        case 40:
            // keyDown
            listCurrent = (listCurrent >= listTotal - 1) ? 0 : listCurrent + 1;
            break;
        default:
            // reset
            listCurrent = -1;
            return false;
    }

    $resultsContainer.children().removeClass('selected').eq(listCurrent).addClass('selected');
    $('input[name="q"]').val($resultsContainer.find('.selected .suggestionterm').first().text());
    return true;
}

/*
 * @function
 * @description	The default placeholder has poor contrast on mobile, and we will not have a placeholder pseudo-element
 * 				until CSS4 is released. Until then we can have a "fake" placeholder that can be styled.
 */
function mobilePlaceholderContrast() {
	var $mobileSearchField = $('.header-search-mobile .katesearchval');
	
	$mobileSearchField.on('focus', function (e) {
    	var $this = $(this);
		var placeholderText = $this.prop('placeholder');
    	if ($this.val() === placeholderText) {
    		$this.val("");
        } else {
    		return false;
        }
    }).on('blur', function (e) {
        var $this = $(this);
        var ph = $this.prop('placeholder');
        if ($this.val() === "") {
            $this.val(ph);
        } else {
            return false;
        }
    }).val($mobileSearchField.prop('placeholder'));
}

var searchsuggest = {
    /**
     * @function
     * @description Configures parameters and required object instances
     */
    init: function (container, defaultValue) {
        var $searchContainer = $(container);
        var $searchForm = $searchContainer.find('form[name="simpleSearch"]');
        var $searchField = $searchForm.find('input[name="q"]');

        // disable browser auto complete
        $searchField.attr('autocomplete', 'off');

        // on focus listener (clear default value)
        $searchField.focus(function () {
            if (!$resultsContainer) {
                // create results container if needed
                $resultsContainer = $('<div/>').attr('id', 'search-suggestions').appendTo($searchContainer);
            }
            if ($searchField.val() === defaultValue) {
                $searchField.val('');
            }
        });
        
        $(document).on('click', function (e) {
            if (!$searchContainer.is(e.target)) {
                setTimeout(this.clearResults, 200);
            }
        }.bind(this));
        // on key up listener
        $searchField.keyup(function (e) {

            // get keyCode (window.event is for IE)
            var keyCode = e.keyCode || window.event.keyCode;

            // check and treat up and down arrows
            if (handleArrowKeys(keyCode)) {
                return;
            }
            // check for an ENTER or ESC
            if (keyCode === 13 || keyCode === 27) {
                this.clearResults();
                return;
            }

            currentQuery = $searchField.val().trim();

            // no query currently running, init an update
            if (!runningQuery) {
                runningQuery = currentQuery;
                setTimeout(this.suggest.bind(this), delay);
            }
        }.bind(this));
        
        mobilePlaceholderContrast();
    },

    /**
     * @function
     * @description trigger suggest action
     */
    suggest: function () {
        // check whether query to execute (runningQuery) is still up to date and had not changed in the meanwhile
        // (we had a little delay)
        if (runningQuery !== currentQuery) {
            // update running query to the most recent search phrase
            runningQuery = currentQuery;
        }

        // if it's empty clear the results box and return
        if (runningQuery.length === 0) {
            this.clearResults();
            runningQuery = null;
            return;
        }

        // if the current search phrase is the same as for the last suggestion call, just return
        if (lastQuery === runningQuery) {
            runningQuery = null;
            return;
        }

        // build the request url
        var reqUrl = util.appendParamToURL(Urls.searchsuggest, 'q', runningQuery);

        // execute server call
        $.get(reqUrl, function (data) {
            var suggestionHTML = data,
                ansLength = suggestionHTML.trim().length;

            // if there are results populate the results div
            if (ansLength === 0) {
                this.clearResults();
            } else {
                // update the results div
                $resultsContainer.html(suggestionHTML).fadeIn(200);
                if (navigator.userAgent.search(/webkit/i) < 0) {
                    $('.suggestion-wrapper').mCustomScrollbar();
                }
                // prevent the main nav from also scrolling in mobile
                // make the nav the same height of the search container
                // only if the container is taller than the viewport
                if (window.innerWidth < mobileMenuBreakpoint) {
                    var searchContainerHeight = $('.header-search-mobile').outerHeight();
                    var vpHeight = window.innerHeight;
                    if (vpHeight < searchContainerHeight) {
                        $('#navigation').addClass('noScroll').css('height', searchContainerHeight);
                        // this becomes the scrollable container so the user can see all of the results
                        $('.navigation-top').first().css('height', vpHeight).css('overflow-y', 'scroll');
                    } else {
                        // if the container is shorter than the viewport height just prevent the nav from scrolling
                        $('#navigation').addClass('noScroll');
                    }
                }
            }

            // record the query that has been executed
            lastQuery = runningQuery;
            // reset currently running query
            runningQuery = null;

            // check for another required update (if current search phrase is different from just executed call)
            if (currentQuery !== lastQuery) {
                // ... and execute immediately if search has changed while this server call was in transit
                runningQuery = currentQuery;
                setTimeout(this.suggest.bind(this), delay);
            }
            this.hideLeftPanel();
        }.bind(this));
    },
    /**
     * @function
     * @description
     */
    clearResults: function () {
        if (!$resultsContainer) { return; }
        $resultsContainer.fadeOut(200, function () {$resultsContainer.empty();});
        // let the nav scroll again
        if (window.innerWidth < mobileMenuBreakpoint) {
            $('.search-suggestion-wrapper').removeAttr('style');
            $('#navigation').removeAttr('style').removeClass('noScroll');
            $('.navigation-top').first().removeAttr('style');
        }
    },
    /**
     * @function
     * @description
     */
    hideLeftPanel: function () {
        //hide left panel if there is only a matching suggested custom phrase
        if ($('.search-suggestion-left-panel-hit').length === 1 && $('.search-phrase-suggestion a').text().replace(/(^[\s]+|[\s]+$)/g, '').toUpperCase() === $('.search-suggestion-left-panel-hit a').text().toUpperCase()) {
            $('.search-suggestion-left-panel').css('display', 'none');
            $('.search-suggestion-wrapper-full').addClass('search-suggestion-wrapper');
            $('.search-suggestion-wrapper').removeClass('search-suggestion-wrapper-full');
        }
    }
};

module.exports = searchsuggest;
},{"./util":82}],73:[function(require,module,exports){
'use strict';
function selectBoxIt(select) {
    var items = select.filter('select');
    if (items.length == 0) {
        return;
    }

    items.each(function() {
        var item = $(this);
        try {
            item.addClass('replaced');
            var sb = item.selectBoxIt().data('selectBoxIt');
            sb.refresh();
            items.bind({
                'open': function() {
                    $(this).next('.selectboxit-container').addClass('open')
                },
                'close' : function() {
                    $(this).next('.selectboxit-container').removeClass('open')
                },
                'focusin' : function() {
                    $(this).next('.selectboxit-container').addClass('focus');
                },
                'focusout' : function() {
                    $(this).next('.selectboxit-container').removeClass('focus');
                }
            });
            // add availablity message within dropdown
            sb.dropdownContainer.find('li[data-text] a').each(
                function() {
                    var a = $(this);
                    var li = a.parent();
                    var dataText = li.data('text');
                    if (dataText) {
                        var html = a.html();
                        if (html.indexOf(dataText) == -1) {
                            li.addClass('avail');
                            a.html('<span class="size">' + html
                                    + '</span>&nbsp;<span class="msg">'
                                    + dataText + '</span>');
                        }
                    }
                }
            );
        } catch (e) {}
    });
}
module.exports.selectBoxIt = selectBoxIt;

},{}],74:[function(require,module,exports){
'use strict';

/**
 * Execute callback function when the user has stopped resizing the screen.
 * @param callback {Function} The callback function to execute.
 */

var smartresize = function (callback) {
    var timeout;

    window.addEventListener('resize', function () {
        clearTimeout(timeout);
        timeout = setTimeout(callback, 100);
    });

    return callback;
};

module.exports = smartresize;

},{}],75:[function(require,module,exports){
'use strict';

/**
 * MY BAG - EXPAND AND MINIMIZE FUNCTIONALITY VIA CHECKOUT
 * WE ARE REBINDING THE EVENT HERE SINCE IT IS INCLUDED INSIDE OF
 * MINISUMMARY.ISML WHICH IS RETURNED VIA AJAX WHEN A USER CHANGES THE
 * SHIPPING METHOD.
 */

var stickyCart = {
    init: function () {

        $('#my-bag-toggle-button').on('click', function(e) {
            //control height of expanded bag
            var summaryBlock =  $('.cart-order-totals');
            var contentBlock = $('.checkout-mini-summary');
            
            if (summaryBlock.height() > contentBlock.height()) {
                summaryBlock.find('.my-bag-content').addClass('scrolable');
            } else {
                summaryBlock.find('.my-bag-content').removeClass('scrolable');
            }
            // show expanded bag
            $(this).toggleClass('fa-minus')
                .parents('.my-bag-checkout').toggleClass('expanded');
            $('.my-bag-content').toggle();

            //reload sticky block
            $(document.body).trigger('sticky_kit:recalc');

        });
    }
};

module.exports = stickyCart;

},{}],76:[function(require,module,exports){
'use strict';

var inventory = require('./');
var product = require('../storeinventory/product');
var util = require('../util');

var cartInventory = {
    setSelectedStore: function (storeId,uuid) {
        var $selectedStore = $('.store-tile.' + storeId + '.selected'),
            $lineItem = $('.cart-row[data-uuid="' + uuid + '"]'),
            storeAddress = $selectedStore.find('.store-address').html(),
            storeStatus = $selectedStore.find('.store-status').data('status'),
            storeStatusText = $selectedStore.find('.store-status').text(),
            storeStr = Resources.PICK_UP_AT.replace('{0}',$selectedStore.find('.store-name').text().trim()),
            storeValHtml = '<span id="storeVal">'+storeStr+'</span>';
        this.selectedStore = storeId;



        $lineItem.find('.instore-delivery .selected-store-address')
            .data('storeId', storeId)
            .attr('data-store-id', storeId)
            .html(storeAddress);
        $lineItem.find('.instore-delivery .selected-store-availability')
            .data('status', storeStatus)
            .attr('data-status', storeStatus)
            .text(storeStatusText);
        // $lineItem.find('.instore-delivery .delivery-option').removeAttr('disabled').trigger('click');

        var homeDelContainers = $lineItem.find('.home-delivery');

        homeDelContainers.each(function () {
            var el = this;
            var storeVal = el.querySelectorAll('#storeVal');

            if (storeVal.length > 0) {
                for(var i = 0, size = storeVal.length; i < size; i++) {
                    var item = storeVal[i];
                    item.remove();
                }
            }

            el.insertAdjacentHTML('afterBegin',storeValHtml);
        });
        
        //hide country restriction message if it exists
        var finalSaleRow = $lineItem.next('.final-sale-row');
        if (finalSaleRow.length && finalSaleRow.find('.item-restriction-messages').length) {
            finalSaleRow.find('.item-restriction-messages').addClass('visually-hidden');
        }

        User.storeId = storeId;

        $.ajax({
            url: Urls.setStorePickup,
            type: 'GET',
            data: {plid: uuid, storeid: storeId, storepickup: 'true'}
        });
        $.ajax({
            url: Urls.setPreferredStore,
            type: 'POST',
            data: {storeId: storeId}
        });
    },
    cartSelectStore: function (selectedStore) {
        var self = this;
        var itemRow = document.querySelector('.cart-row[data-uuid="'+self.uuid+'"]');
        var colorEl = itemRow.querySelector('div[data-attribute="color"] .value');
        var qtyEl = itemRow.querySelector('.cart-quantity');
        var priceEl = itemRow.querySelector('.price-total');
        var pid =  itemRow.dataset.pid;

        var productColor = colorEl ? colorEl.textContent.trim() : '';
        var productPrice = priceEl ? priceEl.textContent.trim() : '';
        var productQty =  qtyEl ?  qtyEl.value : '';

        $.ajax({
            dataType: 'html',
            url: util.appendParamsToUrl(Urls.getProductInfo, {
                pid: pid,
                productColor: productColor,
                productPrice: productPrice,
                productQty: productQty
            }),
            success: function (response) {
                User.pickupContent = response;

                inventory.selectStoreDialog({
                    pid: pid,
                    pickupContent: User.pickupContent,
                    stores: [],
                    selectedStoreId: selectedStore,
                    selectedStoreText: Resources.SELECTED_STORE,
                    continueCallback: function () {

                        var itemDelOptions = $('.cart-row[data-uuid="'+self.uuid+'"] .item-delivery-options');
                        itemDelOptions.find('.active').removeClass('active');
                        itemDelOptions.find('.home-delivery').addClass('active');
                    },
                    selectStoreCallback: function(storeId) {
                        self.setSelectedStore(storeId,self.uuid);
                    }
                });
            }
        });
    },
    setDeliveryOption: function (value, storeId) {
        var data = {
            plid: this.uuid,
            storepickup: (value === 'store' ? true : false)
        };
        if (value === 'store') {
            data.storepickup = true;
            data.storeid = storeId;
        } else {
            data.storepickup = false;
        }
        $.ajax({
            url: Urls.setStorePickup,
            data: data,
            success: function () {location.reload();}
        });
    },
    init: function () {
        var self = this,
            itemDelOptions = document.querySelectorAll('.cart-row .do-btn');

        for (var i = 0, size = itemDelOptions.length; i < size; i++) {
            itemDelOptions[i].addEventListener('click',function (e) {
                var el = this.previousElementSibling,
                    itemDelWrapper = el.parentElement.parentElement;

                var val = el.value;

                if (val === 'home') {
                    itemDelWrapper.querySelector('.active').classList.remove('active');
                    //show country restriction message if it exists
                    var finalSaleRow = jQuery(itemDelWrapper).closest('.cart-row').next('.final-sale-row');
                    if (finalSaleRow.length && finalSaleRow.find('.item-restriction-messages').length) {
                        finalSaleRow.find('.item-restriction-messages').removeClass('visually-hidden');
                    }
                    if (typeof itemDelWrapper.querySelector('.instore-delivery') != undefined) {
                    	itemDelWrapper.querySelector('.instore-delivery').classList.add('active')
                    }
                } else if(val === 'store') {
                    itemDelWrapper.querySelector('.set-preferred-store').click();
                }

                // reset the uuid
                var $el = jQuery(el);
                var selectedStore = $el.closest('.instore-delivery').find('.selected-store-address').data('storeId');
                self.uuid = $el.closest('.cart-row').data('uuid');
                self.setDeliveryOption(el, selectedStore);
            });
        }

        $('.cart-row .set-preferred-store').on('click', function (e) {
            e.preventDefault();
            self.uuid = this.dataset.uuid;
            self.pid = this.dataset.pid;
            var selectedStore = $(this).closest('.instore-delivery').find('.selected-store-address').data('storeId');

            if (!User.zip) {
                self.cartSelectStore(selectedStore);
            } else {
                self.cartSelectStore(selectedStore);
            }
        });
    }
};

module.exports = cartInventory;

},{"../storeinventory/product":78,"../util":82,"./":77}],77:[function(require,module,exports){
'use strict';

var _ = require('lodash'),
    dialog = require('../dialog'),
    TPromise = require('promise'),
    util = require('../util');

var newLine = '\n';
var storeTemplate = function (store, selectedStoreId, selectedStoreText) {
    //handles deprecation and organization of store hours info
	
    var storeHoursStacked,
        storeHoursLong,
        storeHoursOnly = store.storeHours;

    if (storeHoursOnly.indexOf('<br><br>') != -1) {
        storeHoursOnly = store.storeHours.split('<br><br>')[0];
    }
    if (storeHoursOnly.indexOf('<br /><br />') != -1) {
        storeHoursOnly = store.storeHours.split('<br /><br />')[0];
    }

	storeHoursOnly = storeHoursOnly.replace('<br>', '<br />', 'g');
	storeHoursOnly = storeHoursOnly.replace('<br >', '<br />', 'g');
	storeHoursStacked = storeHoursOnly.replace('<br/>', '<br />', 'g');
	storeHoursLong = storeHoursStacked.replace('<br />', ', \u00A0', 'g');

    var storePhone = '';        
    if (store.phone) {
    	storePhone = '<br/><a href="tel:' + store.phone + '">' + store.phone + '</a>';
    }
	var qAttr = "";
	if(store.address1    != null) qAttr += store.address1 + ", ";
	if(store.address2    != null) qAttr += store.address2 + ", ";
	if(store.city        != null) qAttr += store.city + ", ";
	if(store.postalCode  != null) qAttr += store.postalCode + ", ";
	if(store.stateCode   != null) qAttr += store.stateCode + ", ";
	if(store.countryCode != null) qAttr += store.countryCode;
	var glink = "http://maps.google.com/maps?hl=en&f=q&q=" + encodeURI(qAttr);

    return [
        '<li class="store-tile ' + store.storeId + (store.storeId === selectedStoreId ? ' selected' : '') + '">',
        '    <span class="recommended-shop-msg">' + 'your recommended shop' + '</span>',
        '    <button class="select-store-radio" data-store-id="' + store.storeId + '"' +
        (store.statusclass !== 'store-in-stock' ? 'disabled="disabled"' : '') + '>',
        '    </button>',
        '    <div class="store-primary-info">',
        '        <p class="store-name">',
        '            ' + store.name + '<br/>',
        '        </p>',
        '        <p class="store-address">',
        '            ' + store.address1 + '<br/>',
        '            ' + store.city + ', ' + store.stateCode + ' ' + store.postalCode,
        '        </p>',
        '    </div>',
        '    <div class="store-secondary-info">',
        '        <p class="store-status" data-status="' + store.statusclass + '">' + store.status + '</p>',
        '        <p class="store-hours-stacked">' + storeHoursStacked + '</p>',
        '        <p class="store-hours-long">' + storeHoursLong + '</p>',
        '    </div>',
        '    <a href="' + glink + '" class="store-map-toggle directions" target="_blank">' + 'MAP' + '</a>',
        '    <div class="store-map-container">',
        '       <div class="store-map"></div>',
        '    </div>',
        '</li>'
    ].join(newLine);
};

var storeListTemplate = function (pickupContent, stores, selectedStoreId, selectedStoreText) {
    var templateContent = '';
    if (stores.length) {
        return [
            pickupContent,
            '<div class="store-list-container">',
            '<span class="stores-availability-msg">available at ' + stores.length + ' shops</span>',
            '<ul class="store-list">',
            _.map(stores, function (store) {
                return storeTemplate(store, selectedStoreId, selectedStoreText);
            }).join(newLine),
            '</ul>',
            '</div>'
        ].join(newLine);
    } else {
        return [
            pickupContent,
            '<div class="store-list-container">',
            '<span class="stores-availability-msg">available at ' + stores.length + ' shops</span>',
            '</div>'
        ].join(newLine);
    }
};

var zipPromptTemplate = function () {
    return [
        '<div id="preferred-store-panel">',
        '    <input type="text" id="user-zip" placeholder="' + Resources.ENTER_ZIP + '" name="zipCode"/>',
        '</div>'
    ].join(newLine);
};

/**
 * @description test whether zipcode is valid for either US or Canada
 * @return {Boolean} true if the zipcode is valid for either country, false if it's invalid for both
 **/
var validateZipCode = function (zipCode) {
    var regexes = {
            canada: /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJKLMNPRSTVWXYZ]( )?\d[ABCEGHJKLMNPRSTVWXYZ]\d$/i,
            usa: /^\d{5}(-\d{4})?$/
        },
        valid = false;
    if (!zipCode) { return; }
    _.each(regexes, function (re) {
        var regexp = new RegExp(re);
        valid = regexp.test(zipCode);
    });
    return valid;
};

var storeinventory = {
    zipPrompt: function (callback) {
        var self = this;
        dialog.open({
            html: zipPromptTemplate(),
            options: {
                title: Resources.STORE_NEAR_YOU,
                width: 500,
                buttons: [{
                    text: Resources.SEARCH,
                    click: function () {
                        var zipCode = $('#user-zip').val();
                        if (validateZipCode(zipCode)) {
                            self.setUserZip(zipCode);
                            if (callback) {
                                callback(zipCode);
                            }
                        }
                    }
                }],
                open: function () {
                    $('#user-zip').on('keypress', function (e) {
                        if (e.which === 13) {
                            // trigger the search button
                            $('.ui-dialog-buttonset .ui-button').trigger('click');
                        }
                    });
                }
            }
        });
    },
    getStoresInventory: function (pid) {
        return TPromise.resolve($.ajax({
            url: util.appendParamsToUrl(Urls.storesInventory, {
                pid: pid,
                zipCode: User.zip,
                storeId: User.storeId
            }),
            dataType: 'json'
        }));
    },
    /**
     * @description open the dialog to select store
     * @param {Array} options.stores
     * @param {String} options.selectedStoreId
     * @param {String} options.selectedStoreText
     * @param {Function} options.continueCallback
     * @param {Function} options.selectStoreCallback
     **/
    selectStoreDialog: function (options) {
        User.stores = options.stores;
        var self = this,
            pid = options.pid,
            pickupContent = options.pickupContent,
            selectedStoreId = options.selectedStoreId,
            selectedStoreText = options.selectedStoreText,
            storeList = storeListTemplate(pickupContent, User.stores, selectedStoreId, selectedStoreText),
            dialogWidth = (window.innerWidth < 708) ? (window.innerWidth).toString() : '668';

        dialog.open({
            html: storeList,
            options: {
                buttons: [{
                    text: Resources.CONTINUE_WITH_STORE,
                    click: function () {
                        if (options.continueCallback) {
                            options.continueCallback(User.stores);
                        }
                        dialog.close();
                    }
                }],
                width: dialogWidth,
                position: { my: "top", at: "top+100", of: window },
                dialogClass: 'store-pickup-dialog',
                close: function() {
                    $('body').removeClass('store-pickup-dialog-opened');
                },
                open: function () {
                	$("#showStoresForm").validate();
                	$('.pickup-product-attribute.pQuantity .value').html($('#pdpQtySelectSelectBoxItText').html());
                    var setStoreEvents = function() {
                        $('.select-store-radio').on('click', function (e) {
                            e.preventDefault();
                            var storeId = $(this).data('storeId');
                            // if the store is already selected, don't select again
                            if (!$(this).parent().hasClass('selected')) {
                                $('.store-list .store-tile.selected').removeClass('selected');
                                $(this).closest('.store-tile').addClass('selected');
                                if (options.selectStoreCallback) {
                                    options.selectStoreCallback(storeId);
                                }
                            }
                        });

                        $('.store-map-toggle').not('.directions').on('click', function (e) {
                            e.preventDefault();
                            var mapContainer = $(this).closest($('.store-tile')).find($('.store-map'));
                            mapContainer.toggle();
                            $(this).toggleClass('visible');
                            $(this).closest($('.store-tile')).find($('.store-map-container')).toggleClass('visible');
                            if (!mapContainer.children().length) {
                                var map = new google.maps.Map(mapContainer[0], {
                                    zoom: 8,
                                  });
                                var geocoder = new google.maps.Geocoder();
                                var address = $(this).closest($('.store-tile')).find($('.store-address'))[0].innerText;
                                geocoder.geocode({'address': address}, function(results, status) {
                                    if (status === 'OK') {
                                        map.setCenter(results[0].geometry.location);
                                        var marker = new google.maps.Marker({
                                            map: map,
                                            position: results[0].geometry.location
                                        });
                                    } else {
                                        alert('Geocode was not successful for the following reason: ' + status);
                                    }
                                });
                            }
                        });
                    }

                    var updateStoreList = function () {
                        var zipCode = $('.zip-input').val();
                        var maxDistance = $('.distance-input').val();
                        if (validateZipCode(zipCode)) {

                            // We want to show customer's Preferred Store at the top of the stores list
                            // even if preferred store zip code is out of search range

                            // We perform stores search by zip and max distance at first
                            // If there is the Preferred Store in the search results, no additional request is needed
                            // Otherwise, we get Preferred Store data and add it to the first position in the search results

                            // Promise to get stores near the provided zip
                            var storesPromise = TPromise.resolve(
                                $.ajax({
                                    dataType: 'json',
                                    url: util.appendParamsToUrl(Urls.storesInventory, {
                                        zipCode: zipCode,
                                        maxDistance: maxDistance,
                                        pid: pid,
                                        storeId: User.storeId
                                    })
                                })
                            );

                            // Promise to get preferred store ID and zip for logged in customers
                            // (it resolves with an empty object for not logged in customers)
                            var preferredStoreIdPromise = TPromise.resolve(
                                $.ajax({
                                    dataType: 'json',
                                    url: Urls.getPreferredStore
                                })
                            );

                            TPromise.all([storesPromise, preferredStoreIdPromise])
                                .then(function(res) {
                                    var stores = res[0];
                                    var prefStoreIdResponse = res[1];
                                    var prefStorePromise;

                                    if (prefStoreIdResponse.storeId) {

                                        // Check if the Preferred Store is present in the store list already,
                                        var prefStoreIdx = _.findIndex(stores, { 'storeId': prefStoreIdResponse.storeId });
                                        if (prefStoreIdx !== -1 && prefStoreIdx !== 0) {

                                            // If so, get preferred store from the stores list
                                            var prefStore = stores.splice(prefStoreIdx, 1)[0];
                                            prefStorePromise = TPromise.resolve(prefStore);

                                        } else {
                                            // Otherwise get the Preferred Store data from server
                                            prefStorePromise = TPromise.resolve(
                                                $.ajax({
                                                    dataType: 'json',
                                                    url: util.appendParamsToUrl(Urls.storesInventory, {
                                                        zipCode: prefStoreIdResponse.storeZip,
                                                        maxDistance: 10,
                                                        pid: pid
                                                    })
                                                })
                                            ).then(function(prefStoresRes) {
                                                return _.find(prefStoresRes, { 'storeId': prefStoreIdResponse.storeId });
                                            })
                                        }
                                    } else {
                                        prefStorePromise = TPromise.resolve(null);
                                    }

                                    prefStorePromise.then(function(prefStore) {
                                        if (prefStore) {
                                            stores.unshift(prefStore);
                                        }
                                        User.stores = stores;
                                        $('.store-list-container').empty();
                                        $('.store-list-container').append('<span class="stores-availability-msg">available at ' + stores.length + ' shops</span>');
                                        if (stores.length) {
                                            $('.store-list-container').append('<div class="store-list"></div>');
                                            $('.store-list').append(_.map(stores, function (store) {
                                                return storeTemplate(store, selectedStoreId, selectedStoreText);
                                            }).join(newLine));
                                            setStoreEvents();
                                            $('.select-store-radio').each(function() {
                                                var parentEl = this.parentElement;
                                                if ($(this).data('storeId') == User.storeId || parentEl.classList.contains('selected')) {
                                                    parentEl.classList.remove('selected');
                                                    $(this).click();
                                                }
                                            });
                                            $('.show-more').remove();
                                            var AllOther = parseInt(stores.length-3);
                                            if (stores.length > 3) {
                                                $('.ui-dialog-buttonset').append('<button class="show-more more-btn">view all SHOPS ('+AllOther+')+</button>');
                                            }
                                            var list = $('.store-list .store-tile');
                                            var numToShow = 3;
                                            var button = $('.show-more');
                                            var numInList = list.length;
                                            var isShowing = true;
                                            list.hide();
                                            list.slice(0, numToShow).show();
                                            var onFadeComplete = function() {
                                                var nowShowing = list.filter(':visible').length;
                                                if(nowShowing == numInList && isShowing) {
                                                    isShowing = false;
                                                    button.text('view less SHOPS');
                                                }
                                                if(nowShowing == numToShow) {
                                                    button.text('view all SHOPS ('+ AllOther+')+');
                                                    isShowing = true;
                                                }
                                            };

                                            button.click(function() {
                                                var showing = list.filter(':visible').length;
                                                if(isShowing){
                                                    list.slice(showing - 1, showing + numToShow).fadeIn(100,onFadeComplete);
                                                }
                                                else{
                                                    list.slice(numToShow , numInList).fadeOut(100,onFadeComplete);
                                                }
                                            });
                                        }
                                    });
                                });
                        }
                    };

                    $('#showStoresForm').on('submit', function(e) {
                        e.preventDefault();
                        updateStoreList();
                    });

                    $('.distance-input').on('change', function(e) {
                        e.preventDefault();
                        updateStoreList();
                        $('.distance-input-label')[0].innerHTML = 'Radius: ' + $('.distance-input option:selected')[0].value + ' miles';
                    });
                    
                    $('.zip-input').on('change', function(e) {
                        e.preventDefault();
                        updateStoreList();
                        $('.distance-input-label')[0].innerHTML = 'Radius: ' + $('.distance-input option:selected')[0].value + ' miles';
                    });

                    setTimeout(function (){

                        setStoreEvents();

                        //initialize display of distance and zipcode used

                        $('.distance-input-label')[0].innerHTML = 'Radius: ' + $('.distance-input option:selected')[0].value + ' miles';

                        $.ajax({
                            dataType: 'json',
                            url: Urls.getZipCode,
                            success: function (response) {

                                if (response[0].userDefaultZip) {
                                    $('input.zip-input').val(response[0].userDefaultZip);
                                } else if (response[0].zip) {
                                    $('input.zip-input').val(response[0].zip);
                                }

                                if ($('input.zip-input').val()) {
                                    $('#showStoresForm').trigger('submit');
                                }
                            }
                        });

                    }, 50);
                }
            }
        });
        setTimeout(function (){
            var topOffset = ($(window).width() < 708) ? 61 : (($(window).width() - 708) / 2) + 61;
            if (topOffset > 100) {
                topOffset = 100;
            }
            topOffset = $(window).scrollTop() + topOffset;
            $('.ui-dialog').css('top', topOffset.toString() + 'px');
            
            $('body').addClass('store-pickup-dialog-opened');
        }, 50);

    },
    setUserZip: function (zip) {
        User.zip = zip;
        $.ajax({
            type: 'POST',
            url: Urls.setZipCode,
            data: {
                zipCode: zip
            }
        });
    },
    shippingLoad: function () {
        var $checkoutForm = $('.address');
        $checkoutForm.off('click');
        $checkoutForm.on('click', 'input[name$="_shippingAddress_isGift"]', function () {
            $(this).parent().siblings('.gift-message-text').toggleClass('hidden', $('input[name$="_shippingAddress_isGift"]:checked').val());
        });
    }
};

module.exports = storeinventory;

},{"../dialog":34,"../util":82,"lodash":5,"promise":6}],78:[function(require,module,exports){
'use strict';
var dialog = require('../dialog');
var util = require('../util');
var $cache = {
	pdpMain : $('#pdpMain'),
	pdpForm : $("#pdpMain form.pdpForm"),
	productThumbnailTiles: $('#pdpMain').find('#thumbnails .thumb'),
	addAllToCart : $('#add-all-to-cart'),
	productSetList : $(".product-set-list"),

	//monogramming
	monogramcontainer : $('#pdpMain .monogram-container'),
	monogramformfields : $('.monogram-form-fields'),

	// monogramming style container
	monogramstyles : $('#pdpMain .monogram-container').find('ul.monogram-styles'),
	monogramstyletiles : $('#pdpMain .monogram-container').find('li.monogram-style-tile'),
	selectedStyleConfig : null,

	// options
	monogramingoptionscontainer : $('#pdpMain .monogram-container').find('.monogram-options-container'),

	// font
	monogramfontselect : $('#pdpMain .monogram-container').find('.monogram-font-select'),
	fonttilebase : $('#pdpMain .monogram-container').find('.monogram-font-base.visually-hidden').clone(),

	// characters
	monogramtextinputcontainer : $('#pdpMain .monogram-container').find('.monogram-text-input-container'),
	monogramtexttitle : $('#pdpMain .monogram-container').find('.text-input-title'),
	monogramtextinputbody : $('#pdpMain .monogram-container').find('.monogram-text-input-body'),
	monograminputbase : $('#pdpMain .monogram-container').find('.monogram-text-input-wrapper').clone(),
	focusedinput : null,// used as a container for the currently
								// focused input, to allow symbols to be
								// added there
	monogramtextinputclear : $('#pdpMain .monogram-container').find('.monogram-text-input-clear'),

	// symbols
	monogramsymbollist : $('#pdpMain .monogram-container').find('.monogram-symbol-list'),
	monogramsymbolselectioncontainer : $('#pdpMain .monogram-container').find('.monogram-symbol-selection-container'),
	symbolbase : $('#pdpMain .monogram-container').find('.monogram-symbol-base.visually-hidden').clone(),

	// dots
	monogramdotscontainer : $('#pdpMain .monogram-container').find('div.monogram-dots-container'),
	monogramdotsoptions : $('#pdpMain .monogram-container').find('li.dots-option'),

	// colors
	monogramcolors : $('#pdpMain .monogram-container').find('li.monogram-color-swatch')


};
function initializeEvents(){
	if($cache.pdpMain.length > 0){
		$("#pdpMain, #quick-view-dialog").on("click", ".product-thumbnails li a", function(e) {
			e.preventDefault();

			var variations = $('.product-variations');

			// Create a new instance of CloudZoom
			var cz = $(".cloudzoom").data("CloudZoom");

			// Get selected image src
			var src = $(this).find('img').attr('src');
			var pdpImg = $('.primary-image.cloudzoom');

			// Load a new small image and zoom image into it:
			var smallImg = src.replace("$productThumbnail$", "$large$");
	        var zoomImg = smallImg.replace("$large$", "$s7fullsize$");

	        // Load new images into CloudZoom instance
	        var isQuickView = function() {
				var $qvcontainer = $('#quick-view-dialog');
				return ($qvcontainer.length>0);
			};
	        if(!isQuickView){
	        	cz.loadImage(smallImg, zoomImg);
	        }
		});

		if ($cache.pdpMain.find('#thumbnails li').length <= 4) {
			$('#thumbnails .jcarousel-control-prev').hide();
			$('#thumbnails .jcarousel-control-next').hide();
		}

		if(window.innerWidth < 960){
			$('#social-product-set #social-header').click(function(){
				$('#social-product-set .social-icons').slideToggle();
			})
		}
	}
	$('body').on('click', '.twitter-share a', function(e){
		e.preventDefault();
	});
    $cache.pdpMain.off("click.swatches")
	.on("click.swatches", "div.product-detail a.swatchanchor, div.product-set-details a.swatchanchor", function (e) {
		// FIXME: every time the variation changes, an additional listener is added.
		// This is due to the variation.js also applying like events.
		// The functionality from this file should be moved into variant.js, or other specific sub-namespace (giftcard.js, productset.js, and the like).
		// product.js should be Store Inventory specific!
		e.preventDefault();

		var anchor = $(this),
			parentList = anchor.parent("li"),
			qty = $('.pdpForm select[name="Quantity"]').first().val(),
			productSet = $(anchor).closest('.product-set-item'),
			isProductSet = productSet.length > 0,
			params = {
				Quantity : isNaN(qty) ? "1" : qty
			},
			parent = anchor.closest("ul.swatches"),
			attributeContainer = parent.closest('li'),
			isColor = parent.hasClass("Color"),
			container = parent.closest('.product-variations'),
			inputId = container.find('input[name=pid]');

		if (isProductSet) {
			// updateProductSet(anchor);
			return;
		}

		// pause and reposition flowplayer if currently active
		try{
			if(flowplayer && flowplayer()){
				var videoPlayer = $('.flowplayer-container');
				if(videoPlayer.children().length != 0){
					videoPlayer.css('top','-999px').css('position', 'absolute');
				}
			}
		} catch(e) {

		}


		// Don't allow preselection of a monogram color unless text is submitted
		if(parent.hasClass('monogram') && $('input[name=dwfrm_customizer_monogram_text]').val() == '' && !$cache.monoReset) return false;


		if (parentList.hasClass("selected")) {
			return;
		} else if (parentList.length > 0) {

			parentList.parent('ul').find('li').each(function(e){
				$(this).removeClass("selected");

				// Set previously un selectable element back to initial state
				if($(this).hasClass('prev-unselectable')){
					$(this).addClass("unselectable");
				}
			});

			// set class of previously un selectable li
			if(parentList.hasClass('unselectable')){
				parentList.removeClass("unselectable");
				parentList.addClass("prev-unselectable");
			}
			setTimeout(function() {
			    parentList.addClass("selected");
			}, 0);

		}

		if (!this.href) {
			return; // if no href, then return
		}

		// keep the gift card info intact when changing the gift card amount

		var egiftcard = $('.pdpForm input[name="egiftcard"]');
		var giftcard = $('.pdpForm input[name="giftcard"]');

		egiftcard = egiftcard.length && egiftcard.first().val() == 'true' ? true : false;
		giftcard = giftcard.length && giftcard.first().val() == 'true' ? true : false;

		if(giftcard || egiftcard){

			var gcAmount = $('#gcAmount').first().val();
			if(gcAmount){
				params['gcAmount'] = gcAmount;
			}

			if(egiftcard){

				var vgcRecipientName = $('.pdpForm input[name="vgcRecipientName"]').first().val();
				var vgcRecipientEmail = $('.pdpForm input[name="vgcRecipientEmail"]').first().val();
				var vgcFromName = $('.pdpForm input[name="vgcFromName"]').first().val();
				var vgcFromEmail = $('.pdpForm input[name="vgcFromEmail"]').first().val();
				var vgcGiftCardMessage = $('.pdpForm textarea[name="vgcGiftCardMessage"]').first().val();

				if(vgcRecipientName){
					params['vgcRecipientName'] = vgcRecipientName;
				}
				if(vgcRecipientEmail){
					params['vgcRecipientEmail'] = vgcRecipientEmail;
				}
				if(vgcFromName){
					params['vgcFromName'] = vgcFromName;
				}
				if(vgcFromEmail){
					params['vgcFromEmail'] = vgcFromEmail;
				}
				if(vgcGiftCardMessage){
					params['vgcGiftCardMessage'] = vgcGiftCardMessage;
				}

			}

		}

		// keep the product list id for use with the gift registry quick edit
		var productlistid = $('.pdpForm input[name="productlistid"]');
		if(productlistid.length){
			params['productlistid'] = productlistid.first().val();
		}

		params['pagesource'] = $('.pdpForm input[name="pagesource"]').first().val();

		var target = (productSet.length > 0 && productSet.children.length > 0) ? productSet : anchor.closest('.product-detail').find('#product-content');
		var targetdetail =(productSet.length > 0 && productSet.children.length > 0) ? productSet : anchor.closest('.product-short-description').find('#short-description');
		var newHref = this.href;

		var selectedColor = container.find('.Color .selected-value').first();
		if(selectedColor.length){
			var colorName = selectedColor.attr('data-name').toString();
			var colorValue = selectedColor.attr('data-value').toString();
			if(colorName && colorValue && !params[colorName] && newHref.indexOf(colorName) == -1){
				// force the auto-selected color into the ajax call
				params[colorName] = colorValue;
			}
		}
		//Add dropship monogram text if set.
		if($('input[name="mt"]').length > 0){
			if($('input[name="mt"]').val().length >= 1){
				params['mt'] = $('input[name="mt"]').val();
				params['mc'] = $('input[name="mc"]').val();
			}
		}

		var url = app.util.appendParamsToUrl(newHref, params);

		if($('#product-set-list').length > 0){
			params['productset'] = true;
			url = app.util.appendParamsToUrl(url, params);
		}

		app.ajax.load({
			url: decodeURIComponent(url),
			callback : function (data) {
				var resetSize = false;

				var pdpMain = $cache.pdpMain;

				target.html(data);

				if (resetSize){
					target.find('select.size-select').val('');
				}

				var res = $(data);

				// update price for mobile

				try {
					// empty the mobile price container
					$('.price-mobile').empty();

					// append product price
					res.find('span.product-price').appendTo('.price-mobile');
					res.find('div.debutDates').appendTo('.price-mobile');
					// pdp promotion tooltips
					$('.pt_product-details a.tooltip').each(function() {
						// The contents of the h2 element will be the title of the hopup
						var text = $(this)
									.parent()
									.find('h2')
					    			.text();
						// the tooltip-content element contains the dialog body
						var dlg = $(this).find('.tooltip-content').dialog({
							dialogClass: 'tooltip-pdp-promo',
							autoOpen: false,
							modal: true,
							title: text,
							 open: function() {
								$('.ui-widget-overlay').bind('click', function() {
									$('.tooltip-pdp-promo').dialog('close');
								});
							}
						});
						// show the hopup when the link is clicked
						$(this).on('click', function(e) {
							e.preventDefault();
							dlg.dialog("open");
						});
					});
				} catch(e) {
					// console.log(e.message);
				}

				parent.before(res.find('ul.swatches'));
				parent.remove();
				var desc = $('#small-description');
				var detailDesc = $('#small-details');
				if(desc != null){
					desc.empty();
					res.find('.description-heading, .short-left, .short-right').appendTo(desc);
				}
				if(detailDesc != null){
					detailDesc.empty();
					res.find('#detail-longDesc').appendTo(detailDesc);
				}

				var newId = res.find('input[name=pid]').val();
				inputId.val(newId);
				// Copy variation attributes other than the current one from the
				// returned HTML into the current page replacing the corresponding
				// element. This ensures that the update references for those
				// variations reflect the change to this variation (e.g. changing
				// the size doesn't revert the color)
				var attributes = res.find('li.attribute').toArray();
				var current = container.find('li.attribute').toArray();
				var skip = current.indexOf(attributeContainer[0]);
				for (var i = 0; i < current.length; i++) {
				if (i == skip) continue;
					var cur = $(current[i]);
					cur.before(attributes[i]);
					cur.remove();
				}

				/* Run replaceImages and replaceContent in parallel via a
					nifty trick w/ setTimeout */
				if (isColor) {
					if(Resources.CLOUD_ZOOM_ENABLED){
						replaceCloudZoomImages(pdpMain);
						replaceContent();
						fullScreenImage();
					}
					else{
						// note scene7 functionality does not actually use this
						setTimeout(function(){replaceImages(pdpMain);}, 1);
						setTimeout(replaceContent, 1);
					}
				}

				/* FIXME: This is a long-running method that was blocking
					image replacement. Find out why and make it better. */
				setTimeout(initializeEvents, 1);

				app.product.initAddThis();
				app.product.initAddToCart();

				bazzarvoiceClearHopup();

				var productSetItem = container.closest('.product-set-item');

				if (productSetItem.length > 0) {

					if(window.innerWidth < 480){
						var productThumbnails = productSetItem.find('.product-set-image img');
						var newThumbnail = productSetItem.find('.swatches.Color .selected').attr('data-pimage');
						productThumbnails.attr('src', newThumbnail);
						productSetItem.find(".select-quantity").trigger("change");
					}else{
						var productThumbnails = res.find('.product-thumbnails img');
						if (productThumbnails.length > 0) {
							var newThumbnail = productThumbnails.eq(0).attr('src').replace('/C_','/N_').replace('productThumb', 'product2x2');
							productSetItem.find('.product-thumbnail').attr('src', newThumbnail);
						}
					}

					var oldQuantitySelect = productSetItem.find('.select-quantity');
					oldQuantitySelect.before(res.find('select.select-quantity'));
					oldQuantitySelect.remove();

					var oldAvailability = productSetItem.find('.availability-messaging');
					oldAvailability.before(res.find('.availability-messaging'));
					oldAvailability.remove();

					var oldPid = productSetItem.find('input[name=pid]');
					oldPid.before(res.find('input[name=pid]'));
					oldPid.remove();

					if (container.find('select.size-select').val()) {
						productSetItem.removeAttr('invalid')
								.find('button.add-to-cart')
								.removeAttr('disabled');

						if (container.closest('.product-set').find('.product-set-item[invalid]').length == 0) {
							$('#add-all-to-cart').removeAttr('disabled');
						}
					}
				}


				app.tooltips.init();

				// for the e-gift card on PDP
				if($cache.pdpForm.find('.gift-card-info').length){
					app.validator.initForm('form.pdpForm');
					app.util.limitCharacters();
				}

				if (typeof FB != 'undefined' && 'XFBML' in FB && 'parse' in FB.XFBML) {
					$('fb\\:like').attr('href',newHref);
					FB.XFBML.parse();
				}
				// reload the bazaar voice ratings pane
				if ($('#BVCustomerRatings').length > 0 && typeof $BV != "undefined" && "ui" in $BV) {
					$BV.ui("rr", "show_reviews", configData);
				}

				// reload ShopRunner content
				if (typeof(sr_updateMessages) == 'function') {
					sr_updateMessages();
				}


				//True Fit
				if (typeof tfc !== 'undefined'){
					tfc.calculate();
				}

			}

		}); // end of ajax load

	}); // end of pdp swatch click handler


	//locatorInit();

	CloudZoom.quickStart();

	//monogramming events
	$cache.monogramstyletiles.click(monogramStyleTileClick);
	$cache.monogramdotsoptions.click(dotsOptionClick);
	$cache.monogramcolors.click(monogramColorClick);
	$cache.monogramtextinputclear.click(textInputClearClick);

}//end initializeEvents

function initializeDom(){
	if($cache.monogramcontainer.length > 0){
		$cache.monogramcontainer.data('imageOptions',{});
		$cache.monogramcontainer.data('imageOptions')['$dots'] = 0;
		$cache.monogramcontainer.find('.monogram-font-select').empty();
		$cache.monogramcontainer.find('.monogram-text-input-body').empty();
		$cache.monogramcontainer.find('.monogram-symbol-list').empty();
		$cache.fonttilebase.removeClass('monogram-font-base visually-hidden').addClass('monogram-font');
		$cache.symbolbase.removeClass('monogram-symbol-base visually-hidden').addClass('monogram-symbol');

		if(window.innerWidth <= 480){
			$('.product-add-to-cart').appendTo('.product-col-1');
		}else{
			$('.product-add-to-cart').appendTo('#product-content');
			$('.product-actions').appendTo('#product-content');
		}
	}

}
var _ = require('lodash'),
    inventory = require('./');

var newLine = '\n';
var pdpStoreTemplate = function (store) {
    return [
        '<li class="store-list-item ' + (store.storeId === User.storeId ? ' selected' : '') + '">',
        '    <div class="store-address">' + store.address1 + ', ' + store.city + ' ' + store.stateCode +
        ' ' + store.postalCode + '</div>',
        '    <div class="store-status" data-status="' + store.statusclass + '">' + store.status + '</div>',
        '</li>'
    ].join(newLine);
};
var pdpStoresListingTemplate = function (stores) {
    if (stores && stores.length) {
        return [
            '<div class="store-list-pdp-container">',
            (stores.length > 1 ? '    <a class="stores-toggle collapsed" href="#">' + Resources.SEE_MORE + '</a>' : ''),
            '    <ul class="store-list-pdp">',
            _.map(stores, pdpStoreTemplate).join(newLine),
            '    </ul>',
            '</div>'
        ].join(newLine);
    }
};

var storesListing = function (stores) {
    // list all stores on PDP page
    if ($('.selected-store-info').length) {
        $('.pdp_locator_button').css('height', '');
        $('.selected-store-info').remove();
    }

    for (var i = 0; i < stores.length; i++) {
        if (stores[i].storeId === User.storeId) {
            $('#storepickup').val('true');
            $('#storeid').val(User.storeId);
            $('.pdp_locator_button').css('height', '60px');
            $('.pdp_locator_button').append( ['<div class="selected-store-info">' +
                                              '    <span class="selected-store-msg">' + Resources.STORE_PICKUP_SELECTEDSHOP + '</span>' +
                                              '    <span class="selected-store-address">' + stores[i].name + '</span>' +
                                              '    <span class="change-store-msg">' + Resources.STORE_PICKUP_CHANGE + '</span>' +
                                              '</div>'
                                             ].join(newLine));
        }
    }

};

var productInventory = {
    setPreferredStore: function (storeId) {
    	var self = this;
    	var isCartPage = document.querySelector('.pt_cart');
        User.storeId = storeId;

        if (isCartPage) {
            var itemRow = document.querySelector('.cart-row[data-pid="'+self.pid+'"]');

            $.ajax({
                url: Urls.setStorePickup,
                type: 'GET',
                data: {plid: itemRow.dataset.uuid, storeid: storeId, storepickup: 'true'}
            });
		}


        $.ajax({
            url: Urls.setPreferredStore,
            type: 'POST',
            data: {storeId: storeId}
        });
    },
    productSelectStore: function () {
        var self = this;
        var pid = this.pid;
        inventory.getStoresInventory(this.pid).then(function (stores) {

            inventory.selectStoreDialog({
                pid: pid,
                pickupContent: User.pickupContent,
                stores: stores,
                selectedStoreId: User.storeId,
                selectedStoreText: Resources.PREFERRED_STORE,
                continueCallback: storesListing,
                selectStoreCallback: self.setPreferredStore
            });
        }).done();
    },
    init: function () {
        User.storeId = '';
        User.zip = '';
        User.pickupContent = '';
        var self = this;
        this.productinfo = '';
        this.pid = $('input[name="pid"]').val();

        var productColor = $('.swatches.Color .selected .title').length ? $('.swatches.Color .selected .title')[0].innerText : '';
        var productPrice = $('.price-sales').length ? $('.price-sales')[0].innerText : '';
        var productQty = $('select[name="Quantity"]').length ? $('select[name="Quantity"]')[0].value : '';

        $.ajax({
            dataType: 'html',
            url: util.appendParamsToUrl(Urls.getProductInfo, {
                pid: this.pid,
                productColor: productColor,
                productPrice: productPrice,
                productQty: productQty
            }),
            success: function (response) {
                //$('.store-product-info').append(response);
                User.pickupContent = response;
            }
        });

        setTimeout(function (){
            $('.pdp_locator_button').on('click', function (e) {
                e.preventDefault();
                // Show error if it exists
                if ($cache.pdpMain.find(".pdp_locator_error").length > 0) {
                    $cache.pdpMain.find(".pdp_locator_error").show();
                    return;
                }
                self.productSelectStore();
            });
        }, 1);

    }
};
var mainImage = {
	init : function(){
		var isQuickView = (function() {
			var $qvcontainer = $('#quick-view-dialog');
			return ($qvcontainer.length>0);
		})();
		if (!isQuickView) {
			var handleImgLoad = function(e, $img) {
				if (!$img) $img = $(this);
				$img.css('margin-top', ($img.height() / 2) * -1 + 'px');
				$img.show();
			};
			setTimeout(function (){
				// check for no image
				$cache.pdpMain.find('.product-primary-image').each(function(){
					var $div = $(this);
					mainImage.noImageHandler($div.find('img').not('.fullscreen-zoom-icon'), function(img){
						var $img = $(img);
						var $div = $(img).closest('.product-primary-image');
						$img.remove();
						if($div.children().length == 0){
							$div.addClass('no-image');
						}
					});
					if($div.children().length == 0){
						$div.addClass('no-image');
					}
				});
			}, 3000);
		}
		else{
			// in quick view
			$cache.pdpMain.find('.product-primary-image img').not('.fullscree-zoom-icon').each(function(){
				mainImage.noImageHandler(this);
			});

		};
	},
	noImageHandler : function(img, errorHandler) {
		var $img = $(img);
		$img.on('error', function(){
			if(errorHandler){
				errorHandler(this);
			}
			else{
				mainImage.noImage(this);
			}
		});
		// reload image in case we missed the error event
		var src = $img.attr('src');
		//$img.attr('src', ''); // this line crashes iOS 6.0
		if(Resources && Resources.BLANK_IMAGE_URL){
			$img.attr('src', Resources.BLANK_IMAGE_URL);
		}
		$img.attr('src', src);
	},
	noImage : function(img) {
		if(Resources && Resources.NO_IMAGE_URL){
			var $img = $(img);
			$img.attr('data-failed-src', $img.attr('src'));
			$img.attr('src', Resources.NO_IMAGE_URL);
		}
	}

}

function doUpdateImages(){

	if(validateImageOptions()){

		app.monogram.init();

		var qs = getQueryString();

		var baseImage;// = "http://katespade.scene7.com/is/image/KateSpadeRender?src=ir{KateSpadeRender/{0}?obj=FLOW/MNGRM&decal&src=is{KateSpade/mono_ksny?{1}}&sharp=1&res=150&resMode=sharp2}&$productThumbnail$";

		switch($cache.selectedStyleConfig.personalizationType){
			case "Monogramming":
				baseImage = Resources.MONOGRAMMING_MONOGRAM_BASE_URL;
				break;
			case "Engraving":
				baseImage = Resources.MONOGRAMMING_ENGRAVING_BASE_URL;
				break;
			default:
				baseImage = Resources.MONOGRAMMING_MONOGRAM_BASE_URL;
				break;
		}


		$('.product-thumbnails .thumb').each(function(index){
			var $this = $(this);
			var $link = $this.find('a');
			var $img = $link.find('img');


			var baseImageUrl = $link.attr('thumbnail-data'),
				urlBase = baseImageUrl.split('?')[0];

			// If image is a monogram image, return rendered monogram URL
			if (urlBase.indexOf("_R") == urlBase.length-2) {
				var splitBase = urlBase.split('/');

				//get the image code {sku}_{style}
				var assetName = splitBase[splitBase.length - 1];

				assetName = assetName.replace(/_R$/, '');


				var newThumbnail = baseImage.format(assetName,qs);

				var zoomImg = newThumbnail.replace("$productThumbnail$", "$fullsize$");

				$link.attr('href',zoomImg);

				$img.attr('src',newThumbnail);

				//monogram-display_monogram-preview-image
				if(index === 0){
					var cartImage = newThumbnail.replace("$productThumbnail$","$shoppingCart$")
					$cache.monogramformfields.find("input[name='monogram-display_monogram-thumb-image']").val(cartImage)
				}
			}



		});


		// get the instance of CloudZoom
		var cz = $("img.primary-image.cloudzoom").data("CloudZoom");

		// Get selected image src
		var $selectedThumb = $cache.productThumbnailTiles.filter('.selected');
		var src = $selectedThumb.find('img').attr('src');

		// Load a new small image and zoom image into it:
		var smallImg = src.replace("$productThumbnail$", "$large$");
		var zoomImg = smallImg.replace("$large$", "$fullsize$");

		//replace the thumbnail in slider with large image Bug: RR-717
		$selectedThumb.find('img').attr('src', smallImg)

		// Load new images into CloudZoom instance
		cz.loadImage(smallImg, zoomImg);



		switch($cache.selectedStyleConfig.personalizationType){
			case "Monogramming":
				baseImage = Resources.MONOGRAMMING_PREVIEW_BASE_URL;
				break;
			case "Engraving":
				baseImage = Resources.ENGRAVING_PREVIEW_BASE_URL;
				break;
			default:
				baseImage = Resources.MONOGRAMMING_PREVIEW_BASE_URL;
				break;
		}
		var previewURL = baseImage.format(qs);
		$cache.monogramformfields.find("input[name='monogram-display_monogram-preview-image']").val(previewURL);
	}
}


function storeLocate() {
	var locateZip = $(".pdp_locator_input");
	if (locateZip.length > 0 && locateZip.valid()) {
		var results = $(".pdp_locator_results");
		var radiusDropdown = $(".pdp_locator_radius");
		var notFoundError = $(".pdp_locator_notfound");

		// Show loading gif and hide errors
		results.empty().addClass("loading");
		notFoundError.hide();

		var data = {
			"max_radius" : radiusDropdown.val(),
			"zip" : $(".pdp_locator_input").val(),
			"variation_id" : $("#pid").val()
		};

		// Load locate results
		results.load(Urls.LocateStores, data, function () {
			// Remove loading gif
			results.removeClass("loading");
			// If locator radius was automatically increased due to lack of results, change dropdown to new radius
			var preview = results.find(".pdp_locator_preview");
			if (preview.hasClass("radiusIncreased") || preview.length == 0) {
				var newRadiusSelection = preview.data("radius");
				if (!newRadiusSelection) {
					newRadiusSelection = radiusDropdown.find("option").length - 1;
				}
				else {
					newRadiusSelection = radiusDropdown.find("option[value="+newRadiusSelection+"]").index();
				}
				radiusDropdown.data("suppress", true).prop("selectedIndex", newRadiusSelection).trigger("change");
			}
			// Show not found error if there are no results
			if (results.find(".pdp_locator_preview").length == 0) {
				notFoundError.show();
			}
		});
	}
}

//Use data from swatch href to display image
function fullScreenImage(){
	var swatches = $('.swatches li.selected a');
	var selectedVariation = $('.swatches li.selected a').attr('href');

	if(swatches.length >= 1 && selectedVariation){
		var fullScreenZoomLink = $('#fullscreen-zoom-hopup');
		var selectedVariation = selectedVariation.replace("Product-Variation", "Product-GetFullScreenImage");
		fullScreenZoomLink.attr('href', selectedVariation);
	}
}

$(function() {
	var mobileIcon = $('#mobile-zoom-icon');
	var pdpMain = $('#pdpMain');

		if(pdpMain.length >= 1){
			fullScreenImage();

			var isGiftCard = $('#isGiftCard').length;
			if(isGiftCard){
				$('#fullscreen-zoom-hopup').addClass('visually-hidden');
			}

			$('body').on('click','#fullscreen-zoom-hopup',function(e){
				e.preventDefault();

				// Create Dialog
				var dlg = app.dialog.create({options : {
					width: 895,
					dialogClass: "fullScreen"
				}});

				var params = {};


				//Potentially add monogramming option parameters
				var $monogrammingContainer = pdpMain.find('.monogram-container');

				if($monogrammingContainer.length){

					var imgOptions = $monogrammingContainer.data('imageOptions');
					if($monogrammingContainer.find('ul.monogram-styles li.monogram-style-tile.selected').length != 0){
						var	personalizationType = $monogrammingContainer.find('ul.monogram-styles li.monogram-style-tile.selected').attr('data-style-config').personalizationType;
					}
					var valid = (imgOptions['$ftype'] != null &&
						imgOptions['$fstyle'] !=  null &&
						imgOptions['$dots'] != null &&
						(imgOptions['$chr1'] != null || imgOptions['$chr2'] != null || imgOptions['$chr3'] != null));

					if($monogrammingContainer.find('li.monogram-color-swatch').length){
						valid = valid && imgOptions['$color'] != null;
					}

					if(valid){

						var keys = Object.keys(imgOptions),
							newImgOptions = {};

						//add the prefix to make it easy on the serverside to grab all of the right parameters
						for(var i = 0; i < keys.length;i++){
							var key = "imgOption_"+keys[i];

							newImgOptions[key] = imgOptions[keys[i]];
						}

						newImgOptions["personalizationType"] = personalizationType;

						params = newImgOptions;
					}
				}


				var url = app.util.appendParamsToUrl($(this).attr("href"),params);
				//if URL is built on monogram page, it is incomplete and cannot be rendered
				if(url.indexOf('size') < 0){
					return false;
				}
				$.ajax({
					url:url,
					target:dlg,
					callback: function () {

						dlg.dialog("open");

						var dialogContainer = $('#dialog-container');
						var productImage = dialogContainer.find($('.product-primary-image img'));
						var downloadLink = $('#fullscreen-download a');
						dialogContainer.find($('.ui-dialog-titlebar-close').addClass('fullscreen-zoom-close'));

						var replaceStr = "$s7fullsize$";
						if($monogrammingContainer.length){
							replaceStr = "$productThumbnail$";
						}

						$(".thumb a").click(function(e) {
							e.preventDefault();
							var imageSrc = $(this).attr('href');

							var fullScreenImg = imageSrc.replace(replaceStr, "$fullscreen$");
							productImage.attr('src', fullScreenImg);

							// Append Scene7 param force download
							fullScreenImg += '&download';
							downloadLink.attr('href', fullScreenImg);
							$(e.target).closest("li").addClass("selected").siblings().removeClass("selected");
						});

						var $list = dialogContainer.find('ul');
						$list.jcarousel({
							auto: 0,
							vertical:true,
							scroll:1
						});
						var next = dialogContainer.find('#next');
						var prev = dialogContainer.find('#prev');
						if ($('.fullScreen').find('#thumbnail-carousel li').length < 5) {
							next.hide();
							prev.hide();
						} else {
							$('#thumbnails .jcarousel-prev').css("cssText", "display: block !important;");
							$('#thumbnails .jcarousel-next').css("cssText", "display: block !important;");
						}

						var $first = $('li:first', $list),
							$last = $('li:last', $list);

						next.click(function (e) {
							var $next, $selected = dialogContainer.find((".selected"));
						    $next = $selected.next('li').length ? $selected.next('li') : $first;
						    $selected.removeClass("selected");
						    $next.addClass('selected');

						    var url = $next.find('a').attr("href");

						    if($monogrammingContainer.length){
						    	url = url.replace(replaceStr,"$fullscreen$");
							}

							productImage.attr('src', url);
							downloadLink.attr('href', url);

							if ($last.hasClass('selected')) {
								$(".jcarousel-next").trigger( "click" );
							}
						});

						prev.click(function () {
							var $prev, $selected = dialogContainer.find((".selected"));
						    $prev = $selected.prev('li').length ? $selected.prev('li') : $last;
						    $selected.removeClass("selected");
						    $prev.addClass('selected');

						    var url = $prev.find('a').attr("href");

						    if($monogrammingContainer.length){
						    	url = url.replace(replaceStr,"$fullscreen$");
							}

							productImage.attr('src', url);
							downloadLink.attr('href', url);

							if ($first.hasClass('selected')) {
								$(".jcarousel-prev").trigger( "click" );
							}
						});

						var pdpMainCarousel = $('#pdpMain #thumbnail-carousel .selected');
						if (pdpMainCarousel.length) {
							var selectedIndex = pdpMainCarousel.index();
							var correspondingFSZoomImage = $list.find('li').eq(selectedIndex).find('a');
							if (correspondingFSZoomImage.length) {
								correspondingFSZoomImage.click();
							}
						}
					}
				});
			});

			if ($("html").is('.touch')) {
				mobileIcon.show();
				var overlayTimeOut = Resources.ZOOM_OVERLAY_TIMEOUT;
				setTimeout(function(){
					mobileIcon.fadeOut("1000");
				}, overlayTimeOut);
			}

			$cache.pdpMain.on('click', '#mobile-fullscreen', function(e) {
				e.preventDefault();
				var imgURL = $('.thumb.slick-current a').attr('href');
				var modalcontainer = $('#mobile-fullscreen-modal');
				var img =  $('<img/>');
				img[0].src = imgURL;

				modalcontainer.empty();
				modalcontainer.append(img)

				var dlg = $('#mobile-fullscreen-modal').dialog({
					width: $('#main').width(),
					minHeight: 750,
					position: { my: "left top", at: "top", of: window },
					dialogClass: 'mobile-fullscreen-modal'
				});

				dlg.dialog('open');

				var czInstance = new CloudZoom(modalcontainer.find('img').eq(0), {
					autoInside: 740,
					zoomSizeMode: 'lens'
				});

				dlg.off().on( "dialogclose", function( event, ui ) {
					dlg.dialog('destroy');
					czInstance.destroy();
				});

			});
			$('#main').on('click', '.thumb.slick-slide.slick-current', function() {
				var width = $('#main').width();
				if (width <= 480) {
					$('#mobile-fullscreen').click();
				}
			})
		}

});

$cache.pdpMain.find('.product-primary-image img').on('mousemove', function(e){
	if (!$("html").is('.touch')) {
		var pdpMain = $('#pdpMain');
		if(pdpMain.length){
			$('#zoom-tip').show().css({'left': e.pageX + 20, 'top': e.pageY - 20 - pdpMain.offset().top});
		}
	}
}).on('mouseleave', function(){
	$('#zoom-tip').hide();
}).on('click', function(e){
	var $self = $(this).css('cursor', 'wait');
	var $zoomedCtr = $('#zoomed-image');
	var imgSrc = $self.data('big');
	var img = new Image();
	img.onload=function(){
		//$self.removeAttr('style');
		$self.css('cursor','');
		$zoomedCtr.fadeIn(200);
		if ($("html").is('.touch')) {
			centerZoom();
		} else {
			zoomInteraction(e);
		}
	};
	img.src=imgSrc;
	$zoomedCtr.find('img').attr('src', imgSrc);
});

//   zoom interaction
function zoomInteraction(event){
	var $container = $('#zoomed-image');
	var $image = $container.find('img');
	var container_wid = $container.width();
	var container_hei = $container.height();
	var image_wid = $image.width();
	var image_hei = $image.height();
	var offset = $container.offset();
	var maskWidth  = $("#zoomed-image").width();
	var maskHeight = $("#zoomed-image").height();
	var x1,y1,x2,y2;


	if(container_wid < image_wid) {
		var wid_diff = image_wid - container_wid;
		var new_left = -(wid_diff/2);

		$image.css({
			left: new_left
		});
		x1 = 2*new_left;
		x2 = 0;

	} else {
		var new_left = (container_wid - image_wid)/2;

		$image.css({
			left: new_left
		});

		x1 = 0;
		x2 = 2*new_left;
	}

	if(container_hei < image_hei) {
		var hei_diff = (image_hei - container_hei)/container_hei;
		var new_top = 0 - ((event.pageY - offset.top) * hei_diff) ;

		$image.css({
			top: new_top
		});
		// 108 is the height of the header
		y1 = -( image_hei/2 + 108);
		y2 = 108;
	}

	$('#zoomed-image img').draggable({ containment: [x1,y1,x2,y2], scroll: false});
}

function centerZoom() {
	var $container = $('#zoomed-image'),
		$image = $container.find('img'),
		container_wid = $container.height(),
		container_hei = $container.width(),
		image_wid = $image.width(),
		image_hei = $image.height();

	if(container_wid < image_wid) {
		var wid_diff = (image_wid - container_wid)/container_wid;
		var new_left = 0 - (1 * wid_diff) - (container_wid/2);
		$image.css({
			left: new_left
		});
	} else {
		$image.css({
			left: 0 - (image_wid/2)
		});
	}

	$image.css({
		'top': '0px'
	});
}

function replaceContent() {
	var $updateContentCtr = $cache.pdpMain.find("#updateTabs"),
		$oldTabs = $updateContentCtr.find('.tab-content'),
		isQuickView = (function() {
			var $qvcontainer = $('#quick-view-dialog');
			return ($qvcontainer.length>0);
		})();

	if($updateContentCtr.length > 0) {
		$.each($oldTabs, function(index, oldTab) {
			var $oldTab = $(oldTab),
			$oldTabId = $oldTab.attr('id'),
			$newTab = '',
			newContent = '';

			if($oldTabId){
				$newTab = $updateContentCtr.find('[data-rel='+ $oldTabId +']');
				newContent = $newTab.html();
			}

			if ($newTab != '' && $newTab.length > 0) {
				$oldTab.empty().html(newContent);
			}
		});
		$updateContentCtr.remove();

		var vertical = true

		$('#thumbnail-carousel').jcarousel({
			auto: 0,
			vertical:vertical,
			scroll:1
		});
		$(function() {
			var pdpMain = $('#pdpMain');
			var iscNext = pdpMain.find($('.jcarousel-next')).is(':hidden');
			var iscPrev = pdpMain.find($('.jcarousel-prev')).is(':hidden');
			var carouselClip = pdpMain.find('.jcarousel-clip');

			if(iscNext && iscPrev){
				carouselClip.css({'margin-top': '0'});
			}
		});
		if ($('#pdpMain').find('#thumbnails li').length <= 4) {
			$('#thumbnails .jcarousel-prev').hide();
			$('#thumbnails .jcarousel-next').hide();

		}
	}
}

function replaceCloudZoomImages(pdpMain) {
	var newImages = $("#update-images");
	var imageContainer = pdpMain.find(".product-col-1:first");

	imageContainer.html(newImages.html());
	newImages.remove();
	app.product.initMobilePDPCarousel();

	var isQuickView = (function() {
		var $qvcontainer = $('#quick-view-dialog');
		return ($qvcontainer.length>0);
	})();

	if (!isQuickView){
		// Re hook
		CloudZoom.quickStart();
	}
	else{
		app.quickView.initQuickViewCarousel();
	}
}

function replaceImages(pdpMain) {
	var $updateImagesCtr = pdpMain.find("#update-images"),
		$mainImageCtr = pdpMain.find(".product-image-container:first"),
		thumbnails = pdpMain.find('.product-thumbnails:first'),
		newThumbnails = $updateImagesCtr.find('.product-thumbnails'),
		newMainImages = $updateImagesCtr.find('.product-image-container'),
		currentPos = Number($mainImageCtr.find('li.current').attr('jcarouselindex'))-1 || 0,
		isQuickView = (function() {
			var $qvcontainer = $('#quick-view-dialog');
			return ($qvcontainer.length>0);
		})();


	$mainImageCtr.replaceWith(newMainImages);
	$updateImagesCtr.remove();

}

//Use for AJAX Requests - Checks and closes any BazzarVoice Hopup Dom Elements
function bazzarvoiceClearHopup(){
	try{
		var bvReadCloseBtn = $('#ui-dialog-title-RevContainer').next('.ui-dialog-titlebar-close');
		var bvSubmitCloseBtn = $('#ui-dialog-title-BVSubmissionContainer').next('.ui-dialog-titlebar-close');

		if(bvReadCloseBtn.is(':visible'))
			bvReadCloseBtn.trigger('click');

		if(bvSubmitCloseBtn.is(':visible'))
			bvSubmitCloseBtn.trigger('click');
	} catch(e) {
		//error
	}
}

/*Functions for Monogramming*/
function validateFormFields(){
	var valid = true;
	if ($('.monogram-container').length === 0) {
		return valid;
	}

	if(($cache.selectedStyleConfig.minChar == $cache.selectedStyleConfig.maxChar) && $cache.selectedStyleConfig.maxChar <= 3){
		for(var i = 1; i <= $cache.selectedStyleConfig.maxChar; i++){
			var $ele = $cache.monogramformfields.find('input[name="monogram_CHAR' + i + '"]');

			if(!$ele.val()){
				valid = false;
				setErrorMessage($ele);

				break;
			}
		}

	}else{
		// if we have a "word" type, make sure we have at least 1 character
		if($cache.selectedStyleConfig.maxChar > 3){
			var $ele = $cache.monogramformfields.find('input[name="monogram_CHAR1"]');
			if(!$ele.val()){
				valid = false;
				setErrorMessage($ele);
			}
		// else, we have a range of characters, so check to make sure there
		// is at least 1 field populated
		}else{
			var count = 0;

			for(var i = 1; i <= $cache.selectedStyleConfig.maxChar; i++)
			{
				var $ele = $cache.monogramformfields.find('input[name="monogram_CHAR' + i + '"]');

				if( $ele.val() )
				{
					count++;
				}
			}

			if( count < $cache.selectedStyleConfig.minChar || count > $cache.selectedStyleConfig.maxChar )
			{
				valid = false;
				var $ele = $cache.monogramformfields.find('input[name="monogram_CHAR1"]');
				// show the error message
				setErrorMessage($ele);
			}
			else
			{
				valid = true;
			}
		}
	}
	return valid;
}
function setErrorMessage($ele){
	// set an error class on $ele, we have one with the red border
	// show the error message
	$('.monogram-text-input-wrapper input').addClass('error');
	$('.monogram-text-missing-input-error').show();
}
function clearErrorMessages(){
	$('.monogram-text-input-wrapper input').removeClass('error');
	$('.monogram-text-input-error').hide();
}

function monogramReset() {
    var monoContainer = $('.monogram-container');
    if (monoContainer.length == 0) {
        return;
    } else {
        //remove the characters
        $('.monogram-text-input-field').val('').trigger("keyup").removeClass("error");
        $(".monogram-text-input-error").hide();

        // hide the bottom containers
        $cache.monogramcontainer.find('.monogram-section').addClass('inactive-section');
        $cache.monogramcontainer.find('.monogram-options-body').slideUp();
        $cache.monogramcontainer.find('.monogram-colors-section-body').slideUp();
        $cache.monogramcontainer.find('.monogram-section-title, .monogram-toggle-icon').addClass('inactive');
        $cache.monogramcontainer.find('.monogram-section-title .color-name').addClass('visually-hidden');
        $cache.pdpMain.find('.product-add-to-cart .availability .value').html("");

        // adjust 'choose a style' section
        $cache.monogramstyletiles.removeClass('selected');
        $cache.monogramcontainer.find('.monogram-section').first().removeClass('inactive-section');
        $cache.monogramcontainer.find('.monogram-section-title').first().removeClass('inactive');
        $cache.monogramcontainer.find('.monogram-toggle-icon').first().removeClass('inactive');

        // disable the a2c button
        $('button#add-to-cart').attr("disabled", "disabled");

        // unbind click events for slide Up/Down
        $cache.monogramcontainer.find('.monogram-section-toggle span').off('click');
    }
}

function monogramStyleTileClick(e){
	var $this = $cache.monogramstyles.find(e.target).closest('li.monogram-style-tile');

	if($this.hasClass('selected')){
		return;
	}

	// do changes for the tiles and style selection
	$cache.monogramstyletiles.removeClass('selected');
	$this.addClass('selected');



	var styleConfig = $this.data('style-config');
	$cache.selectedStyleConfig = styleConfig;

	/**
	 * setup fonts
	 */
	$cache.monogramfontselect.empty();
	var fontConfig;
	for (var i = 0; i < styleConfig.availableFonts.length; i++){
		fontConfig = styleConfig.availableFonts[i];
		createFontTile(fontConfig,i);
	}

	/**
	 * setup characters
	 */
	// setup title
	var charactersTitle;
	if(styleConfig.minChar != styleConfig.maxChar){
		charactersTitle = "type in " + styleConfig.minChar + " - " + styleConfig.maxChar + " characters"
	}else{

		charactersTitle = "type in " + styleConfig.maxChar + " character";

		if(styleConfig.maxChar !== 1){
			charactersTitle += "s";
		}
	}
	$cache.monogramtexttitle.text(charactersTitle);


	// save off existing characters
	// only save if we aren't switching from a word
	if($cache.monogramcontainer.data('inputType') !== 'word'){
		var existingCharacters = {};
		$cache.monogramtextinputbody.find('input').each(function(){
			var $this  = $(this),
				position = $this.data('position');

			if(position){
				var o = {"val":$this.val(),
						"isSymbol":$this.hasClass('font-symbol'),
						"symbolConfig":$this.data('symbol-config')
						};
				existingCharacters[position] = o;
			}
		});
	}


	$cache.monogramtextinputbody.empty();

	/**
	 * setup input fields
	 */
	if(styleConfig.maxChar <=3){
		$cache.monogramcontainer.data('inputType','char');

		var $textInput;
		var $hiddenCharInputs = $cache.monogramformfields.find("input[name^='monogram_CHAR']");

		for(var i = 1; i <= 3;i++ ){
			if(i <= styleConfig.maxChar){
				// create input
				$textInput = createTextInput(styleConfig,i);
			}
			$cache.monogramcontainer.data('imageOptions')['$chr'+i] = "";
		}
		$cache.monogramtextinputclear.parent().removeClass('word');

		// if values are present for CHAR inputs that exceed the maxChar
		// count, set those values to empty;
		$.each($hiddenCharInputs, function (i,el) {
			if (i >= styleConfig.maxChar) {
				$(el).val('');
			}
		});

	// build big text field
	}else{

		$cache.monogramcontainer.data('inputType','word');

		createWordInput(styleConfig);
		$cache.monogramtextinputclear.parent().addClass('word');
	}
	// show/hide the 'first/last/middle' text
	$cache.monogramtextinputcontainer.find('.traditional-caption').toggle($cache.selectedStyleConfig.traditional);
	$cache.monogramtextinputcontainer.toggleClass('traditional',$cache.selectedStyleConfig.traditional);

	// clear out existing field data
	$cache.monogramformfields.find('input[name^="CHAR"]').val("");

	// repopulate characters
	// only repopulate if the inputType we're dealing with individual input
	// fields
	// and we're switching from a style that had characters input
	if($cache.monogramcontainer.data('inputType') === 'char' && existingCharacters){
		var $inputs = $cache.monogramtextinputbody.find('input');
		$.each(Object.keys(existingCharacters),function(i,char){

			// does the position match?
			var $input = $inputs.filter(function(){
				return $(this).data('position') === char;
			}).first();

			// if so, set the new value
			if($input.length){
				var existingCharacter = existingCharacters[char],
					char = existingCharacter.val,
					s7Val = char;


				// is this a symbol, and does the style support this symbol?
				if(existingCharacter.isSymbol){

					// loop over all the available configs and see if we can
					// find a match
					var isSymbolAvailable = false;
					for(var i = 0; i < $cache.selectedStyleConfig.availableSymbols.length; i++){
						var config = $cache.selectedStyleConfig.availableSymbols[i];

						if(config.character === existingCharacter.symbolConfig.character){
							isSymbolAvailable = true;
						}
						if(isSymbolAvailable){
							break;
						}
					}

					if(isSymbolAvailable){
						$input.addClass('font-symbol');
						$input.data('symbol-config',existingCharacter.symbolConfig);
						s7Val = existingCharacter.symbolConfig.scene7Code;
					}else{
						char = "";
						s7Val = "";
					}
				}

				$input.val(char);
				$cache.monogramcontainer.data('imageOptions')[$input.data('position')] = s7Val;
			}
		});
	}

	/**
	 * setup symbols
	 */
	var availableSymbols = styleConfig.availableSymbols;
	$cache.monogramsymbollist.empty();
	if(availableSymbols && availableSymbols.length > 0){
		var symbolConfig;
		for(var i = 0; i < availableSymbols.length; i++){
			symbolConfig = availableSymbols[i];
			if(symbolConfig.fontCode){
				createSymbol(symbolConfig,i);
			}
		}

		$cache.monogramsymbolselectioncontainer.show();
	}else{

		$cache.monogramsymbolselectioncontainer.hide();

		// TODO-MONO: empty out any selected symbols

	}


	/**
	 * setup dots
	 */
	if(!styleConfig.dotsAllowed){
		// set dots hidden input value for form submission
		$cache.monogramformfields.find("input[name=monogram_DOTS]").val('N');

		// set image values
		$cache.monogramcontainer.data('imageOptions')['$dots'] = 0;

		// hide dots section
		$cache.monogramdotscontainer.slideUp();

	}else{
		$cache.monogramdotscontainer.find('.dots-title').toggleClass('traditional',$cache.selectedStyleConfig.traditional);
		$cache.monogramingoptionscontainer.find('.monogram-text-input-error').toggleClass('traditional',$cache.selectedStyleConfig.traditional);
	}

	/**
	 * Do initial setup click events
	 */
	$cache.monogramfontselect.find('li.monogram-font').first().click();
	if($cache.monogramcolors.length){
		$cache.monogramcolors.first().click();
	}

	// Set style values for form submission
	$cache.monogramformfields.find("input[name='monogram_TRADITIONAL']").val(styleConfig.traditional ? "Y" : "N");
	$cache.monogramformfields.find("input[name='monogram_SIZE']").val(styleConfig.fontSize);
	$cache.monogramformfields.find("input[name='monogram_ALT_SIZE']").val(styleConfig.fontAltSize);
	$cache.monogramformfields.find("input[name='monogram_STYLE']").val(styleConfig.styleName);
	$cache.monogramformfields.find("input[name='monogram-display_monogram-style-name']").val(styleConfig.styleName);
	$cache.monogramformfields.find("input[name='personalization-type']").val(styleConfig.personalizationType);


	// set image values
	$cache.monogramcontainer.data('imageOptions')['$ftype'] = styleConfig.styleID;
	if($cache.monogramcolors.length){
		$cache.monogramcontainer.data('imageOptions')['$color'] = $cache.monogramcolors.filter('li.selected').data('color-config').s7Code;
	}

	// show the bottom containers
	$cache.monogramcontainer.find('.monogram-section').removeClass('inactive-section');
	$cache.monogramcontainer.find('.monogram-options-body').slideDown();
	$cache.monogramcontainer.find('.monogram-colors-section-body').slideDown();
	$cache.monogramcontainer.find('.monogram-section-title, .monogram-toggle-icon').removeClass('inactive');
	$cache.monogramcontainer.find('.monogram-section-title .color-name').removeClass('visually-hidden');
	$cache.pdpMain.find('.product-add-to-cart .availability .value').html("");

	$cache.monogramtextinputcontainer.find('input').first().focus();

	updateImages();
	// enable the a2c button
	var title = $('button#add-to-cart').attr('rel');
	//$('button#add-to-cart').attr('title',title).removeAttr("disabled");
	$('.monogram-text-missing-input-error').hide();

	if(!$cache.monogramcontainer.find('.monogram-section-toggle span').hasClass('enabled')) {
		$cache.monogramcontainer.find('.monogram-section-toggle span').click(monogramSectionToggleClick);
	}
}

function monogramSectionToggleClick(e){
	var $monogramsectioncontainer = $(e.target).closest('div.monogram-section');
	$monogramsectioncontainer.toggleClass('inactive-section');
	$monogramsectioncontainer.find('.monogram-section-body').slideToggle();
	$monogramsectioncontainer.find('.monogram-section-title').toggleClass('inactive');
	$monogramsectioncontainer.find('.monogram-toggle-icon').toggleClass('inactive');
	$monogramsectioncontainer.find('.monogram-toggle-icon').addClass('enabled');
	$monogramsectioncontainer.find('.monogram-section-title .color-name').toggleClass('visually-hidden');
}

function monogramFontClick(e){
	var $this = $(e.target).closest('li.monogram-font');

	if($this.hasClass('selected')){
		return;
	}

	$cache.monogramfontselect.find('li.monogram-font').removeClass('selected');
	$this.addClass('selected');
	var fontData = $this.data('font-config');
	var $inputs = $cache.monogramtextinputbody.find('input').not('.font-symbol');
	$inputs.css('font-family',fontData.fontStyle);

	$inputs.toggleClass('monogram-text-input-field-bold',fontData.bold);

	$inputs.toggleClass('monogram-text-input-field-italic',fontData.italic);

	// set font field values for form submission
	$cache.monogramformfields.find("input[name='monogram_FONT']").val(fontData.radialFont);
	$cache.monogramformfields.find("input[name='monogram_BOLD']").val(fontData.bold ? "Y" : "N");
	$cache.monogramformfields.find("input[name='monogram_ITALIC']").val(fontData.italic ? "Y" : "N");

	// set image vars
	$cache.monogramcontainer.data('imageOptions')['$fstyle'] = fontData.fontName.toLowerCase();

	updateImages();
}

function monogramColorClick(e){
	var $this = $(e.target).closest('li.monogram-color-swatch');

	if($this.hasClass('selected')){
		return;
	}

	$cache.monogramcolors.removeClass('selected');
	$this.addClass('selected');

	var colorConfig = $this.data('color-config')

	$cache.monogramcontainer.data('imageOptions')['$color'] = colorConfig.s7Code;

	$cache.monogramformfields.find("input[name='monogram_COLOR']").val(colorConfig.radialCode);
	$cache.monogramformfields.find("input[name='monogram-display_monogram-color-name']").val(colorConfig.colorName);

	$cache.monogramcontainer.find('.monogram-section-title .color-name').text(colorConfig.colorName);

	updateImages();

}

function textInputFocus(e){
	var $this = $(e.target);
	$cache.monogramtextinputbody.find('input').removeClass('focused');
	$this.addClass('focused');
	$cache.focusedinput = $this;

	var disableDoubleWideSymbols = false;

	if($cache.monogramsymbollist.find('li.monogram-symbol.double-wide.selected').length > 0){
		disableDoubleWideSymbols = true;
		if($this.hasClass('font-symbol')){
			var symbolConfig = $this.data('symbol-config');
			if(symbolConfig.width == 2 ){
				disableDoubleWideSymbols = false;
			}
		}
	}

	$cache.monogramsymbollist.find('li.monogram-symbol.double-wide').toggleClass('unselectable-double-wide-symbol', disableDoubleWideSymbols);
}

function textInputBlur(e){
	$(e.target).removeClass('focused');
	$('.monogram-text-missing-input-error').hide();
}

function textInputKeyUp(e){
	var $this = $(e.target),
		val = $this.val(),
		updateCharacter = false,
		valIsValid = false;

	// check if we need to upper or lowercase this
	if(val){
		switch($cache.selectedStyleConfig.monogrammingFontCase){
			case "forceUpper":
				val = val.toUpperCase();
				break;

			case "forceLower":
				val = val.toLowerCase();
				break;
		}
	}


	valIsValid = $cache.selectedStyleConfig.charactersList.indexOf(val) > -1;

	// if the field was a symbol, and we deleted it, we need to remove the
	// symbol data and reapply the old fonts
	// also, updated the selected symbols and the inputted characters
	if( $this.hasClass("font-symbol") && val === ""){

		var symbolConfig = $this.data('symbol-config');
		if(symbolConfig.width == 2){
			$cache.monogramsymbollist.find('li.monogram-symbol.double-wide').toggleClass('unselectable-double-wide-symbol', false);
		}

		setInputBackToNormal($this);

		updateCharacter = true;

	// if the field is NOT a symbol, or it is a symbol and someone
	// highlighted and changed it
	}else if( !$this.hasClass('font-symbol') || $this.hasClass("font-symbol") && valIsValid){

		// if it was a highlight and change? switch input field back to
		// being normal
		if($this.hasClass("font-symbol") && valIsValid){
			setInputBackToNormal($this);
		}

		if($cache.selectedStyleConfig.minChar !== $cache.selectedStyleConfig.maxChar){
			valIsValid = valIsValid || $this.val() === "";
		}

		if(!valIsValid){
			val = "";
		}else if ((e.key && e.key.length == 1) || (app.isMobileUserAgent && valIsValid)){
			$this.closest('div').next().find('input').focus();
		}

		$this.toggleClass('error',!valIsValid);
		$('.monogram-text-invalid-input-error').toggle(!valIsValid);

		updateCharacter = true;
	}

	if(updateCharacter){
		$this.val(val);

		$cache.monogramcontainer.data('imageOptions')[$this.data('position')] = val;

		$cache.monogramformfields.find("input[name='monogram_CHAR" + $this.data('index') + "']").val(val);

		$cache.monogramcontainer.data('imageOptions')['$chars'] = Object.keys($cache.monogramcontainer.data('imageOptions')).filter(function(item){
			return item.indexOf('$chr') === 0;
		}).length;
	}

	updateImages();
    validateMonogramInputValues();
}

function setInputBackToNormal($inputField){
	var $selectedFont = $cache.monogramfontselect.find('li.monogram-font.selected'),
	fontData = $selectedFont.data('font-config');

	$inputField.css('font-family',fontData.fontStyle);
	$inputField.toggleClass('monogram-text-input-field-bold',fontData.bold);
	$inputField.toggleClass('monogram-text-input-field-italic',fontData.italic);

	$inputField.removeClass("font-symbol");

	updateSymbolsSelected();
}

function wordInputKeyUp(e){
	var $this = $(e.target),
		val = $this.val().split(''),
		valid = true;

	for(var i = 0; i < val.length; i++){
		valid = valid && $cache.selectedStyleConfig.charactersList.indexOf(val[i]) > -1;
	}

	if($cache.selectedStyleConfig.minChar !== $cache.selectedStyleConfig.maxChar){
		valid = valid || $this.val() === "";
	}

	if(!valid){
		val = "";
	}

	var maxChars = $cache.selectedStyleConfig.maxChar;

	for(var i = 1;i <= maxChars; i++){
		delete $cache.monogramcontainer.data('imageOptions')['$chr'+i];
		$cache.monogramformfields.find('input[name="monogram_CHAR'+i+'"]').val("");
	}

	var index,
		wordLength = val.length,
		letter;
	for(var i = 1; i <= maxChars; i++){
		index = i-1;
		if(index < wordLength){
			letter = val[index];
		}else{
			letter = "";
		}

		$cache.monogramcontainer.data('imageOptions')['$chr'+i] = letter;
		$cache.monogramformfields.find('input[name="monogram_CHAR'+i+'"]').val(letter);
	}


	$cache.monogramcontainer.data('imageOptions')['$chars'] = wordLength;

	updateImages();

	$this.toggleClass('error',!valid);
	$('.monogram-text-invalid-input-error').toggle(!valid);
    validateMonogramInputValues();
}

function symbolClick(e){

	if($cache.focusedinput == null){ return; }

	$cache.focusedinput.focus();

	var $this = $(e.target).closest('li.monogram-symbol');

	if($this.hasClass('unselectable-double-wide-symbol')){ return; }

	$this.addClass('selected');

	var symbolConfig = $this.data('symbol-config');

	// clear out old font-family and use the symbol font family
	$cache.focusedinput.removeAttr('style');
	$cache.focusedinput.addClass('font-symbol');
	$cache.focusedinput.removeClass('monogram-text-input-field-italic monogram-text-input-field-bold error');

	// add the symbol
	var val = $('<div>').html(symbolConfig.fontCode).text();
	$cache.focusedinput.val(val);
	$cache.focusedinput.data('symbol-config',symbolConfig);

	// clear error messaging
	$('.monogram-text-invalid-input-error').hide();
	$cache.focusedinput.removeClass('error');

	// set the image options for use in re-rendering the images
	$cache.monogramcontainer.data('imageOptions')[$cache.focusedinput.data('position')] = symbolConfig.scene7Code;

	var index = $cache.focusedinput.data('index');

	$cache.monogramformfields.find("input[name='monogram_CHAR" + index + "']").val(symbolConfig.radialCode);

	updateSymbolsSelected();

	if(index !== $cache.selectedStyleConfig.maxChar){
		if(symbolConfig.width == 2){
			$cache.monogramsymbollist.find('li.monogram-symbol.double-wide').toggleClass('unselectable-double-wide-symbol', true);
		}
		$cache.focusedinput.closest('div').next().find('input').focus();
	}


	updateImages();
	validateMonogramInputValues();
}

function updateSymbolsSelected(){
	var $symbols = $cache.monogramsymbollist.find('li.monogram-symbol');

	$symbols.each(function(){
		var currentSymbolConfig = $(this).data('symbol-config'),
			symbolCount = 0;

		$cache.monogramtextinputbody.find('input').each(function(){
			var $field = $(this);

			if($field.hasClass('font-symbol')){
				var fieldSymbolConfig = $field.data('symbol-config');

				if(fieldSymbolConfig.character === currentSymbolConfig.character){
					symbolCount++;
				}
			}
		});

		if(symbolCount === 0){
			$symbols.each(function(){
				var $this = $(this),
					data = $this.data('symbol-config');

				if(currentSymbolConfig.character === data.character){
					$this.removeClass('selected');
				}
			});

		}
	});
}

function dotsOptionClick(e){
	var $this = $(e.target).closest('li.dots-option');

	if($this.hasClass('selected')){
		return;
	}

	$cache.monogramdotsoptions.removeClass('selected');
	$this.addClass('selected');

	// set dots hidden input value for form submission
	$cache.monogramformfields.find("input[name=monogram_DOTS]").val($this.data('value') ? "Y" : "N");

	// set image values
	$cache.monogramcontainer.data('imageOptions')['$dots'] = $this.data('value') ? 1 : 0;

	updateImages();
}

function textInputClearClick(e){
    // disable the a2c button
    var title = $('button#add-to-cart').attr('rel');
    $('button#add-to-cart').attr('title',$('button#add-to-cart').attr('rel')).attr("disabled", "disabled");
	$cache.monogramtextinputbody.find("input").val("");
	$cache.monogramtextinputbody.find('input').removeClass('font-symbol');
	$cache.monogramsymbollist.find('li.monogram-symbol').removeClass('selected unselectable-double-wide-symbol');
	$cache.monogramformfields.find("input[name^='monogram_CHAR").val("");

	var imageOptions = $cache.monogramcontainer.data('imageOptions');
	var keys = Object.keys(imageOptions);
	for(var i = 0; i < keys.length; i++){
		var key = keys[i];
		if(key.indexOf('$chr') === 0){
			imageOptions[key] = "";
		}
	}
	$cache.monogramcontainer.data('imageOptions',imageOptions);
	updateSymbolsSelected();
	updateImages();
	clearErrorMessages();
}

function createFontTile(font,i){
	/**
	 * <li class="monogram-font"> <span class="font-name"></span> </li>
	 */
	var $font = $cache.fonttilebase.clone();
	$font.find('.font-name').text(font.fontName);
	$font.find('.font-name').css("font-family",font.fontStyle);

	if(font.bold){
		$font.find('.font-name').addClass("monogram-font-style-bold");
	}

	if(font.italic){
		$font.find('.font-name').addClass("monogram-font-style-italic");
	}

	$font.data('font-config',font);

	if(i ===0){
		$font.addClass('first-monogram-font');
	}

	$font.click(monogramFontClick);

	$cache.monogramfontselect.append($font);
}

function createTextInput(styleConfig,i){
	var $textInput = $cache.monograminputbase.clone(),
		$input = $textInput.find('input');

	if($cache.monogramfontselect.find('.monogram-font.selected').length === 1){
		$input.css('font-family',$cache.monogramfontselect.find('.monogram-font.selected').data('font-config').fontStyle);
	}

	$input.data('position','$chr'+i);

	$input.data('index',i);

	if(i === 2 && styleConfig.traditional){
		$input.addClass('monogram-text-input-field-traditional-middle')
	}

	if(styleConfig.maxChar === 1){
		$input.addClass('monogram-text-input-field-single');
	}else if(styleConfig.maxChar === 2){
		$input.addClass('monogram-text-input-field-double');
	}

	switch(styleConfig.monogrammingFontCase){
		case "forceUpper":
			$input.addClass("monogram-font-case-upper");
			break;

		case "forceLower":
			$input.addClass("monogram-font-case-lower");
			break;
	}

	$input.focus(textInputFocus);
	$input.blur(textInputBlur);
	$input.keyup(textInputKeyUp);

	$cache.monogramtextinputbody.append($textInput);

	return $textInput;
}

function createWordInput(styleConfig){
	var $textInput = $cache.monograminputbase.clone(),
	$input = $textInput.find('input');

	if($cache.monogramfontselect.find('.monogram-font.selected').length === 1){
		$input.css('font-family',$cache.monogramfontselect.find('.monogram-font.selected').data('font-config').fontStyle);
	}

	$input.attr('maxlength',styleConfig.maxChar);

	$input.addClass('monogram-word-input-field');

	$input.focus(textInputFocus);
	$input.blur(textInputBlur);
	$input.keyup(wordInputKeyUp);

	$cache.monogramtextinputbody.append($textInput);
}

function createSymbol(symbolConfig,i){
	/**
	 * <li class="monogram-symbol"> <div class="monogram-symbol-field
	 * font-symbol"/> </li>
	 */
	var $symbol = $cache.symbolbase.clone();
	// add ADA label attrs
	$symbol.attr('aria-label', symbolConfig.character)
	$symbol.find('div').attr('aria-label', symbolConfig.character)
	$symbol.find('div').html(symbolConfig.fontCode);
	$symbol.data('symbol-config',symbolConfig);

	if(symbolConfig.width === 2){
		$symbol.addClass("double-wide");
	}
	if(symbolConfig.fontSize){
		$symbol.find('div').css('font-size',symbolConfig.fontSize);
	}

	$symbol.click(symbolClick)

	$cache.monogramsymbollist.append($symbol);
}


function updateImages(){
	if($cache.imagesTimeout){
		window.clearTimeout($cache.imagesTimeout);
	}
	$cache.imagesTimeout = window.setTimeout(doUpdateImages,500);
}

function validateMonogramInputValues(){

	var monogramTextInputValid = false;
	//$('.monogram-text-input-body').find('monogram-text-input-field').each(function() {
    var monogramTextInputs = $('.monogram-text-input-field');
    for (var i = 0; i< monogramTextInputs.length; i++) {
        if ($(monogramTextInputs[i]).val().trim() != '') {
        	monogramTextInputValid = true;
            break;
        }
    }

    //if all inputs are filled out, enable Add To Cart button
    if (monogramTextInputValid) {
        var title = $('button#add-to-cart').attr('rel');
        $('button#add-to-cart').attr('title',title).removeAttr("disabled");
    } else {
        // disable the a2c button
        $('button#add-to-cart').attr("disabled", "disabled");
    }
}


function getQueryString(){
	var imgOptions = $cache.monogramcontainer.data('imageOptions'),
		keys = Object.keys(imgOptions),
		qs = [],
		key;

	for(var i = 0; i < keys.length; i++){
		key = keys[i];
		qs.push(key + "=" + imgOptions[key]);
	}

	return qs.join("&");
}

function validateImageOptions(){
	var imgOptions = $cache.monogramcontainer.data('imageOptions');

	var valid = (imgOptions['$ftype'] != null &&
		imgOptions['$fstyle'] !=  null &&
		imgOptions['$dots'] != null &&
		(imgOptions['$chr1'] != null || imgOptions['$chr2'] != null || imgOptions['$chr3'] != null));

	if($cache.monogramcolors.length){
		valid = valid && imgOptions['$color'] != null;
	}

	return valid;
}

function resetMonogrammingPage(){
	textInputClearClick();
	$cache.monogramstyletiles.removeClass('selected');

	// hide the bottom containers
	$cache.monogramcontainer.find('.monogram-options-body').slideUp();
	$cache.monogramcontainer.find('.monogram-colors-section-body').slideUp();
	$cache.monogramcontainer.find('.monogram-section-title, .monogram-toggle-icon').addClass('inactive');
	$cache.monogramcontainer.find('.monogram-section-title .color-name').addClass('visually-hidden');

	// disable the a2c button
	$('button#add-to-cart').attr("disabled","disabled");
	$('.monogram-text-missing-input-error').show();
}

function setAddToCartHandler(e) {
	e.preventDefault();
	if (!validateFormFields()) {
		return;
	}

	var form = $(this).closest('form');
	var qty = form.find("select[name='Quantity']");
	var isSubItem = $(this).hasClass("sub-product-item");
	if(qty.length === 0 || isNaN(qty.val()) || parseInt(qty.val(), 10) === 0) {
		qty.val("1");
	}

	// for gift registry
	var itemid = $(this).data('itemid');
	if(itemid){
		$('input[name=itemid]').val(itemid);
	}
	var qtyelem = $(this).data('qtyelem');
	if(qtyelem){
		qtyelem = $('select[name=' + qtyelem + ']').first();
		if(qtyelem){
			$('input[name=Quantity]').val(qtyelem.val());
		}
	}

	var pdpMain = ($cache ? $cache.pdpMain : null);

	var data = form.serialize();

	app.cart.update(data + '&flyout=true', function (response) {
		resetMonogrammingPage();
		if (response.error == 'out_of_stock') {
			var outofstockmessage = (typeof katespade != 'undefined') ? Resources.PRODUCT_OUT_OF_STOCK_FLYOUT : Resources.KSS_PRODUCT_OUT_OF_STOCK_FLYOUT;
			app.minicart.flyout(response,pdpMain,null,outofstockmessage);
			return;
		}
		// refresh the quantity and check for purchase limit
		if(typeof katespade != 'undefined'){ // for now only enable on
												// kate spade and kate sale
			app.product.updateQuantity({checkPurchaseLimit:true});
		}
		var miniCartV2 = $(".mini-cart-refresh.v2");
		if (miniCartV2.length == 0) {
			app.minicart.flyout(response, pdpMain, form.find("#add-to-cart"));
		}

		// update the minicart, but don't show it
		var url = app.util.ajaxUrl(app.urls.minicart);
		$.post(url, null, function(response) {
			if (miniCartV2.length > 0) {
				app.minicart.show(response);
				// show ADDED! on the add to cart button for 2 seconds
				var a2c = form.find('#add-to-cart');
				if (!a2c.data('text')) {
					a2c.data('text', a2c.text());
				}
				a2c.text(Resources.PRODUCT_ADDED);
				if ($cache.addedTimer) {
					clearTimeout($cache.addedTimer);
				}
				$cache.addedTimer = setTimeout(function(){
					a2c.text(a2c.data('text'));
					a2c.data('text', null);
				}, 2000);
			}
			else {
				app.minicart.update(response);
			}
		});

	});

	if (typeof dataLayer !== "undefined") {
		dataLayer.push(app.datalayer.getEvent("event", "addToCart"));
		// dataLayer.push({ "event" : "addToCart"});
		var transactionProducts = [];
		var dlPid, dlSku, dlProductName, dlCategoryID, dlPrice, dlQuantity;
		if (typeof cmProductName !== "undefined") {
			dlProductName = cmProductName;
			dlCategoryID = cmCategoryID;
		} else {
			var dlProductName = form.attr("data-pname");
			var dlCategoryID = form.attr("data-pcat");
		}

			dlSku = $("#pid").val();
			dlPid = $('#product-content').find('div[data-master]').attr('data-master');
			// dlProductName set previously
			// dlCategoryID set previously
			dlPrice = ($.trim($(".price-sales").html().trim()).replace("$", ""));
			dlQuantity = parseInt(qty.val(), 10);

		transactionProducts.push({ "sku" : dlSku, "pid" : dlPid, "name" : dlProductName, "category" : dlCategoryID, "price" : dlPrice, "quantity" :dlQuantity });

		dataLayer.push(app.datalayer.getEvent("transactionProducts", transactionProducts));
		// dataLayer.push({"transactionProducts" : transactionProducts });
	}
}
/*End Monogramming functions*/


mainImage.init();
initializeEvents();
initializeDom();

module.exports = productInventory;
module.exports.monogramReset = monogramReset;
module.exports.fullScreenImage = fullScreenImage;
module.exports.validateFormFields = validateFormFields;
},{"../dialog":34,"../util":82,"./":77,"lodash":5}],79:[function(require,module,exports){
'use strict';

var util = require('../util');
var inventory = require('./');
var TPromise = require('promise');

var shippingInventory = {

    shipInstead: function(uuid) {
        TPromise.resolve(
            $.ajax({
                url: Urls.setStorePickup,
                type: 'GET',
                data: { plid: uuid, storeid: '', storepickup: 'false'}
            })
        ).then(function() {
            setTimeout(function() {
                window.location.reload();
            }, 0);
        });
    },

    openEditStoreDialog: function($shipmentContainer) {
        var $colorEl = $shipmentContainer.find('div[data-attribute="color"] .value');
        var $priceEl = $shipmentContainer.find('.mini-product-price-total');
        var $qtyEl = $shipmentContainer.find('.mini-product-quantity');

        var shipmentData = $shipmentContainer.data();
        var pid =  shipmentData.pid;
        var uuid = shipmentData.uuid;
        var selectedStore = shipmentData.storeId;
        var newSelectedStoreId = '';
        var productColor = ($colorEl.length > 0) ? $colorEl.text().trim() : '';
        var productPrice = ($priceEl.length > 0) ? $priceEl.text().trim() : '';
        var productQty =  ($qtyEl.length > 0) ?  $qtyEl.text().trim() : '';

        TPromise.resolve(
            $.ajax({
                dataType: 'html',
                url: util.appendParamsToUrl(Urls.getProductInfo, {
                    pid: pid,
                    productColor: productColor,
                    productPrice: productPrice,
                    productQty: productQty
                })
            })
        ).then(function(response) {
            inventory.selectStoreDialog({
                pid: pid,
                pickupContent: response,
                stores: [],
                selectedStoreId: selectedStore,
                selectedStoreText: Resources.SELECTED_STORE,
                selectStoreCallback: function(storeId) {
                    newSelectedStoreId = storeId;
                },
                continueCallback: function () {
                    if (newSelectedStoreId !== '' && newSelectedStoreId !== selectedStore) {
                        TPromise.resolve($.ajax({
                            url: Urls.setStorePickup,
                            type: 'GET',
                            data: {
                                plid: uuid,
                                storeid: newSelectedStoreId,
                                storepickup: 'true'
                            }
                        })).then(function() {
                            setTimeout(function() {
                                window.location.reload();
                            }, 0);
                        });
                    }
                }
            });
        });
    },

    init: function () {
        var self = this;

        $(document).on('click', '.js-shipping-ship-instead', function(e) {
            e.preventDefault();
            var uuid = $(this).data('uuid');
            self.shipInstead(uuid);
        });

        $(document).on('click', '.js-shipping-edit-store', function(e) {
            e.preventDefault();
            var $shipmentContainer = $(this);
            self.openEditStoreDialog($shipmentContainer);
        });
    }
};

module.exports = shippingInventory;

},{"../util":82,"./":77,"promise":6}],80:[function(require,module,exports){
'use strict';

/**
 * Checks the TLS and displays a warning if appropriate
 * @function getUserAgent Checks the TLS and displays a warning if appropriate
 **/
function getUserAgent() {
    // Use an external service to check the TLS of the browser
    // NOTE: this implementation uses https://www.howsmyssl.com
    //     you may also wish to consider the API available at https://www.ssllabs.com/projects/ssllabs-apis/index.html
    var url = 'https://www.howsmyssl.com/a/check';
    var cookieName = 'dw_TLSWarning';
    var cookieValue = getCookie(cookieName);

    // Test to see if this browser has already been flagged by looking at its cookies
    if (!cookieValue) {
        getTLS(url, function (message) {
            if (message.length > 0) {
                showWarning(message[0]);

                // the browser is bad - set the cookie to true (for 15 minutes)
                setCookie(cookieName, 'true', 15);
            } else {
                // else the browser is good, set the cookie to false (for 30 days) so we don't check again
                setCookie(cookieName, 'false', 60 * 24 * 30);
            }
        });
    } else if (cookieValue === 'true') {
        // if we already know that this is an invalid browser, show the warning
        showWarning(Resources.TLS_WARNING);
    }
}

/**
 * Calls out to the TLS service and calls the callback with a message (if necessary)
 * @function getTLS
 *
 * @param {string} url - URL of external TLS-checking API
 * @param {function} callback - function to call with response
 **/
function getTLS(url, callback) {
    var message = [];

    // First, see if the browser is among the suspect browsers to see if a TLS check is necessary
    var userAgent = navigator.userAgent;

    /** This list derived from https://www.ssllabs.com/ssltest/clients.html **/
    var badBrowsers = ['MSIE 6.0','MSIE 7.0','MSIE 8.0','MSIE 9.0','MSIE 10.0',
                       'Android 2.3.7', 'Android 4.0.4', 'Android 4.1.1', 'Android 4.2.2', 'Android 4.3',
                       'Safari 5.1.9 / OS X 10.6.8', 'Safari 6.0.4 / OS X 10.8.4 '];
    function checkTLSLevel(data) {
        // If we can determine the TLS level, check to see if it's less than 1.2
        if (parseFloat(data.tls_version.split(' ')[1]) < 1.1) {
            message.push(Resources.TLS_WARNING);
            callback(message);

            //If you want to track statistics on bad TLS hits, include this call
            $.ajax({url: Urls.TLSBadTLS});
        }
    }

    function reportBadBrowser () {
        // If the TLS level cannot be determined just report that this browser is suspect
        message.push(Resources.TLS_WARNING);
        callback(message);

        //If you want to track statistics on deprecated browsers, include this call
        $.ajax({url: Urls.TLSBadBrowser});
    }

    for (var i = 0; i < badBrowsers.length; i++) {
        if (userAgent.match(badBrowsers[i])) {
            // It's a suspect browser, let's see what it's TLS level is
            $.ajax({
                url: url
            }).done(checkTLSLevel).fail(reportBadBrowser);
            break;
        }
    }

    /** For testing purposes, uncomment this block
        message.push(Resources.TLS_WARNING);
    **/
    callback(message);
}

/**
 * @function showWarning turns on the browser-compatibility-alert and sets the message
 *
 * @param {string} message - the message that will be shown upon detection of a bad browser
 **/
function showWarning(message) {
    $('<div/>').addClass('browser-compatibility-alert').append($('<p/>').addClass('browser-error').html(message)).appendTo('#browser-check');
}

/**
 * @function getCookie
 *
 * @param {string} key - The cookie name
 * @returns {string} value - the value of the cookie if found, null otherwise
 **/
function getCookie(key) {
    var cookies = document.cookie.split(';');
    for (var i = 0; i < cookies.length; i++) {
        var tokens = cookies[i].split('=');
        var cookieKey = tokens[0].trim();
        if (cookieKey === key) {
            return tokens[1];
        }
    }
    return '';
}

/**
 * @function setCookie
 *
 * @param {string} key - The cookie name
 * @param {string} value - The cookie value
 * @param {integer} minutes - The number of minutes to expire the cookie
 **/
function setCookie (key, value, minutes) {
    var date = new Date();
    date.setTime(date + (minutes * 60 * 1000));

    document.cookie = key + '=' + value + '; expires=' + date.toGMTString() + '; path=/';
}

/**
 * Export the getUserAgent function
 */

exports.getUserAgent = getUserAgent;

},{}],81:[function(require,module,exports){
'use strict';

/**
 * @function
 * @description Initializes the tooltip-content and layout
 */
exports.init = function () {
    $(document).tooltip({
        items: '.tooltip',
        track: true,
        position: {
            my: "left+30 center",
            at: "right center",
            collision: "flipfit",
            using: function( position, feedback ) {
                var $this = $(this);
                // set up tooltip position
                $this.css( position );
                // add extra class to determine tooltip's horizontal position(left or right)
                var horizontalPos = 'horizontal-pos-' + feedback.horizontal;
                $this.find('.ui-tooltip-content').addClass(horizontalPos);
            }
        },
        content: function () {
            return $(this).find('.tooltip-content').html();
        },
        open: function() {
        	$('.ui-tooltip-content').after().click(function () {
        });}
    });

    $('.tooltip').on('click', function (e) {
        e.preventDefault();
    });

    $('.share-link').on('click', function (e) {
        e.preventDefault();
        var target = $(this).data('target');
        if (!target) {
            return;
        }
        $(target).toggleClass('active');
    });
};

},{}],82:[function(require,module,exports){
'use strict';

var _ = require('lodash');

var util = {
    /**
     * @function
     * @description appends the parameter with the given name and value to the given url and returns the changed url
     * @param {String} url the url to which the parameter will be added
     * @param {String} name the name of the parameter
     * @param {String} value the value of the parameter
     */
    appendParamToURL: function (url, name, value) {
        // quit if the param already exists
    	if (name.indexOf('source') == -1 && url.indexOf(name + '=') !== -1) {
            return url;
        }
        var separator = url.indexOf('?') !== -1 ? '&' : '?';
        return url + separator + name + '=' + encodeURIComponent(value);
    },

    getUri : function (o) {
        var a;
        if (o.tagName && $(o).attr("href")) {
            a = o;
        }
        else if (typeof o === "string") {
            a = document.createElement("a");
            a.href = o;
        }
        else {
            return null;
        }
        var pathParts = '';
        if (a.pathname) {
            pathParts = a.pathname.split('/');
        }
        return {
            protocol : a.protocol, //http:
            host : a.host, //www.myexample.com
            hostname : a.hostname, //www.myexample.com'
            port : a.port, //:80
            path : a.pathname, // /sub1/sub2
            query : a.search, // ?param1=val1&param2=val2
            queryParams : a.search.length > 1 ? util.getQueryStringParams(a.search.substr(1)) : {},
            hash : a.hash, // #OU812,5150
            url : a.protocol+ "//" + a.host + a.pathname,
            urlWithQuery : a.protocol+ "//" + a.host + a.port + a.pathname + a.search,
            page : pathParts.length > 0 ? pathParts[pathParts.length-1] : '' // sub2
        };
    },

    /**
     * @function
     * @description remove the parameter and its value from the given url and returns the changed url
     * @param {String} url the url from which the parameter will be removed
     * @param {String} name the name of parameter that will be removed from url
     */
    removeParamFromURL: function (url, name) {
        if (url.indexOf('?') === -1 || url.indexOf(name + '=') === -1) {
            return url;
        }
        var hash;
        var params;
        var domain = url.split('?')[0];
        var paramUrl = url.split('?')[1];
        var newParams = [];
        // if there is a hash at the end, store the hash
        if (paramUrl.indexOf('#') > -1) {
            hash = paramUrl.split('#')[1] || '';
            paramUrl = paramUrl.split('#')[0];
        }
        params = paramUrl.split('&');
        for (var i = 0; i < params.length; i++) {
            // put back param to newParams array if it is not the one to be removed
            if (params[i].split('=')[0] !== name) {
                newParams.push(params[i]);
            }
        }
        return domain + '?' + newParams.join('&') + (hash ? '#' + hash : '');
    },

    /**
     * @function
     * @description appends the parameters to the given url and returns the changed url
     * @param {String} url the url to which the parameters will be added
     * @param {Object} params
     */
    appendParamsToUrl: function (url, params) {
        var _url = url;
        _.each(params, function (value, name) {
            _url = this.appendParamToURL(_url, name, value);
        }.bind(this));
        return _url;
    },
    /**
     * @function
     * @description extract the query string from URL
     * @param {String} url the url to extra query string from
     **/
    getQueryString: function (url) {
        var qs;
        if (!_.isString(url)) { return; }
        var a = document.createElement('a');
        a.href = url;
        if (a.search) {
            qs = a.search.substr(1); // remove the leading ?
        }
        return qs;
    },
    /**
     * @function
     * @description
     * @param {String}
     * @param {String}
     */
    elementInViewport: function (el, offsetToTop) {
        var top = el.offsetTop,
            left = el.offsetLeft,
            width = el.offsetWidth,
            height = el.offsetHeight;

        while (el.offsetParent) {
            el = el.offsetParent;
            top += el.offsetTop;
            left += el.offsetLeft;
        }

        if (typeof(offsetToTop) !== 'undefined') {
            top -= offsetToTop;
        }

        if (window.pageXOffset !== null) {
            return (
                top < (window.pageYOffset + window.innerHeight) &&
                left < (window.pageXOffset + window.innerWidth) &&
                (top + height) > window.pageYOffset &&
                (left + width) > window.pageXOffset
            );
        }

        if (document.compatMode === 'CSS1Compat') {
            return (
                top < (window.document.documentElement.scrollTop + window.document.documentElement.clientHeight) &&
                left < (window.document.documentElement.scrollLeft + window.document.documentElement.clientWidth) &&
                (top + height) > window.document.documentElement.scrollTop &&
                (left + width) > window.document.documentElement.scrollLeft
            );
        }
    },

    /**
     * @function
     * @description Appends the parameter 'format=ajax' to a given path
     * @param {String} path the relative path
     */
    ajaxUrl: function (path) {
        return this.appendParamToURL(path, 'format', 'ajax');
    },

    /**
     * @function
     * @description
     * @param {String} url
     */
    toAbsoluteUrl: function (url) {
        if (url.indexOf('http') !== 0 && url.charAt(0) !== '/') {
            url = '/' + url;
        }
        return url;
    },
    /**
     * @function
     * @description Loads css dynamically from given urls
     * @param {Array} urls Array of urls from which css will be dynamically loaded.
     */
    loadDynamicCss: function (urls) {
        var i, len = urls.length;
        for (i = 0; i < len; i++) {
            this.loadedCssFiles.push(this.loadCssFile(urls[i]));
        }
    },

    /**
     * @function
     * @description Loads css file dynamically from given url
     * @param {String} url The url from which css file will be dynamically loaded.
     */
    loadCssFile: function (url) {
        return $('<link/>').appendTo($('head')).attr({
            type: 'text/css',
            rel: 'stylesheet'
        }).attr('href', url); // for i.e. <9, href must be added after link has been appended to head
    },
    // array to keep track of the dynamically loaded CSS files
    loadedCssFiles: [],

    /**
     * @function
     * @description Removes all css files which were dynamically loaded
     */
    clearDynamicCss: function () {
        var i = this.loadedCssFiles.length;
        while (0 > i--) {
            $(this.loadedCssFiles[i]).remove();
        }
        this.loadedCssFiles = [];
    },
    /**
     * @function
     * @description Extracts all parameters from a given query string into an object
     * @param {String} qs The query string from which the parameters will be extracted
     */
    getQueryStringParams: function (qs) {
        if (!qs || qs.length === 0) { return {}; }
        var params = {},
            unescapedQS = decodeURIComponent(qs);
        // Use the String::replace method to iterate over each
        // name-value pair in the string.
        unescapedQS.replace(new RegExp('([^?=&]+)(=([^&]*))?', 'g'),
            function ($0, $1, $2, $3) {
                params[$1] = $3;
            }
        );
        return params;
    },

    fillAddressFields: function (address, $form) {
        for (var field in address) {
            if (field === 'ID' || field === 'UUID' || field === 'key') {
                continue;
            }
            // if the key in address object ends with 'Code', remove that suffix
            $form.find('[name$="' + field.replace('Code', '') + '"]').val(address[field]).blur();
            if (field === 'postalCode') {
                $form.find('input.postal').attr('value', address[field]).blur();
            }
            // update the state fields
            if (field === 'countryCode') {
            	$form.find('[name$="country"]').val(address.countryCode.toUpperCase()).blur();
                // retrigger state selection after country has changed
                // this results in duplication of the state code, but is a necessary evil
                // for now because sometimes countryCode comes after stateCode
                $form.find('[name$="state"]').val(address.stateCode).blur();
                $form.find('[name$="zip"]').val(address.postalCode).blur();
            }
        }
        util.selectUnfloat();
    },
    /**
     * @function
     * @description Updates the number of the remaining character
     * based on the character limit in a text area
     */
    limitCharacters: function () {
        $('form').find('textarea[data-character-limit]').each(function () {
            var characterLimit = $(this).data('character-limit');
            var charCountHtml = String.format(Resources.CHAR_LIMIT_MSG,
                '<span class="char-remain-count">' + characterLimit + '</span>',
                '<span class="char-allowed-count">' + characterLimit + '</span>');
            var charCountContainer = $(this).next('div.char-count');
            if (charCountContainer.length === 0) {
                charCountContainer = $('<div class="char-count"/>').insertAfter($(this));
            }
            charCountContainer.html(charCountHtml);
            // trigger the keydown event so that any existing character data is calculated
            $(this).change();
        });
    },
    /**
     * @function
     * @description Binds the onclick-event to a delete button on a given container,
     * which opens a confirmation box with a given message
     * @param {String} container The name of element to which the function will be bind
     * @param {String} message The message the will be shown upon a click
     */
    setDeleteConfirmation: function (container, message) {
        $(container).on('click', '.delete', function () {
            return window.confirm(message);
        });
    },
    /**
     * @function
     * @description Scrolls a browser window to a given x point
     * @param {String} The x coordinate
     */
    scrollBrowser: function (xLocation) {
        $('html, body').animate({scrollTop: xLocation}, 500);
    },

    isMobile: function () {
        var mobileAgentHash = ['mobile', 'tablet', 'phone', 'ipad', 'ipod', 'android', 'blackberry', 'windows ce', 'opera mini', 'palm'];
        var idx = 0;
        var isMobile = false;
        var userAgent = (navigator.userAgent).toLowerCase();

        while (mobileAgentHash[idx] && !isMobile) {
            isMobile = (userAgent.indexOf(mobileAgentHash[idx]) >= 0);
            idx++;
        }
        return isMobile;
    },
    
    isTouchSupported: function() {
        return ('ontouchstart' in window) || (navigator.msMaxTouchPoints > 0);
    },
    
    getViewport: function () {
        var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
        return w;
    },

    changeStateField : function(country, form, stateEmptyOptionHtml) {
        var stateElements = {
            container: form.find('.state-field-container')
        };
        stateElements.label = stateElements.container.find('label .text-input-label');
        stateElements.input = stateElements.container.find('select');

        var stateIntlElements = {
            container: form.find('.state-field-intl-container')
        };
        stateIntlElements.label = stateIntlElements.container.find('label .text-input-label');
        stateIntlElements.input = stateIntlElements.container.find('input');

        var fieldIdBak = 'state-id-bak';
        var fieldId = form.find("input[name$='_state'], select[name$='_state']").attr('id');
        var zipRow = form.find('.form-row.zip-row');
        var zipLabel = zipRow.find('.text-input-label');
        var zipInput = zipRow.find('input');
        var countries = window.Countries || window.countries;
        var countryConfig = countries[country];

        if (country === '' || country === 'US' || country === 'CA') {
            showStateElements(stateElements, true);
            hideStateElements(stateIntlElements);
            util.togglePhoneMask(form, true);
        } else {
            hideStateElements(stateElements);
            showStateElements(stateIntlElements, false);
            util.togglePhoneMask(form, false);
            /*$('#dwfrm_singleshipping_shippingAddress_addressFields_states_state').parent().css("display","none");
    		$('#dwfrm_singleshipping_shippingAddress_addressFields_states_state option[value="OTHER"]').prop('selected', true);
    		
    		$('#dwfrm_billing_billingAddress_addressFields_states_state').parent().css("display","none");
     		$('#dwfrm_billing_billingAddress_addressFields_states_state option[value="OTHER"]').prop('selected', true);*/
        }

        if (countryConfig && countryConfig.ziplabel) {
            zipLabel.html(countryConfig.ziplabel);
            zipInput.attr('placeholder', countryConfig.ziplabel)
        }

        function showStateElements(stateElements, required) {
            var stateVal = stateElements.input.val();

            stateElements.container.removeClass('visually-hidden')
                .css({ display: 'inline-block' });
            stateElements.input.attr({
                id: fieldId,
                name: fieldId
            });
            stateElements.label.attr('for', fieldId);

            if (required) {
                stateElements.input.addClass('required');
            } else {
                stateElements.input.removeClass('required');
            }

            if (countryConfig) {
                stateElements.label.html(countryConfig.regionLabel || countryConfig.label);
                stateElements.input.attr('placeholder', countryConfig.regionLabel || countryConfig.label);

                if (!_.isEmpty(countryConfig.regions)) {
                    var regionOptionsHtml = stateEmptyOptionHtml;
                    for (var region in countryConfig.regions) {
                        var regionLabel = countryConfig.regions[region];
                        regionOptionsHtml += '<option value="' + region + '" class="select-option"' +
                            ' label="' + regionLabel + '">' + regionLabel + '</option>';
                    }
                    stateElements.input.html(regionOptionsHtml);
                    if (stateVal && stateElements.input.find('option[value=' + stateVal + ']').length > 0) {
                        stateElements.input.val(stateVal);
                    }
                }
            }
            stateElements.input.removeClass('error valid').next('span.error').remove();
        }

        function hideStateElements(stateElements) {
            stateElements.container.addClass('visually-hidden')
                .css({ display: 'none' });
            stateElements.label.attr('for', fieldIdBak);
            stateElements.input.removeClass('required')
                .attr({
                    id: fieldIdBak,
                    name: fieldIdBak
                });
        }
        this.selectUnfloat();
    },

    /**
     * Toggles a format for the phone number when run
     * 
     * @param 	obj 	form
     * @param 	bool 	mask
     * @var 	obj 	phone
     * @return 	VOID
     */
    togglePhoneMask : function (form, mask) {
        var phone = form.find('input.phone');
        if (phone.length) {
            if(mask) {
                phone.mask("(000) 000-0000", { watchInputs: false });
            } else {
                phone.unmask();
            }
        }
    },
 
    initZipService : function (form) {
        // Prepopulate city for checkout redesign
        if (form.length > 0) {
            var country = form.find("select[name$='_country']");
            var postalCode = form.find("input[name$='_zip'], input[name$='_postal']");
            var city = form.find("input[name$='_city']");
            var stateCode = form.find("select[id$='_state']");

            postalCode.on('blur', function() {
                if (country.length > 0 && (country.val() === 'US' || country.val() === '')) {
                    var zip = $(this).val();
                    // only prepopulate if have a full zip
                    if (zip.length >= 5) {
                        $.ajax({
                            url: Urls.getCityStateFromZip,
                            dataType: 'json',
                            data: {
                                'zip': zip
                            }
                        }).done(function(data) {
                            if (data) {
                                if (data.city) {
                                    city.val(capitalizeWords(data.city)).blur();
                                    city.trigger('change');
                                }
                                if (data.state) {
                                    stateCode.val(data.state).blur();
                                    stateCode.trigger('change');
                                }
                            }
                        });
                    }
                }
            });
        }
    },

    // Submit a form via ajax (only if it is valid) and allow for a call back
    formsubmit : function(form, btn, type, callback){
        // Check to see if form is valid
        if (!form.valid()) return;
        // If valid, send the form via ajax
        // Data to send to the jquery call
        var url = app.util.appendParamToURL(form.attr('action'), "format", "ajax");
        // Collect the required form fields
        var data = form.serialize();
        // Figure out what type of call this is (from the button)
        data += "&" + btn.attr("name") + "=" + btn.attr("value");
        // make the server call
        $.ajax({
            url : url,
            data : data,
            type: "POST",
            dataType: type || "html"
        })
        .done(function(e, textStatus){
            if(!callback) return;
            callback(e, textStatus);
        })
        .fail(function (e, textStatus) {
            if(textStatus === "parsererror") {
                alert(textStatus);
            }
        });
    },

    selectUnfloat: function() {
        setTimeout(function () {
            $('.pt_checkout select').each(function (i, el) {
                if ($(el).val() && $(el).val().length < 1) {
                    $(el).parent().addClass('unfloat');
                }
            });
        },100);
    },
    /**
     * Execute callback function when the user has stopped resizing the screen.
     * @param callback {Function} The callback function to execute.
     */
    smartResize: function (callback) {
        var timeout;

        window.addEventListener('resize', function () {
            clearTimeout(timeout);
            timeout = setTimeout(callback, 100);
        });

        return callback;
    },
};

function capitalizeWords(str) {
    str = str.toLowerCase();
    return str.replace(/(\b)([a-zA-Z])/g,
        function(firstLetter){
            return firstLetter.toUpperCase();
        });
}

module.exports = util;

},{"lodash":5}],83:[function(require,module,exports){
'use strict';

var naPhone = /^\(?([2-9][0-8][0-9])\)?[\-\. ]?([2-9][0-9]{2})\-([0-9]{4})(\s*x[0-9]+)?$/;
var regex = {
    phone: {
        us: naPhone,
        ca: naPhone,
        fr: /^0[1-6]{1}(([0-9]{2}){4})|((\s[0-9]{2}){4})|((-[0-9]{2}){4})$/,
        it: /^(([0-9]{2,4})([-\s\/]{0,1})([0-9]{4,8}))?$/,
        jp: /^(0\d{1,4}- ?)?\d{1,4}-\d{4}$/,
        cn: /.*/,
        gb: /^((\(?0\d{4}\)?\s?\d{3}\s?\d{3})|(\(?0\d{3}\)?\s?\d{3}\s?\d{4})|(\(?0\d{2}\)?\s?\d{4}\s?\d{4}))(\s?\#(\d{4}|\d{3}))?$/,
        extension: /(\s*x[0-9]+)/
    },
    email : /^[\w.+-]+@[\w.-]+\.[\w]{2,6}$/,
    postal: {
        us: /^(?!0{3})[0-9]{5}(-?\d{4})?$/,
        ca: /^[ABCEGHJKLMNPRSTVXY]{1}\d{1}[A-Z]{1} *\d{1}[A-Z]{1}\d{1}$/i,
        /* 
        	COMMENTING OUT THE COUNTRIES BELOW SINCE THESE REGULAR EXPRESSIONS 
        	ARE CURRENTLY NOT BEING USED.
        fr: /^(F-)?((2[A|B])|[0-9]{2})[0-9]{3}$/,
        it: /^([0-9]){5}$/,
        jp: /^([0-9]){3}[-]([0-9]){4}$/,
        cn: /^([0-9]){6}$/,
        */
        gb: /^([A-PR-UWYZ0-9][A-HK-Y0-9][AEHMNPRTVXY0-9]?[ABEHMNPRVWXY0-9]? {1,2}[0-9][ABD-HJLN-UW-Z]{2}|GIR 0AA)$/
    },
    notCC: /^(?!(([0-9 -]){13,19})).*$/,
    char_range : /^[\u0020-\u007E\u00BF-\u00FF]*$/,
    just_digits: /[^\d]/g
};
// global form validator settings
var settings = {
    errorClass: 'error',
    errorElement: 'span',
    onkeyup: false,
    onfocusout: function (element) {
        if (!this.checkable(element)) {
            this.element(element);
        }
    }
};

var formatter = {
		phone: formatPhone
};

/**
 * @function
 * @description Validates a given phone number against the countries phone regex
 * @param {String} value The phone number which will be validated
 * @param {String} el The input field
 */
var validatePhone = function (value, el) {
    var country = $(el).closest('form').find('.country');
	if (country.val() == 'US' || country.val() == 'CA') {
	    if (country.length === 0 || country.val().length === 0 || !regex.phone[country.val().toLowerCase()]) {
	        return true;
	    }
	
	    var rgx = regex.phone[country.val().toLowerCase()];
	    var isOptional = this.optional(el);
	    var isValid = rgx.test($.trim(value));
	}
	else {
        var isOptional = true;
	}
	    
    return isOptional || isValid;
};

/**
 * @function
 * @description Formats a phone number to a match a valid regex
 * @param {Object} The JQuery object holding a reference to the phone number input field to be formatted.
 */
function formatPhone (e, selfTriggered) {
	if (selfTriggered) {
		return false; // avoid an infinite loop
	}
 	var $phone = $(this),
	number = $phone.val().toLowerCase(),
	digits = number.replace(regex.just_digits, ""),
	country = $phone.closest('form').find('.country');

	// No formatting for non US or CA phone numbers
	if (country.val() != 'US' && country.val() != 'CA') {
		return false;
	}

    if((number.length > 0) && (number.indexOf('-') == -1)) {
        var formattedNumber = '(';
        formattedNumber += digits.substr(0,3);
        formattedNumber += ') ';
        formattedNumber += digits.substr(3,3);
        formattedNumber += '-';
        formattedNumber += digits.substr(6,4);
        number = formattedNumber;
        $phone.val(formattedNumber);
    }

    $phone.mask("(000) 000-0000");

	if (number.length > 0) {
        $phone.parent().addClass('focused');
    }

    if (country.length === 0 || country.val().length === 0 || !regex.phone[country.val().toLowerCase()]) {
        return true;
    }

    var rgx = regex.phone[country.val().toLowerCase()];
    var isValid = rgx.test($.trim(number));

    if (isValid == false) {
        $phone.parent().removeClass('focused');
    }
	$phone.trigger('change', [true]); // validator function must run after the value changes
}

/**
 * @function
 * @description Validates a given email address.
 * @param {String} value The phone number which will be validated
 * @param {String} el The input field
 */
function validateEmail(value, el) {
	var isOptional = this.optional(el);
	var isValid = regex.email.test($.trim(value));
	return isOptional || isValid; 
} 

/**
 * @function
 * @description Validates a given postal code against the all countries postal regular expression.
 * @param {String} value The postal code which will be validated
 * @param {String} el The input field
 */
function validateAllPostal(value, el) {
    var isValid = false;
    var isOptional = this.optional(el);

    for(var country in regex.postal) {
        if(regex.postal[country].test($.trim(value)) == true){
        	isValid = true;
        	return isOptional || isValid;
        }
    }
    return isOptional || isValid;
}

/**
 * @function
 * @description Validates a given postal code against the country's postal regular expression.
 * @param {String} value The postal code which will be validated
 * @param {String} el The input field
 */
function validatePostal(value, el) {
    var $country = $(el).closest('fieldset').find('.input-select.country');

    if (value.length < 4) {return false;}
 
    if($country.length === 0 || $country.val().length === 0 || !regex.postal[$country.val().toLowerCase()]) {
        return true;
    }
    var rgx = regex.postal[$country.val().toLowerCase()];
    var isValid = rgx.test($.trim(value));

    return isValid;
}

/**
 * @function
 * @description Validates that a credit card owner is not a Credit card number
 * @param {String} value The owner field which will be validated
 * @param {String} el The input field
 */
var validateOwner = function (value) {
    var isValid = regex.notCC.test($.trim(value));
    return isValid;
};

/**
 * @function
 * @description Validates a recipient confirmation email matches recipient email
 * @param {String} value The recipient confirmation email which will be validated
 * @param {String} el The input field
 */
function recipientEmailConfirm(value, el) {
    var isOptional = this.optional(el);
    var recipientEmail = $('input[name="vgcRecipientEmail"]');
    var isValid = ( regex.email.test($.trim(value)) && value.toLowerCase() === recipientEmail.val().toLowerCase() );
    return isOptional || isValid;
}

function validateGiftMsg(value, el) {
    var isOptional = this.optional(el);
    var isValid = ( regex.char_range.test($.trim(value)) );
    return isOptional || isValid;
}

function confirmPassword(value, el) {
    var isOptional = this.optional(el);
    var form = $(el).closest('form');
    var passwordField = form.find('input.password');
    var isValid = false;
    if(passwordField.length > 0) isValid = (value == passwordField.val());
    return isOptional || isValid;
}

var validateGiftRegistryEventDate = function (value) { 
		// Get date from form field input
	var month = parseInt(value.substring(0, 2));
	var day = parseInt(value.substring(5, 7));
	var year = parseInt("20"+parseInt(value.substring(10, 12)));
		// Create new date object
	var eventDate = new Date(year, month-1, day);
	var currentDate = new Date();
		// Make sure event date is past current date
	if(value.length == 12 && (eventDate >= currentDate)) {
		$('#dwfrm_giftregistry_event_date').val(month + ' / ' + day + ' / ' + year); 
		return true;
	} 
	else {
		return false;
	}
};

function comparePassword(value) {
    return $('.input-text.password').val() == value;
}

function validateCC(value, el) {
	//if cc number has * in it, it is a saved card and does not need to be validated
	if(value.indexOf('****') == -1){
	    var isOptional = this.optional(el);
	    value = value.replace(/\s+/g, '');
	    if (value.length < 13) {
	        return isOptional || false;
	    }
	    if (/^(5[1-5]|2[2-7][0-9])/.test(value) || /^4/.test(value) || /^3[47]/.test(value) || /^6(?:011|5|4[4-9])/.test(value)) {
	        return isOptional || luhn.verify(value);
	    } else {
	        return isOptional || false;
	    }
	}else{
		return true;
	}
}

function validateMissingCCExpirationDate (value) {
    var yearData =  value.substr(4, 3);
    var monthData = value.substr(0, 2);
    yearData = '20'+parseInt(yearData);
    if (yearData.length == 4 && parseInt(monthData) > 0 && parseInt(monthData) < 13) {
        return true;
    } else {
        return false;
    }
    
}


function validateCCExpirationDate (value) {
    var yearData =  value.substr(4, 3);
    var monthData = value.substr(0, 2);
    var currentYear =  new Date().getFullYear();
    var currentMonth = new Date().getMonth()+1;
    var allowYear = currentYear + 9;
    yearData = '20'+parseInt(yearData);
    if ( (yearData == currentYear && monthData >= currentMonth) || (yearData <= allowYear && yearData > currentYear) ) {
        return true;
    } else {
        return false
    }
}

var luhn = {
    verify: function(digits) {
        var sum = this.sum(digits, true);
        return sum > 0 && sum % 10 === 0;
    },
    sum: function(digits, even) {
        var sum = 0,
          digit = 0,
          i = digits.length;

        while (i--) {
            digit = Number(digits[i]);
            sum += (even = !even) ? this.computed[digit] : digit;
        }

        return sum;
    },
    computed: [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]
};

/**
 * Add password comparisson method to jQuery validation plugin.
 * Text fields must have 'creditcard' css class to be validated as email
 */
$.validator.addMethod("passwordconfirm", comparePassword, Resources.VALIDATE_INVALID_PASSMATCH);

/**
 * Add credit card expiration date validation method to jQuery validation plugin.
 * Text fields must have 'creditcard' css class to be validated as email
 */
$.validator.addMethod("cc-missing-expiration", validateMissingCCExpirationDate, Resources.MISSING_EXPIRATION);

/**
 * Add credit card expiration date validation method to jQuery validation plugin.
 * Text fields must have 'creditcard' css class to be validated as email
 */
$.validator.addMethod("cc-valid-expiration", validateCCExpirationDate, Resources.INVALID_EXPIRATION);

/**
 * Add credit card validation method to jQuery validation plugin.
 * Text fields must have 'creditcard' css class to be validated as email
 */
$.validator.addMethod("credit-card-number", validateCC, Resources.VALIDATE_NUMBER);

/**
 * validateGiftRegistryEventDate verifies the first two digits are the month, the third and fourth digit is a day
 */
$.validator.addMethod('datenothidden', validateGiftRegistryEventDate, Resources.VALIDATE_DATE);

/**
 * Add email address validation method to jQuery validation plugin.
 * Text fields must have 'email' css class to be validated as email 
 */
$.validator.addMethod("email", validateEmail, Resources.INVALID_EMAIL);

/**
 * Add postal code validation method to jQuery validation plugin.
 * Text fields must have 'postalAll' css class to be validated as postal code
 */
$.validator.addMethod("postalAll", validateAllPostal, Resources.INVALID_POSTAL);

/**
 * Add postal code validation method to jQuery validation plugin.
 * Text fields must have 'postal' css class to be validated as postal code
 */
$.validator.addMethod("postal", validatePostal, Resources.INVALID_POSTAL);

/**
 * Add phone validation method to jQuery validation plugin.
 * Text fields must have 'phone' css class to be validated as phone
 */
$.validator.addMethod('phone', validatePhone, Resources.INVALID_PHONE);

/**
 * Add CCOwner validation method to jQuery validation plugin.
 * Text fields must have 'owner' css class to be validated as not a credit card
 */
$.validator.addMethod('owner', validateOwner, Resources.INVALID_OWNER);

/**
 * Add gift cert amount validation method to jQuery validation plugin.
 * Text fields must have 'gift-cert-amont' css class to be validated
 */
$.validator.addMethod('gift-cert-amount', function (value, el) {
    var isOptional = this.optional(el);
    var isValid = (!isNaN(value)) && (parseFloat(value) >= 5) && (parseFloat(value) <= 5000);
    return isOptional || isValid;
}, Resources.GIFT_CERT_AMOUNT_INVALID);

/**
 * Add gift message validation
 */
$.validator.addMethod('gift-message-chars', validateGiftMsg, Resources.VALIDATE_CHARRANGE);

/**
 * Add positive number validation method to jQuery validation plugin.
 * Text fields must have 'positivenumber' css class to be validated as positivenumber
 */
$.validator.addMethod('positivenumber', function (value) {
    if ($.trim(value).length === 0) { return true; }
    return (!isNaN(value) && Number(value) >= 0);
}, ''); // '' should be replaced with error message if needed

$.validator.addMethod("recipient-email-confirm", recipientEmailConfirm, Resources.VALIDATE_INVALID_EMAILMATCH);

/**
 * Add password confirm validation method to jQuery validation plugin.
 * Text fields must have 'passwordconfirm' css class to be validated as password
 */
$.validator.addMethod("passwordconfirm", confirmPassword, Resources.INVALID_PASSWORDMATCH);

$.extend($.validator.messages, {
    required: Resources.VALIDATE_REQUIRED,
    remote: Resources.VALIDATE_REMOTE,
    email: Resources.VALIDATE_EMAIL,
    url: Resources.VALIDATE_URL,
    date: Resources.VALIDATE_DATE,
    dateISO: Resources.VALIDATE_DATEISO,
    number: Resources.VALIDATE_NUMBER,
    digits: Resources.VALIDATE_DIGITS,
    creditcard: Resources.VALIDATE_CREDITCARD,
    equalTo: Resources.VALIDATE_EQUALTO,
    maxlength: $.validator.format(Resources.VALIDATE_MAXLENGTH),
    minlength: $.validator.format(Resources.VALIDATE_MINLENGTH),
    rangelength: $.validator.format(Resources.VALIDATE_RANGELENGTH),
    range: $.validator.format(Resources.VALIDATE_RANGE),
    max: $.validator.format(Resources.VALIDATE_MAX),
    min: $.validator.format(Resources.VALIDATE_MIN)
});

var validator = {
    regex: regex,
    settings: settings,
    formatter: formatter,
    init: function () {
        var self = this;
        $('form:not(.suppress)').each(function () {
                // Forms having required input fields with data-required-text='' attribute, create customized error messages for clientside form validation
            if ($(this).find('input[data-required-text].required, select[data-required-text].required').length > 0) {
                    // Create new messages object for validate settings
                self.settings.messages = {};
                    // Loop thru each required field to extract the error message
                $(this).find('input[data-required-text].required').each(function() {
                    self.settings.messages[ $(this).attr('id') ] = {
                        'required': $(this).data('required-text')
                    };
                });
            }

            $(this).validate(self.settings);
        });
    },
    initForm: function (f, settings) {
        $(f).validate(settings != null ? settings : this.settings);
    }
};

module.exports = validator;

},{}]},{},[27])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
